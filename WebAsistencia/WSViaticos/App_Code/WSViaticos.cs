
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.Linq;
using System.Web.Services;
using General;
using General.Calendario;
using General.Repositorios;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using General.Modi;
using System.Net;
using System.Net.Mail;
using System.Xml.Serialization;
using AdministracionDeUsuarios;
using General.Sacc;
using General.Sacc.Seguridad;
using General.MAU;
using General.Postular;
using System.Web;

using System.Data;
using System.IO;
using ClosedXML.Excel;
using General.DatosAbiertos;
using General.MED;
//using PdfPrinter.Core.DataContract;
//using PdfPrinter.Core.Common;
//using PdfPrinter.Core.Configuration;
using System.Web.Hosting;
using System.Runtime.Serialization.Formatters.Binary;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.Data.SqlClient;

using General.Recibos;
using General.Csv;
using General.Contrato;
using System.Transactions;
using System.Text;
using General.PotenciarTrabajo;


[WebService(Namespace = "http://wsviaticos.gov.ar/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
[System.Web.Script.Services.ScriptService]
public class WSViaticos : System.Web.Services.WebService
{
    public WSViaticos()
    {
    }


    [WebMethod]
    public Usuario[] GetUsuarios(Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_administracion_de_usuarios")) throw (new Exception("El usuario no tiene permisos para el modulo de usuarios"));
        RepositorioUsuarios repoUsuarios = new RepositorioUsuarios(Conexion());
        List<Usuario> usuarios = repoUsuarios.GetTodosLosUsuarios();
        Usuario[] retuUsuarios = new Usuario[usuarios.Count];
        for (int i = 0; i < usuarios.Count; i++)
        {
            retuUsuarios[i] = usuarios[i];
        }
        return retuUsuarios;
    }

    [WebMethod]
    public RespuestaGetAgentesEvaluablesPor EvalGetAgentesEvaluables(Usuario usuario)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetAgentesEvaluablesPor(usuario);
    }

    [WebMethod]
    public RespuestaAprobarEvaluacionDesempenio AprobarEvaluacionDesempenio(int id_evaluacion, int id_comite, Usuario usuario)
    {
        var respuesta = new RespuestaAprobarEvaluacionDesempenio();
        try
        {
            var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
            var r = repo.InsertarAprobacionEvaluacion(id_evaluacion, id_comite, usuario.Owner.Id, DateTime.Now);
            respuesta.Aprobacion = r;
        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al intentar aprobar la evaluacion de desempeno";
            respuesta.setException(e);
        }
        respuesta.Accion = "AprobarEvaluacionDesempenio";
        return respuesta;

    }

    [WebMethod]
    public RespuestaGetAgentesEvaluablesPor GetAgentesEvaluablesParaVerificarGDE(Usuario usuario)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetAgentesEvaluablesParaVerificarGDE(usuario);
    }
    [WebMethod]
    public RespuestaGetAgentesEvaluablesParaComites GetAgentesEvaluablesParaComites(Usuario usuario)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetAgentesEvaluablesParaComites(usuario);
    }

    [WebMethod]
    public RespuestaGetAgentesEvaluablesPor GetAsignacionEvaluacionCompleta(int id_evaluacion, Usuario usuario)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetAsignacionEvaluacionCompleta(id_evaluacion, usuario);
    }

    [WebMethod]
    public List<PeriodoEvaluacion> BuscarPeriodosEvaluacion(Usuario usuario, Usuario usuario2)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetPeriodosEvaluacion();
    }

    [WebMethod]
    public List<PeriodoEvaluacion> GetPeriodosEvaluacion(Usuario usuario)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetPeriodosEvaluacion();
    }

    [WebMethod]
    public IntRespuestaWS EvalAddIntegranteComite(int idComite, IntegranteComiteEvalDesempenio integrante) {
        var respuesta= new IntRespuestaWS();
        respuesta.Respuesta = integrante.IdPersona;
        try
        {
            var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
            repo.AgregarIntegranteComite(idComite, integrante);
        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al intentar agregar el integrante";
            respuesta.setException(e);
        }
        return respuesta;
    }

    [WebMethod]
    public IntRespuestaWS EvalRemoverIntegranteComite(int idComite, int idIntegrante)
    {
        var respuesta = new IntRespuestaWS();
        respuesta.Respuesta = idIntegrante;
        try
        {
            var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
            repo.RemoverIntegranteComite(idComite, idIntegrante);
            //throw new Exception("blah blah");
        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al intentar remover el responsable";
            respuesta.setException(e);
        }
        return respuesta;
    }

    [WebMethod]
    public AltaBajaUEComiteRespuestaWS EvalAddUnidadEvaluacionAComite(int idComite, int idUnidadEvaluacion)
    {
        var respuesta = new AltaBajaUEComiteRespuestaWS();
        try
        {
            var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
            repo.AgregarUnidadEvaluacionComite(idComite, idUnidadEvaluacion);
        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al intentar agregar la unidad de evaluacion a la unidad de comite";
            respuesta.setException(e);
        }
        respuesta.Accion = "EvalAddUnidadEvaluacionAComite";
        respuesta.IdComite = idComite;
        respuesta.IdUE = idUnidadEvaluacion;
        return respuesta;
    }

    [WebMethod]
    public AltaBajaUEComiteRespuestaWS EvalRemoveUnidadEvaluacionAComite(int idComite, int idUnidadEvaluacion)
    {
        var respuesta = new AltaBajaUEComiteRespuestaWS();
        try
        {
            var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
            repo.RemoverUnidadEvaluacionAComite(idComite, idUnidadEvaluacion);
        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al intentar quitar la unidad de evaluacion a la unidad de comite";
            respuesta.setException(e);
        }
        respuesta.Accion = "EvalRemoveUnidadEvaluacionAComite";
        respuesta.IdComite = idComite;
        respuesta.IdUE = idUnidadEvaluacion;
        return respuesta;
    }

    [WebMethod]
    public List<ComiteEvaluacionDesempenio> GetAllComites()
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetAllComites();
    }

    [WebMethod]
    public ComiteEvaluacionDesempenio AgregarComiteEvaluacionDesempenio(string descripcion, string fecha, string hora, string lugar, int periodo)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.AgregarComite(descripcion, DateTime.Parse(fecha), hora, lugar, periodo);
    }


    [WebMethod]
    public ComiteEvaluacionDesempenio UpdateComiteEvaluacionDesempenio(int id_comite, string descripcion, string fecha, string hora, string lugar, int id_periodo)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.UpdateComite(id_comite, descripcion, DateTime.Parse(fecha), hora, lugar, id_periodo);
    }

    

    [WebMethod]
    public List<UnidadDeEvaluacion> GetEstadosEvaluaciones()
    {
        var excluirPeriodosDeBaja = false;
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetEstadosEvaluaciones(excluirPeriodosDeBaja);
    }

    [WebMethod]
    public List<UnidadDeEvaluacion> GetEstadosEvaluacionesPeriodosActivos()
    {
        var excluirPeriodosDeBaja = true;
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetEstadosEvaluaciones(excluirPeriodosDeBaja);
    }

    [WebMethod]
    public string EvalGetNivelesFormulario(string id_nivel)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repo.GetNivelesFormulario(id_nivel);
    }

    #region asistencia

    //INICIO: DDJJ 104 ---------------
    //[WebMethod]
    //public Area[] AreasConDDJJAdministradasPor(Usuario usuario)
    //{
    //    var responsableDDJJ = new ResponsableDDJJ(RepoPermisosSobreAreas(), Autorizador());
    //    return responsableDDJJ.AreasConDDJJAdministradasPor(usuario).ToArray();
    //}

    //[WebMethod]
    //public Area[] AreasSinDDJJInferioresA(Area area)
    //{
    //    var responsableDDJJ = new ResponsableDDJJ(RepoPermisosSobreAreas(), Autorizador());
    //    return responsableDDJJ.AreasSinDDJJInferioresA(area).ToArray(); 
    //}
    [WebMethod]
    public int DiasHabilesEntreFechas(DateTime desde, DateTime hasta)
    {
        var repo = new RepositorioLicencias(Conexion());
        return repo.DiasHabilesEntreFechas(desde, hasta);
    }


    [WebMethod]
    public string GetAnalisisLicenciaOrdinariaUsuarioLogueado(Usuario usuario)
    {
        var concepto = new ConceptoDeLicencia();
        concepto.Id = 1;
        return JsonConvert.SerializeObject(this.GetAnalisisLicenciaOrdinariaLocal(usuario.Owner.Documento.ToString(), false));
    }

    [WebMethod]
    public AnalisisDeLicenciaOrdinaria GetAnalisisLicenciaOrdinaria(string csv_dnis, bool persistir_resultados)
    {
        return GetAnalisisLicenciaOrdinariaLocal(csv_dnis, persistir_resultados);
    }


    public AnalisisDeLicenciaOrdinaria GetAnalisisLicenciaOrdinariaLocal(string csv_dnis, bool persistir_resultados)
    {
        var ordinaria = new ConceptoLicenciaAnualOrdinaria();
        var analisis = new AnalisisDeLicenciaOrdinaria();
        var begin_time = DateTime.Now;
        var repo_licencias = RepoLicencias();
        var repo_personas = RepositorioDePersonas();


        var val = "," + csv_dnis + ",";
        //var val = ",3721733,3895266,4248540,4298610,4317918,4430880,4513993,4514173,4516189,4541826,4623403,4678004,4833404,4840450,4962776,4980452,4987226,4995854,5054066,5072229,5073887,5083049,5091453,5119328,5150399,5201218,5214899,5218214,5219014,5260931,5262548,5268053,5333992,5416927,5432122,5453033,5473894,5616682,5640330,5663207,5663368,5717570,5814319,5830074,5891158,5945215,5964699,5969302,6052997,6056752,6063484,6066597,6066632,6075183,6079105,6085619,6140314,6150973,6160428,6173675,6178466,6179994,6201768,6216789,6216903,6228761,6241276,6250122,6278699,6354582,6360891,6362264,6373464,6391222,6426044,6427052,6435564,6441550,6493491,6532049,6532064,6532111,6544040,6553382,6553457,6554210,6560687,6609343,6632776,6694154,6702324,6707986,6711644,6717619,7381241,7530181,7593730,7600962,7606315,7607420,7610913,7633682,7686050,7737661,7779985,7787921,7789956,7793253,7820957,7837226,7849597,7869055,8191432,8255244,8277555,8286744,8309017,8346081,8376384,8382912,8424466,8463470,8464872,8495257,8498546,8522520,8558937,8575972,8595941,8635183,8660648,8667020,10013414,10061693,10082669,10084892,10090383,10108434,10121653,10122230,10127047,10136680,10138179,10139318,10139825,10152180,10180457,10184819,10203526,10203744,10212595,10231204,10233786,10258236,10261254,10264042,10264670,10284175,10284483,10314539,10330016,10353348,10373016,10395385,10400872,10425037,10428143,10428998,10433996,10439898,10448072,10449813,10462966,10469120,10477929,10485326,10492129,10494125,10499735,10517223,10539841,10547767,10548351,10551984,10554670,10579403,10587494,10605844,10626102,10659739,10676514,10701790,10716799,10741730,10758032,10777007,10788819,10793075,10797898,10809428,10809455,10815526,10816849,10823532,10830251,10831256,10840687,10843675,10849568,10867208,10868026,10884513,10895882,10899008,10900347,10922775,10924290,10931242,10936508,10949258,10952103,10960295,10960509,10960852,10961787,10964734,10966701,11024464,11037463,11051958,11083677,11091247,11098149,11109316,11121543,11122541,11122879,11129335,11159967,11167040,11170276,11176368,11182289,11201386,11203329,11205417,11231009,11237204,11244311,11255178,11266461,11287023,11293897,11320120,11320409,11320507,11322303,11346597,11358653,11360721,11361583,11361763,11372090,11375983,11389957,11399271,11399393,11403618,11415589,11419521,11419728,11423458,11443393,11443840,11445714,11454280,11456464,11488030,11488589,11489469,11504951,11538886,11547558,11552138,11570106,11578324,11579578,11593859,11597867,11602132,11607138,11607664,11625755,11625756,11632630,11642761,11645388,11666448,11675840,11683946,11701208,11703743,11721990,11755502,11773087,11783558,11792464,11793457,11798026,11815644,11818978,11819489,11828669,11839235,11848834,11854546,11864790,11872867,11876257,11880322,11889001,11889039,11890945,11907469,11908400,11921959,11940043,11945417,11953935,11955017,11967932,11973170,11981067,11983462,11985820,11987598,11988414,11997859,11998602,12001053,12010086,12012635,12017414,12022582,12028786,12046181,12046718,12053096,12055512,12078708,12080612,12082058,12126420,12126603,12143142,12153865,12157306,12159322,12163533,12176696,12206708,12206881,12207578,12261595,12274223,12277025,12277571,12286233,12301657,12301981,12302392,12317441,12366326,12394139,12401115,12406243,12406254,12427000,12437987,12438031,12468964,12472226,12481571,12487128,12504384,12505765,12506169,12511139,12520247,12548620,12551446,12561327,12563769,12573225,12574708,12581968,12587775,12588232,12588869,12589394,12620651,12623166,12623871,12623925,12668277,12676126,12697155,12700035,12712711,12713545,12713609,12713991,12733973,12739234,12741275,12744898,12753250,12759257,12767266,12776176,12780794,12784319,12785954,12792481,12795968,12798408,12798448,12798516,12813075,12818281,12834760,12849105,12849918,12896895,12904314,12927247,12942175,12943725,12945726,12946542,12949892,12953405,12957251,12958582,12961176,12961660,12964529,12969639,12975049,12975159,12976059,12976181,12980202,12980903,12981483,12982600,12996335,13014792,13022857,13027772,13069170,13080405,13088174,13102744,13103600,13106632,13117957,13120900,13127350,13130380,13133648,13137243,13137515,13138388,13138649,13156775,13158567,13172331,13208932,13211930,13214723,13216838,13236898,13245357,13245662,13264030,13264224,13265741,13295707,13302203,13303928,13305928,13307945,13313581,13313748,13314887,13315688,13316699,13322679,13322784,13331977,13333954,13335235,13339041,13348407,13360275,13361020,13368188,13372639,13375084,13385328,13395353,13402459,13407166,13410764,13418943,13425794,13432405,13432901,13437047,13437655,13438841,13444758,13447209,13451369,13454149,13477606,13478986,13490268,13515034,13518695,13530443,13530507,13548760,13550177,13566320,13585812,13592917,13615584,13617753,13652468,13656126,13656179,13656490,13656744,13669641,13684795,13685719,13686257,13687376,13687399,13687754,13694355,13707583,13713206,13713690,13736274,13737657,13739273,13740727,13753732,13753899,13754206,13766684,13766976,13773881,13782070,13782196,13782417,13789555,13792270,13800464,13801496,13807376,13807602,13807867,13808514,13844221,13851054,13855365,13859109,13865107,13876111,13879278,13884741,13896804,13900123,13904796,13907487,13909616,13912997,13915434,13915663,13915806,13924128,13943952,13945818,13976847,13982180,13983957,13990227,13991643,13992286,13995796,13996563,13996744,14003305,14003658,14014049,14026749,14027089,14027242,14045493,14051566,14052476,14060134,14064052,14069311,14081292,14087997,14091984,14101330,14105422,14116094,14116284,14121705,14138129,14140910,14142240,14144704,14145312,14176271,14182109,14195270,14201535,14231556,14233198,14235927,14242906,14255504,14269126,14272858,14277836,14281981,14309869,14311103,14316007,14316887,14324755,14324866,14327709,14327934,14337842,14346038,14353944,14359818,14369698,14375573,14380416,14388365,14410345,14429007,14431667,14432666,14435817,14441881,14456617,14460230,14463738,14464289,14472971,14483211,14495611,14497403,14497809,14502136,14513423,14528363,14547611,14548971,14559068,14563467,14568897,14582743,14583938,14609968,14617409,14647373,14659162,14659952,14660905,14663104,14663153,14672855,14719242,14728272,14735981,14740570,14741538,14750832,14761629,14764039,14767026,14779797,14796038,14796516,14806269,14816349,14823231,14825800,14840169,14844992,14845390,14846500,14851331,14852867,14855944,14860595,14868274,14872088,14876454,14877570,14880220,14895966,14900550,14901608,14927705,14932145,14946395,14946490,14956041,14957845,14959158,14959269,14964411,14970001,14990046,14990868,14996796,16019440,16023232,16025529,16028401,16037261,16039088,16043568,16054105,16055781,16077678,16105207,16114913,16123805,16124308,16130459,16137590,16150405,16161845,16171052,16172633,16184005,16185882,16187536,16190393,16190793,16191999,16208515,16214018,16218798,16223206,16259093,16262680,16274918,16275650,16287633,16287715,16289198,16291049,16296753,16308902,16321878,16327224,16335538,16345439,16345771,16356295,16372630,16379331,16380102,16401745,16405094,16413687,16427345,16436824,16444268,16470164,16474639,16480763,16492125,16492703,16495840,16504493,16519797,16528239,16531115,16533276,16533781,16542688,16545497,16548541,16553361,16573121,16580757,16583796,16591416,16591734,16594210,16595320,16596778,16607758,16613236,16630994,16641996,16669727,16673224,16678539,16679907,16681773,16687037,16694401,16728145,16737773,16747526,16749993,16753318,16754770,16755111,16755931,16763628,16765501,16767353,16768481,16782486,16787993,16788631,16790555,16793159,16809145,16812454,16821984,16830819,16833560,16835853,16844962,16867260,16870428,16871071,16876055,16883836,16894382,16895597,16895955,16896179,16900387,16913327,16914293,16916581,16929900,16938119,16938708,16941162,16944769,16961408,16965617,16965645,16970368,16973737,16974062,16974407,16974767,16976212,17003930,17008167,17008301,17019567,17023204,17028230,17038995,17056948,17061179,17062381,17080059,17082314,17086768,17100450,17106020,17106887,17110313,17143050,17148439,17148585,17163216,17163957,17166505,17170324,17172106,17172472,17177133,17195009,17200622,17203040,17229657,17229728,17232051,17238885,17243472,17248253,17251196,17253002,17256684,17269048,17286727,17294876,17297612,17299468,17308032,17318533,17325858,17326617,17326835,17332584,17332590,17333830,17350036,17354104,17363298,17363790,17364049,17365063,17365131,17366179,17366250,17367889,17392345,17394423,17406375,17411001,17449030,17449065,17454023,17476402,17492032,17499403,17529032,17534502,17538065,17542673,17547030,17556831,17560622,17569882,17569949,17574699,17575112,17587147,17587621,17588649,17588990,17595395,17602872,17606017,17607665,17608220,17612164,17612504,17613190,17616238,17635475,17644004,17657076,17660567,17666295,17666620,17686122,17687252,17691514,17703778,17704901,17710899,17713489,17717084,17732164,17732723,17742890,17747853,17749663,17753488,17754400,17754866,17759854,17761700,17765726,17781119,17785416,17802346,17806761,17818038,17820232,17820796,17822838,17824939,17826177,17829074,17833015,17847240,17848755,17856668,17861703,17863006,17863723,17864163,17875259,17875349,17880860,17902102,17904248,17906846,17910618,17919836,17921440,17934255,17935449,17943914,17945338,17954930,17966670,17968300,17971979,17989707,17993034,17993051,18004988,18019099,18025795,18034531,18034672,18034739,18034785,18046370,18047730,18051156,18066185,18069041,18071582,18087749,18089868,18091445,18094568,18098362,18101807,18106677,18106892,18109354,18110361,18116306,18134449,18141194,18143503,18151622,18154418,18159132,18163238,18175333,18178609,18183438,18191231,18195526,18199146,18213489,18217164,18222055,18222748,18225870,18227788,18234653,18242073,18252077,18253428,18254421,18259480,18260530,18272517,18272953,18277911,18278630,18279586,18280194,18282868,18287104,18293915,18295296,18298428,18302245,18305454,18308753,18311122,18316253,18318955,18322105,18323765,18328572,18343448,18349230,18353115,18357706,18363654,18365704,18369555,18370371,18380273,18383282,18388770,18389538,18392884,18393468,18395332,18398057,18403798,18408015,18412803,18414562,18420485,18426751,18428025,18429067,18435564,18440770,18445586,18451514,18451855,18452792,18459059,18466572,18468585,18468935,18470566,18479004,18485560,18497519,18506532,18507027,18512574,18513352,18513441,18517112,18532332,18545044,18551773,18555453,18562309,18569210,18581543,18583408,18588266,18588756,18602777,18607983,18611932,18622089,18627296,18641606,18667741,18673306,18698569,18706393,18717415,18719449,18724166,18737077,18756771,18767013,18774989,18780191,18795272,18795682,18803978,18804309,18811790,18816012,18829186,18837488,18843174,18844965,18847945,18850302,18851923,18862273,18862463,18863114,18863607,18865079,18873172,18873272,18874538,18874738,18875838,18878377,18881810,18884466,18896257,18897487,18897488,18898398,19003337,19003658,19005537,19006292,19007628,19008054,19008566,19012159,19013629,19016188,19016199,19018733,19018930,19019034,19019292,19019627,19020683,19022552,19022985,19023570,19025471,19027894,19036119,19038702,19040065,20000310,20002747,20004493,20006968,20007852,20007869,20008710,20009900,20010811,20011485,20012851,20014533,20016580,20017824,20023516,20025761,20026554,20030156,20035618,20035948,20056179,20071006,20089627,20108035,20111307,20121178,20159915,20163111,20187308,20193715,20198441,20204509,20211857,20217460,20219002,20226106,20226608,20228520,20233812,20236333,20244373,20250436,20250670,20251122,20253708,20263176,20265411,20266025,20266813,20270544,20270658,20270854,20284304,20286366,20289732,20295689,20314615,20324989,20332273,20338925,20350285,20356660,20359553,20369276,20378792,20379742,20383139,20383713,20387104,20389367,20391602,20396299,20403084,20404596,20405037,20406443,20409874,20416475,20416670,20416819,20416820,20420088,20420471,20426813,20426856,20426954,20427461,20428488,20448823,20463794,20464207,20469246,20477190,20481107,20489695,20493085,20493122,20497653,20501876,20503320,20519192,20521311,20521604,20527145,20527196,20534171,20537168,20537488,20537873,20540626,20545731,20550147,20561449,20561770,20562194,20568017,20569546,20573286,20573549,20581325,20598114,20598162,20607795,20616840,20617496,20618482,20618762,20634172,20636223,20636747,20646862,20646876,20649699,20650011,20652377,20665028,20683124,20683288,20698170,20698273,20699768,20700198,20719276,20723395,20728243,20729952,20735780,20736041,20751155,20760531,20764573,20797238,20809249,20832714,20840064,20840268,20852426,20856358,20861270,20862775,20863889,20864166,20864410,20874660,20891171,20891210,20891756,20893403,20893947,20894696,20899615,20907784,20908298,20908510,20911566,20921108,20921564,20922151,20922672,20946442,20954864,20956146,20964225,20965231,20979712,20982338,20983613,20993935,20994148,21002136,21004141,21013691,21017466,21048681,21050145,21055063,21056928,21057078,21058743,21086627,21115195,21130854,21142117,21142630,21155590,21175591,21301676,21303259,21306140,21314947,21321812,21328624,21335913,21341100,21353749,21363289,21381176,21387714,21388976,21398546,21407089,21412573,21430866,21431287,21436952,21444863,21454747,21463213,21465423,21469393,21473807,21477081,21477791,21478018,21480867,21485056,21485273,21486160,21486243,21492195,21492978,21499523,21502875,21505388,21508455,21512355,21519029,21519694,21519727,21523039,21536260,21543925,21544029,21544235,21550321,21552136,21555372,21560782,21561670,21577294,21577336,21582899,21589166,21595144,21596634,21602078,21603118,21609165,21611995,21619842,21624166,21632752,21635088,21636807,21640781,21644832,21646696,21651548,21654223,21657414,21672178,21703300,21710661,21715490,21715856,21720522,21723683,21726036,21727625,21728702,21728957,21729662,21732317,21744037,21749971,21752866,21756524,21756622,21762355,21763630,21772160,21779554,21784091,21786001,21787171,21787981,21795191,21796638,21797562,21797846,21811013,21812092,21827839,21828009,21828053,21829794,21831658,21832236,21832701,21850623,21854948,21871249,21872953,21873718,21878946,21888890,21894217,21909158,21917898,21921024,21921098,21922703,21923155,21923826,21925132,21928500,21938174,21940482,21945591,21953000,21953649,21953765,21954194,21954658,21964594,21975477,21977206,21981107,21986631,22001691,22002799,22006376,22007275,22017202,22025355,22049006,22049144,22049417,22052121,22052248,22069571,22090317,22097983,22100520,22108116,22114778,22121399,22125113,22125906,22126276,22128233,22128263,22128415,22128447,22140388,22147351,22147507,22148838,22151922,22151980,22154401,22157791,22158172,22158256,22158676,22167498,22173990,22174406,22174407,22177605,22183019,22186107,22191051,22195889,22198484,22203676,22207155,22211433,22212679,22233250,22236778,22237211,22237340,22243277,22264634,22276439,22277520,22285767,22290114,22293018,22302255,22302884,22303455,22304391,22310628,22314116,22323533,22333201,22335082,22341868,22344585,22349213,22349613,22350605,22353008,22362151,22366451,22374062,22375813,22376896,22386172,22405908,22409822,22411929,22426051,22426848,22432651,22433750,22433990,22434060,22434189,22434277,22435831,22447405,22448645,22457538,22468027,22471262,22474825,22479715,22489297,22493025,22496431,22503376,22508602,22524446,22533532,22538204,22545953,22547535,22548270,22548918,22552995,22570554,22572596,22582310,22583076,22584428,22588287,22590036,22593372,22596311,22596609,22598381,22605255,22610781,22615674,22620531,22629902,22634895,22647300,22649440,22651692,22651909,22654705,22655293,22655921,22656180,22661324,22662854,22667136,22675395,22678431,22686180,22699191,22699563,22706654,22707956,22708815,22709885,22717461,22717766,22725381,22725695,22734738,22737974,22740375,22755723,22764007,22765308,22767397,22767463,22777282,22780863,22781316,22781921,22784958,22787253,22809464,22809741,22818830,22825780,22829294,22834337,22837526,22837529,22842949,22849830,22851630,22854583,22858858,22859279,22860624,22870116,22871109,22871332,22871426,22871703,22871972,22872219,22880128,22885307,22891163,22893668,22906788,22913337,22917543,22923942,22924105,22950655,22955816,22964456,22965372,22968034,22983775,22988721,22990377,22991254,22996678,22997085,23003700,23006253,23009796,23012890,23024162,23024169,23026921,23029545,23044421,23044422,23045000,23045386,23050517,23050874,23053261,23057885,23060270,23065499,23066833,23068246,23075675,23076360,23078524,23081073,23090076,23090781,23091276,23091542,23091835,23092863,23094280,23100353,23102107,23102829,23103221,23106872,23108969,23115794,23120431,23123198,23123296,23123485,23123688,23124068,23124168,23125721,23127258,23127847,23127988,23136360,23140227,23147521,23147774,23152527,23158814,23174101,23177723,23182438,23182584,23182778,23194347,23197247,23197536,23199710,23205489,23210166,23210460,23216678,23218779,23227787,23238031,23238109,23245960,23248590,23250012,23250035,23250288,23251294,23251386,23254430,23256800,23257254,23259661,23261691,23269667,23270471,23270497,23281160,23283474,23292353,23297515,23303024,23309712,23313122,23314535,23326315,23326477,23326621,23329516,23335111,23337797,23340687,23340786,23347233,23351545,23366241,23366317,23374417,23374761,23374899,23375821,23384178,23398180,23398203,23398671,23403238,23403752,23404635,23405885,23408507,23408870,23408985,23416840,23417492,23452791,23453112,23453572,23454241,23454243,23462011,23463926,23467665,23467718,23469627,23469766,23471725,23472303,23474087,23474552,23481911,23482964,23485266,23485280,23485446,23489127,23490872,23505545,23507512,23507750,23515432,23519798,23521175,23522031,23522339,23531740,23539383,23539478,23541738,23549016,23551434,23551459,23552886,23556827,23557279,23569290,23569630,23569707,23570178,23571903,23572388,23573093,23573399,23574530,23576401,23582428,23587295,23590899,23598298,23598414,23598456,23599528,23602986,23608279,23611511,23615331,23617699,23626082,23626253,23626522,23627605,23628820,23630497,23632321,23644118,23644282,23644389,23645179,23648660,23668210,23671480,23671966,23674673,23675948,23689205,23698723,23700654,23701390,23702964,23703890,23704828,23705952,23723532,23724398,23724970,23732329,23754991,23757793,23766713,23766836,23767398,23768615,23771456,23771676,23772197,23773715,23773754,23774828,23778258,23781997,23784665,23784774,23787898,23788179,23789290,23791291,23792965,23798439,23799725,23801498,23806767,23815393,23815839,23817341,23827369,23829294,23829671,23834654,23851982,23856054,23856925,23858331,23864226,23865252,23866181,23866974,23872380,23873297,23877949,23879096,23880060,23881191,23886879,23887714,23888613,23898489,23899401,23904936,23910920,23913686,23915160,23924360,23925820,23942314,23949754,23950214,23950249,23960278,23967786,23968109,23969268,23969999,23971226,23974340,23974912,23992228,23995132,23995191,23995566,24000640,24001915,24003648,24006465,24017356,24022859,24025355,24026853,24028385,24030396,24037139,24037507,24038083,24041255,24041972,24042285,24042783,24043327,24048528,24052610,24054053,24060224,24068918,24074310,24080458,24083806,24101072,24110497,24112663,24112773,24113231,24113350,24114089,24118104,24122102,24122296,24122730,24126729,24129489,24138878,24142870,24143149,24143262,24145463,24149649,24157529,24164105,24164575,24170176,24177838,24180454,24183559,24189318,24197341,24197793,24198328,24203058,24203276,24203825,24204865,24205801,24206886,24215986,24218195,24220266,24222121,24222947,24224049,24226158,24227325,24228084,24229389,24235223,24235764,24238292,24245261,24246469,24246470,24251535,24252841,24255270,24256372,24264303,24265605,24268204,24268415,24270623,24270741,24270901,24271457,24271674,24277652,24278891,24284626,24290707,24293555,24296278,24296674,24296686,24296906,24305757,24312535,24312662,24312667,24312721,24313792,24313968,24314378,24319097,24325843,24329409,24329985,24333924,24334162,24334627,24335929,24336377,24337071,24341174,24341537,24341569,24344051,24350117,24351342,24375467,24378834,24385502,24403621,24405445,24405714,24405887,24406010,24416993,24421178,24421616,24422538,24424220,24424445,24425714,24425947,24426400,24428813,24431183,24431965,24433580,24434073,24434344,24446709,24446748,24450599,24453753,24458164,24459178,24462944,24476552,24481099,24481547,24481972,24484823,24497163,24499068,24499201,24499366,24504560,24514720,24525552,24526087,24530025,24539100,24540742,24540847,24546121,24548359,24554988,24561161,24563338,24563791,24563881,24568525,24569003,24569433,24572399,24575517,24579246,24583010,24583556,24587970,24592496,24594963,24598608,24600586,24603823,24608655,24618372,24623016,24624404,24624585,24626135,24627070,24628455,24630113,24632275,24641584,24648979,24650685,24657948,24660152,24660923,24662172,24662251,24663588,24663696,24666635,24678473,24680416,24686608,24689571,24690144,24690529,24694926,24699439,24704637,24710794,24711817,24716651,24718938,24722613,24723424,24727167,24736286,24738339,24742317,24745989,24750662,24750670,24753352,24755398,24755618,24755696,24758376,24764858,24770442,24771707,24773928,24776030,24776342,24780992,24782306,24788377,24788605,24789214,24791121,24791322,24799593,24800497,24804818,24813671,24814130,24820559,24821155,24821766,24822780,24824405,24824654,24824997,24832841,24832907,24836342,24840361,24847510,24860540,24867234,24867295,24870153,24870655,24872586,24873119,24873302,24873427,24873633,24878058,24881470,24881704,24881948,24882383,24888850,24897734,24902819,24907390,24909421,24909903,24921967,24922312,24923432,24923574,24923851,24923885,24934871,24940598,24940624,24944644,24948412,24953323,24957770,24963474,24963698,24971772,24977538,24978790,24979048,24985825,24988287,24988753,24989135,24990521,24993072,24993296,25001076,25001921,25002227,25002261,25016579,25020377,25020791,25023264,25024180,25025799,25025900,25025992,25026178,25026516,25028193,25028209,25029536,25029655,25034010,25041770,25042151,25042598,25057513,25059088,25061262,25085394,25088003,25094372,25094756,25096352,25097804,25099932,25113182,25113302,25114090,25117912,25126940,25128724,25129289,25129861,25130467,25130871,25131266,25131546,25134775,25146604,25152035,25158208,25178344,25179080,25179083,25179295,25181633,25181717,25190606,25190855,25191064,25200075,25206655,25209663,25211204,25216020,25218283,25220279,25223295,25223296,25223403,25223877,25224495,25225251,25226469,25227064,25228996,25230823,25242752,25254245,25255263,25255269,25257034,25258852,25268370,25273880,25284655,25285579,25291792,25292464,25292729,25294931,25295029,25295562,25295638,25301683,25302051,25305225,25306741,25308724,25310369,25312061,25314963,25317709,25317832,25319692,25325337,25328638,25330040,25330844,25332522,25333635,25336460,25347558,25350184,25355385,25359543,25360113,25360791,25360938,25361263,25361351,25368967,25370816,25373399,25375208,25376204,25376521,25376545,25378116,25378236,25381649,25385070,25385183,25385318,25385436,25385472,25385808,25387946,25389554,25395889,25396312,25400035,25400525,25411670,25415093,25422052,25422907,25424719,25430955,25431097,25435966,25436589,25436717,25437948,25448643,25449357,25454478,25462443,25469699,25474503,25476233,25476379,25476393,25476587,25477298,25488031,25489088,25491225,25495610,25502062,25506231,25506715,25512056,25513223,25514083,25519382,25523275,25523760,25533574,25535522,25537709,25538020,25540267,25540384,25549595,25552680,25554143,25557275,25559596,25559990,25560701,25568493,25568834,25570381,25574104,25576069,25578795,25582837,25594010,25596838,25598354,25612213,25617723,25619150,25621097,25621761,25628511,25630693,25630718,25641577,25645649,25647453,25649473,25650520,25654008,25654060,25655403,25655616,25658049,25658772,25659181,25659191,25659920,25661085,25662602,25665479,25668190,25669277,25670246,25671069,25675394,25676095,25676111,25676348,25678566,25678929,25681091,25681774,25681794,25682425,25683488,25690102,25696037,25696788,25699774,25704764,25705015,25705075,25708456,25713704,25723785,25728045,25730878,25731769,25732584,25732692,25734054,25734507,25735854,25737715,25739058,25742596,25745284,25748169,25759233,25766378,25770408,25771123,25771639,25776090,25784801,25787145,25788121,25788308,25788517,25791278,25795516,25796706,25797511,25798715,25798739,25800443,25804381,25807422,25808587,25812089,25821234,25822647,25833222,25839003,25839494,25846703,25848618,25854243,25855439,25856497,25856541,25856866,25863292,25864036,25865101,25865816,25866656,25869636,25874113,25876403,25878653,25879581,25886993,25896033,25896278,25897628,25899219,25902057,25906356,25909471,25909922,25914304,25915141,25922642,25923621,25928764,25928838,25928907,25936869,25943018,25943229,25943433,25943447,25945362,25952420,25952648,25952735,25954509,25959622,25965340,25966106,25967743,25969289,25969687,25983286,25983693,25984287,25984714,25988536,25988866,25992221,25993545,25994325,25997295,25997726,25999008,26000288,26000596,26006098,26007629,26012430,26012861,26020154,26020485,26021358,26023021,26023588,26024146,26025464,26026967,26036701,26046611,26046926,26047540,26053235,26054773,26054823,26056880,26065219,26067348,26072048,26079939,26080485,26080517,26080577,26084589,26088952,26096162,26096441,26096614,26101380,26106596,26106682,26106729,26107041,26112657,26114367,26115573,26115576,26115806,26115901,26116054,26116472,26117003,26118854,26119765,26119849,26122189,26122221,26122435,26123334,26123503,26123773,26124493,26132470,26133736,26133869,26140341,26145154,26145242,26146063,26152273,26157052,26157463,26168329,26169058,26169446,26170714,26172299,26182594,26184629,26185417,26186384,26192093,26193224,26194393,26198545,26198722,26199811,26199948,26201263,26209314,26211270,26211900,26215559,26216129,26216267,26220614,26221483,26224551,26225571,26225812,26227804,26229457,26234258,26234659,26240968,26247324,26249288,26249330,26250037,26252901,26258458,26259875,26260564,26267471,26271673,26271689,26271751,26273655,26274745,26277856,26283302,26289496,26289729,26293293,26301849,26311815,26315998,26317851,26318505,26323122,26326742,26327122,26327411,26329276,26338609,26347223,26348338,26348559,26353186,26353249,26353449,26365033,26371609,26379242,26384470,26384633,26386697,26387270,26392916,26396875,26398396,26404695,26408501,26410669,26412100,26417591,26420637,26422153,26425747,26427140,26427774,26428185,26428630,26429753,26429907,26429977,26436207,26439476,26440112,26445046,26452107,26456736,26458925,26461094,26466229,26466709,26470609,26471288,26471438,26471774,26471778,26473451,26474884,26475451,26491496,26492768,26495107,26497176,26500692,26507843,26513230,26521750,26524375,26530382,26531326,26536071,26537932,26538556,26539076,26539103,26539428,26539592,26542206,26542248,26542519,26544418,26547958,26549622,26552451,26554369,26556744,26556745,26561483,26568253,26570178,26577813,26578982,26584281,26588420,26591402,26592322,26599280,26600781,26601425,26601824,26602250,26604551,26611450,26612458,26613200,26613397,26620043,26621250,26625518,26625642,26626475,26626894,26630594,26632891,26632977,26634699,26652455,26654342,26656198,26661438,26665626,26665728,26665781,26669752,26669777,26669790,26675751,26679072,26679124,26683387,26683646,26688200,26688589,26688705,26689212,26689225,26689876,26691192,26701393,26706309,26708013,26708410,26708579,26709068,26716494,26721698,26725488,26726479,26726915,26728541,26729293,26730333,26731945,26732007,26733375,26734268,26742749,26748150,26749547,26753328,26754556,26755650,26758976,26761541,26769629,26769795,26769852,26771049,26771122,26772434,26781599,26789218,26790537,26791090,26792972,26794290,26800401,26801939,26803824,26803890,26805822,26811393,26812940,26815097,26817584,26819819,26822492,26825357,26827067,26841873,26842029,26842588,26844627,26846116,26846353,26846568,26851136,26859348,26861975,26862666,26864032,26864381,26865579,26865869,26867873,26867886,26873230,26873559,26873815,26879462,26885025,26885171,26885575,26886599,26886665,26894500,26900592,26900780,26902718,26910735,26918922,26920326,26921015,26926165,26927238,26927671,26929302,26934209,26934325,26942651,26942812,26943354,26950864,26952604,26952692,26959539,26959754,26963525,26967091,26970783,26971316,26985002,26985327,26990039,26995489,26995791,26996512,26997517,27005531,27008653,27008836,27015019,27016375,27019185,27019850,27026034,27026522,27026769,27027278,27027715,27028839,27031939,27033300,27039548,27043443,27048213,27049525,27050353,27051006,27051804,27058747,27060519,27061018,27067871,27071154,27073031,27073448,27077347,27082546,27083779,27086228,27086760,27087540,27089440,27089557,27091607,27094603,27099057,27100709,27104001,27104359,27112873,27120232,27121100,27143073,27143680,27146356,27146592,27150566,27151074,27151301,27152415,27159694,27162164,27163885,27170158,27178903,27179040,27179375,27182589,27182760,27191054,27192140,27192753,27198435,27199371,27203667,27208063,27208077,27216087,27217016,27217048,27217592,27217599,27219173,27227139,27231106,27234876,27235959,27236893,27242074,27259487,27259804,27262224,27262772,27264205,27268012,27268575,27279044,27279863,27281391,27281536,27283318,27283323,27283484,27283645,27284136,27285205,27285256,27286276,27287219,27287870,27288108,27291185,27295131,27310763,27310792,27313970,27315605,27323311,27330084,27333222,27336649,27342989,27349140,27351463,27356032,27367284,27373451,27373481,27377262,27382360,27384245,27384434,27384762,27386709,27393398,27396235,27399469,27399907,27401111,27401767,27402746,27416883,27417717,27419378,27422454,27433129,27439484,27441326,27448157,27454005,27458485,27463608,27463654,27478253,27483516,27487028,27487225,27490782,27491573,27491740,27497490,27497727,27500484,27503317,27509396,27509771,27518422,27520951,27528180,27528656,27530022,27535920,27536768,27537127,27544846,27554841,27559221,27559946,27565426,27565451,27567599,27589255,27590649,27593289,27593475,27601808,27603097,27603263,27609747,27620391,27621990,27622719,27623437,27626003,27626689,27627290,27627609,27627624,27630259,27632154,27636330,27637410,27647839,27649062,27652430,27653865,27658256,27658257,27659687,27666988,27677122,27677503,27678239,27689460,27692841,27693242,27696285,27697930,27702138,27702607,27702615,27703581,27703656,27704910,27708360,27711227,27713822,27715693,27717826,27724419,27724581,27727953,27728731,27729020,27732314,27732760,27738801,27742403,27742761,27742788,27745804,27746323,27746333,27746623,27752772,27757882,27758845,27761435,27761588,27766517,27767306,27767843,27769385,27769401,27769798,27776814,27776915,27777061,27777503,27778950,27781296,27784529,27789258,27791245,27791512,27791766,27798935,27801168,27802408,27807682,27808946,27815870,27818243,27820459,27820956,27821622,27822665,27822888,27822957,27824754,27824851,27842721,27846111,27846192,27846538,27852326,27855326,27855965,27860441,27861558,27861830,27870103,27887655,27890944,27895372,27901765,27902261,27902367,27911492,27917092,27924395,27925557,27925962,27926183,27926478,27926922,27928918,27930036,27934589,27939119,27940691,27941969,27943290,27944505,27946737,27947537,27947635,27948686,27948839,27950268,27952371,27961116,27963052,27975067,27975160,27981791,27984482,27988138,27993169,28003741,28005067,28008927,28022940,28029376,28029635,28029948,28030013,28030869,28031184,28034322,28039082,28040847,28041548,28044470,28048652,28049235,28052875,28052966,28055285,28055544,28056697,28057627,28061210,28062035,28070382,28073648,28077301,28077737,28079273,28080135,28082604,28087629,28094019,28098178,28098571,28104421,28108410,28108768,28112642,28115107,28119248,28119398,28123601,28127357,28135849,28141187,28143165,28150332,28154737,28156104,28156115,28156313,28156338,28156514,28156569,28165441,28165492,28165938,28167432,28167967,28168304,28168537,28169391,28169703,28171261,28173876,28174043,28179008,28191003,28196763,28197223,28201176,28205120,28214311,28215684,28221223,28225742,28232298,28233866,28234697,28235064,28235123,28235139,28235143,28235408,28235437,28235516,28235619,28237812,28240374,28240487,28241578,28259417,28259554,28264085,28264650,28268805,28274078,28277448,28282299,28285039,28285208,28286152,28293192,28299995,28303341,28304389,28322302,28322448,28323006,28323895,28327261,28327490,28327610,28327895,28328732,28340921,28350952,28351009,28351923,28353499,28361661,28366079,28366957,28369181,28369316,28372026,28375858,28379463,28380238,28380808,28381193,28381773,28382532,28383385,28383684,28386555,28396458,28400934,28403851,28406907,28407712,28409056,28413235,28413754,28419034,28421012,28421773,28423720,28435856,28437119,28444851,28450315,28452478,28452603,28463235,28464374,28464784,28464845,28470514,28472134,28475232,28476028,28477766,28478184,28483666,28484140,28485602,28488073,28489404,28489602,28490464,28490564,28497725,28497912,28498659,28499544,28504704,28505688,28505926,28505968,28508130,28508833,28509120,28511956,28515909,28516205,28519480,28519706,28528608,28541053,28547938,28554938,28555410,28556662,28560751,28563600,28563961,28569229,28570025,28573596,28577665,28585475,28586680,28589756,28589974,28607589,28607630,28611998,28615729,28620189,28622346,28624515,28629175,28631560,28631937,28632003,28637230,28637703,28640070,28640953,28641255,28642135,28642363,28642976,28643114,28643152,28644056,28644488,28647060,28649463,28649560,28654964,28659005,28662336,28665650,28665950,28669495,28669797,28670491,28670541,28670921,28671101,28671179,28671607,28672159,28673417,28674288,28679060,28680976,28682262,28693127,28693370,28694563,28695983,28697231,28702297,28707858,28710614,28713101,28713471,28714131,28730254,28730691,28730923,28730982,28732801,28738380,28740758,28740786,28744113,28746024,28746311,28746814,28747145,28748599,28749161,28749789,28750772,28751706,28751783,28753928,28757354,28768065,28768493,28768812,28769419,28769911,28771235,28775869,28780914,28788655,28794097,28794190,28794535,28798989,28799367,28802479,28803214,28803298,28803362,28805560,28813848,28814391,28814821,28817184,28820408,28830020,28830442,28831218,28839291,28840019,28840513,28844077,28852053,28857738,28859409,28860170,28860202,28861954,28862052,28862748,28862788,28863383,28863773,28864478,28867768,28868771,28871594,28873513,28884447,28892017,28895930,28899327,28901380,28904277,28905089,28905473,28908074,28909754,28910503,28910528,28910768,28910793,28911561,28911582,28911962,28924370,28924984,28936088,28936372,28940091,28951156,28954739,28959020,28961230,28970642,28972537,28976491,28981292,28982949,28984478,28985151,28985440,28985737,28986322,28986639,28986809,28986870,28987066,28987171,28990949,28990952,28991731,28991823,28994540,28997188,29004279,29006575,29009572,29009935,29018508,29022929,29025184,29025409,29031081,29032855,29034292,29040421,29042821,29043968,29044184,29051380,29052825,29053756,29064932,29065704,29066605,29070570,29072680,29072974,29072996,29075579,29075833,29076107,29076469,29077204,29077736,29083875,29084115,29092523,29094468,29094479,29106984,29109486,29116286,29116479,29118243,29122175,29123179,29126201,29132161,29133531,29135343,29135551,29141293,29147566,29150150,29153216,29154782,29157567,29159896,29163583,29168940,29176141,29190374,29191034,29191609,29193500,29193783,29193865,29197248,29198220,29198472,29198680,29198820,29198944,29199801,29205548,29206602,29211854,29220598,29230034,29230073,29230198,29231749,29237814,29239568,29244899,29246536,29247036,29247159,29247717,29248992,29250149,29258049,29270454,29271446,29271681,29278132,29279047,29280468,29286203,29286897,29286938,29288508,29305851,29307618,29310530,29310561,29310700,29310938,29315441,29315816,29316913,29318544,29319010,29320622,29322562,29329115,29330024,29330372,29340084,29343806,29344020,29344395,29353287,29362504,29364125,29365871,29368505,29371983,29375345,29376058,29377015,29380435,29381444,29382205,29384957,29387325,29389325,29394061,29394674,29396516,29399529,29400243,29400432,29400988,29403292,29403388,29410259,29410363,29410459,29416380,29429308,29433101,29433682,29433847,29433967,29434148,29439109,29439678,29439997,29445346,29458652,29459001,29461131,29461301,29461673,29470557,29479140,29479757,29482400,29485167,29485730,29485890,29486358,29490126,29491373,29492692,29492955,29496033,29496196,29496800,29501034,29501254,29501523,29501735,29502831,29503165,29505573,29508101,29511247,29517508,29517752,29517790,29521378,29522025,29527891,29530958,29535089,29536638,29541032,29542118,29543537,29544550,29546214,29558073,29558690,29561816,29563660,29564850,29569720,29572392,29575349,29577024,29577481,29577601,29577621,29579608,29579697,29579715,29582626,29582664,29584745,29592097,29592390,29593528,29595218,29597403,29597572,29598337,29601402,29617921,29623630,29635706,29637744,29637939,29642087,29644506,29646177,29646400,29646807,29647319,29647639,29649126,29653225,29655336,29655565,29656586,29661605,29664795,29668810,29669553,29670790,29678652,29684154,29684420,29689610,29696977,29698750,29703933,29705015,29705843,29705851,29705985,29707693,29708577,29708717,29708993,29718576,29732162,29734081,29735103,29735118,29738732,29746843,29751487,29752279,29753370,29753914,29754416,29756606,29756765,29759119,29763214,29763377,29763576,29764079,29764320,29764587,29768724,29773513,29773649,29794610,29799876,29801894,29801924,29812278,29812798,29821818,29822707,29824791,29825542,29827238,29829513,29832170,29832692,29839868,29858141,29860680,29862396,29866863,29866872,29867732,29867939,29871353,29872047,29875566,29885911,29894801,29901004,29904976,29906327,29910733,29912746,29912970,29917801,29921311,29927835,29930563,29935955,29941809,29946076,29946588,29947015,29949412,29950100,29950419,29950944,29954344,29955382,29959506,29964479,29970177,29974185,29975080,29979664,29982137,29984976,29987257,29993881,29994160,29998357,29999633,30008884,30014342,30018457,30025206,30035049,30036248,30036581,30036582,30036736,30040017,30047131,30049237,30050669,30051266,30053147,30053227,30062678,30062878,30067124,30067338,30067744,30073550,30073601,30073618,30073858,30082109,30082925,30083242,30086206,30086397,30086752,30087509,30093040,30098653,30099935,30107240,30120181,30135948,30136219,30136951,30137245,30137376,30139976,30140127,30142371,30142713,30144343,30146077,30146439,30146547,30152033,30156959,30172036,30173480,30175289,30176993,30182902,30183616,30197036,30198895,30201215,30202485,30204760,30217737,30218903,30219594,30219653,30220167,30224697,30226273,30226313,30231203,30236188,30237394,30238984,30240181,30241373,30248076,30253404,30256000,30261934,30263180,30269759,30276765,30276919,30277479,30277539,30277540,30278641,30279769,30281103,30281142,30281858,30282774,30297464,30307629,30307844,30314617,30321064,30322331,30326577,30333112,30333178,30333342,30335148,30336936,30337659,30339656,30340195,30344173,30357004,30367180,30374367,30374432,30387105,30388241,30393048,30394073,30394744,30396270,30397985,30401410,30401417,30402000,30403329,30407802,30407963,30408550,30409172,30410004,30410801,30414357,30416680,30420743,30422721,30423042,30425141,30426303,30426632,30435847,30439789,30440588,30449066,30453988,30460226,30466680,30466734,30477732,30484178,30485085,30487205,30487425,30494442,30494593,30495467,30496067,30502619,30502685,30505247,30505415,30507434,30513379,30519810,30525735,30531467,30537000,30537225,30537360,30541285,30541949,30556181,30557322,30557410,30575367,30576351,30576679,30582900,30590941,30591643,30592939,30592991,30594561,30594667,30595337,30596621,30602862,30603309,30608803,30610417,30611642,30614021,30616254,30619611,30626178,30636098,30643533,30651121,30651959,30652802,30654230,30654775,30661142,30663126,30663191,30663415,30664049,30666770,30667267,30678025,30682142,30682585,30697098,30697150,30699734,30700890,30706340,30714773,30719960,30721792,30728882,30733079,30737617,30742099,30742252,30743389,30743433,30744021,30744194,30744604,30745642,30746163,30751752,30761712,30776238,30777703,30778644,30780441,30780781,30786233,30791606,30794613,30794948,30799469,30800591,30803855,30809552,30811430,30815942,30818256,30820412,30820559,30820839,30820889,30820980,30822275,30823188,30832950,30833449,30839232,30850599,30859321,30859892,30861892,30863901,30867636,30868846,30868946,30874001,30876567,30876590,30876753,30876916,30878160,30886910,30887492,30892715,30892918,30895380,30896172,30915002,30925573,30926044,30926614,30928958,30929448,30929449,30930003,30931945,30944220,30945180,30956921,30957797,30957820,30958613,30962918,30963745,30973498,30975276,30976789,30978677,30978989,30980449,30984663,30984922,30992592,30993585,30999153,31001828,31008402,31011035,31012805,31017301,31018087,31023821,31026055,31026057,31026391,31033918,31046838,31046911,31050122,31050328,31050501,31051007,31051251,31059529,31060375,31060560,31060798,31063463,31064044,31064157,31066580,31070444,31073547,31077599,31082474,31082721,31083120,31089552,31090730,31094546,31096020,31102562,31105009,31107147,31119610,31119715,31121712,31133645,31157963,31160594,31160751,31162544,31163973,31164682,31165544,31171386,31171853,31173023,31175827,31181207,31184643,31186507,31190747,31198924,31199000,31206966,31208019,31208161,31210060,31217593,31221547,31223252,31223852,31224539,31224761,31232409,31235236,31238967,31239063,31239975,31251593,31252453,31254809,31258076,31258700,31258886,31259365,31259606,31267246,31270118,31270358,31270514,31270764,31272136,31282786,31286132,31289635,31289846,31293937,31298195,31301575,31301847,31302910,31310549,31317135,31317142,31329953,31337338,31342773,31343124,31344646,31348785,31354377,31362803,31375750,31376384,31377061,31377075,31378433,31378434,31380272,31387494,31387750,31403423,31407555,31414948,31423283,31433147,31435467,31438657,31444079,31446300,31447506,31447857,31448147,31452527,31453801,31453820,31454313,31454498,31460327,31461307,31465438,31471366,31473398,31475729,31477029,31477175,31477208,31477300,31477980,31479487,31487689,31489849,31490489,31492008,31492200,31493705,31500743,31507256,31507315,31507683,31511234,31519286,31525826,31529051,31529568,31535703,31538731,31543346,31550819,31552264,31555741,31574616,31575136,31577187,31583762,31583924,31596522,31597902,31599159,31599397,31601164,31601633,31603416,31605492,31607693,31609030,31616307,31617311,31617417,31625043,31629000,31635561,31641496,31652338,31654664,31658906,31661591,31662911,31665657,31668871,31674551,31674552,31674615,31674950,31676081,31685242,31685482,31688650,31690049,31693776,31694395,31694471,31695136,31697599,31700238,31703189,31704361,31710976,31722331,31728209,31728260,31751563,31752314,31753766,31762313,31763709,31764065,31764239,31779295,31781577,31783082,31801832,31806949,31817534,31822200,31823896,31826690,31830052,31843020,31847384,31848748,31856253,31860141,31867554,31876249,31876352,31877072,31879528,31879569,31880312,31882324,31884694,31894877,31895501,31902379,31904426,31907876,31909234,31912436,31918094,31925223,31925369,31925817,31926092,31926691,31932556,31932930,31932997,31937496,31937582,31940665,31956482,31957020,31959949,31963550,31967772,31977721,31982141,31988503,31998903,31999542,32000124,32003616,32003743,32003776,32005999,32006571,32006636,32008273,32009352,32022637,32027936,32051070,32064016,32065528,32065686,32069134,32094634,32095779,32100574,32107025,32110806,32111256,32111356,32112436,32127862,32132816,32136175,32140438,32144163,32144414,32144850,32146625,32147013,32151956,32163894,32171490,32172014,32173884,32191537,32191813,32209283,32223139,32223442,32232842,32242879,32243806,32254603,32261035,32261568,32261824,32265696,32267648,32275855,32296736,32311060,32312919,32315627,32318058,32318273,32318964,32319134,32323407,32326784,32329175,32337581,32340065,32341414,32342958,32345645,32355607,32357579,32359207,32372058,32372261,32373334,32379458,32385982,32386493,32392186,32392724,32392746,32394660,32394763,32401506,32402025,32402871,32403581,32403654,32404218,32404284,32405896,32417857,32420739,32428793,32431817,32432216,32432636,32436554,32437580,32451080,32460706,32469709,32478079,32480805,32496507,32522961,32523317,32523600,32523662,32530208,32532137,32532330,32532581,32533567,32536291,32536379,32538047,32552357,32554470,32554521,32554593,32565692,32565720,32568679,32575599,32579369,32580172,32582165,32589390,32592414,32592838,32592876,32593144,32603441,32605997,32608909,32610521,32614020,32617877,32620337,32628731,32629883,32638784,32639087,32651104,32655158,32655680,32656118,32660612,32660663,32665876,32670426,32671570,32677535,32677862,32681151,32709780,32711807,32714651,32715050,32715228,32721227,32730990,32737943,32738609,32739429,32742625,32743411,32743794,32743861,32744189,32745502,32756919,32757460,32771364,32771845,32783342,32783478,32783522,32783636,32790834,32791226,32800532,32801665,32803797,32805831,32808876,32814158,32824009,32830299,32839197,32847975,32848640,32848855,32865165,32865847,32867485,32868991,32869483,32869764,32869789,32870636,32878993,32882231,32885173,32885748,32890185,32890850,32894834,32897304,32911486,32915886,32919391,32919882,32938204,32942825,32944858,32947139,32947359,32949481,32957442,32961051,32964692,32983425,32988356,32990246,32992702,32999373,33003668,33004079,33004262,33006949,33013383,33019819,33021815,33022204,33022205,33022561,33023148,33023261,33023456,33024167,33024604,33025978,33025979,33031767,33036722,33037262,33043630,33048766,33057719,33059654,33079903,33085627,33087709,33087926,33089630,33106191,33110884,33113183,33126066,33130596,33138903,33142433,33152669,33155746,33156033,33158077,33168505,33170442,33170820,33174144,33174688,33175285,33182299,33191488,33192071,33193178,33196094,33196102,33196440,33202333,33203835,33206247,33206253,33209871,33222428,33230191,33230597,33233391,33237523,33240346,33241053,33241227,33241436,33245828,33252394,33252433,33258246,33258314,33258324,33280397,33284307,33284550,33285663,33293736,33293737,33293939,33300583,33300630,33302242,33309202,33324450,33334119,33336427,33338093,33341029,33341296,33350204,33362768,33369497,33380220,33408571,33409499,33409861,33416664,33419642,33434979,33441060,33442989,33443024,33446724,33458153,33459442,33459624,33464986,33472899,33480741,33495020,33498007,33499211,33502458,33503538,33506701,33508134,33509763,33516451,33519339,33525149,33531610,33541300,33549211,33554124,33554411,33556082,33563681,33586824,33591044,33621195,33621309,33626559,33630189,33655049,33655483,33664516,33665380,33669467,33669521,33672603,33676986,33677309,33691593,33692411,33694466,33708222,33709323,33712727,33713081,33714156,33716472,33716486,33717974,33718310,33718657,33738632,33745545,33746025,33746389,33754827,33760345,33771988,33772276,33775545,33777665,33778854,33787516,33787526,33798601,33807769,33814208,33828439,33834508,33844919,33874825,33877197,33895264,33897461,33915815,33921852,33934272,33942200,33956424,33958992,33969262,33989811,33990555,33990746,33996540,34000827,34000955,34015037,34016514,34023306,34023339,34027311,34027671,34028583,34049867,34050042,34056367,34071857,34075561,34076206,34077745,34078209,34078753,34078762,34079401,34079471,34083649,34096942,34098351,34109679,34114095,34114329,34114596,34124665,34128623,34139149,34142641,34142751,34144212,34145968,34148067,34148443,34150116,34158170,34158558,34179084,34179553,34211199,34229765,34230764,34235556,34239840,34251702,34252031,34253396,34256563,34258541,34260224,34274980,34275028,34283785,34294315,34294752,34294765,34294900,34295889,34297186,34304188,34320390,34334063,34338701,34340448,34350807,34353508,34372223,34374839,34376974,34387214,34390586,34392222,34400061,34405027,34409654,34410896,34412167,34414947,34415954,34419968,34428871,34430565,34434583,34445277,34462136,34462342,34462397,34463752,34464990,34480396,34498110,34499696,34502763,34505816,34506635,34521212,34524312,34525309,34533071,34533459,34536191,34539901,34540329,34551372,34551520,34552803,34559236,34571100,34571326,34576081,34577128,34583555,34585353,34600423,34600522,34600964,34602454,34614013,34649244,34653631,34673038,34673058,34682154,34682573,34690825,34692545,34705132,34712253,34713777,34715459,34723833,34727074,34732195,34732476,34739374,34745077,34760529,34760983,34761114,34770096,34771695,34773270,34789676,34806529,34806675,34813030,34814626,34815223,34828383,34833564,34841595,34842342,34845831,34847660,34847706,34857854,34862789,34874111,34874415,34876879,34886875,34889914,34890244,34905708,34905992,34924684,34928884,34929218,34929402,34954547,34956763,34961843,34963462,34987981,35016974,35017100,35017201,35017571,35025100,35025598,35031568,35051180,35062113,35063040,35068807,35071579,35072741,35073038,35073064,35084534,35092297,35095373,35099323,35110911,35111304,35111951,35117580,35121172,35122858,35146304,35156902,35156940,35159957,35167310,35169605,35169665,35171345,35180632,35202828,35207925,35208194,35217049,35222381,35226155,35229447,35231395,35231955,35242872,35247019,35247665,35253570,35255445,35265110,35266767,35266924,35267944,35270001,35275083,35302380,35321063,35322681,35324119,35325900,35329589,35335431,35337312,35337360,35337779,35337888,35338839,35348312,35350740,35350837,35351268,35358619,35361972,35366537,35368034,35373771,35374300,35375772,35378141,35378162,35381966,35399731,35401063,35425758,35428739,35445386,35451804,35458971,35459557,35459558,35512738,35519207,35534538,35535756,35567658,35567691,35569667,35593440,35610316,35610901,35611081,35611117,35611760,35620031,35639957,35646254,35656504,35704454,35726363,35727046,35727898,35728028,35729454,35754575,35761028,35762304,35792462,35793513,35804187,35836983,35837080,35855054,35867275,35868021,35874206,35880734,35887933,35896637,35901825,35902510,35904594,35912021,35940297,35943695,35943945,35944354,35944678,35950143,35952268,35958712,35959888,35960798,35961173,35961466,35970558,35971310,35971369,35976305,35978449,35983017,35987179,36009594,36064868,36066216,36084759,36109838,36114003,36114862,36127795,36152900,36155959,36158278,36159055,36160027,36164107,36165858,36169721,36171234,36171442,36171565,36247766,36259247,36273385,36274430,36277002,36294018,36294160,36294418,36294419,36295661,36299278,36319369,36319448,36325339,36332100,36339107,36359028,36359077,36376328,36382428,36393594,36397522,36398972,36399593,36400077,36400557,36400601,36400687,36411564,36452040,36468078,36477367,36527817,36528779,36554545,36554781,36559801,36560560,36584395,36592857,36593817,36594559,36595221,36595255,36615799,36616124,36630180,36635827,36637457,36644196,36683969,36686562,36687059,36687376,36687938,36699262,36718531,36719881,36720804,36724010,36724113,36724245,36727382,36728666,36728699,36729511,36729699,36745977,36748237,36754518,36755093,36755236,36756291,36761882,36763106,36786103,36786538,36787991,36790245,36791010,36798876,36804382,36806640,36825669,36846861,36857818,36872273,36873273,36873283,36878043,36887355,36897485,36904751,36904905,36905002,36905365,36909546,36910175,36915225,36916449,36929689,36931154,36944817,36944969,36947065,36950998,36990641,36997184,37007138,37007500,37034813,37035510,37036811,37040895,37048659,37048794,37048901,37053892,37066001,37066437,37067367,37075667,37086979,37113838,37118161,37139964,37162174,37171145,37171407,37171427,37184792,37184802,37199148,37202409,37204505,37204615,37216420,37217279,37277259,37337887,37346813,37351682,37353209,37365776,37417466,37423352,37431372,37431669,37432228,37477002,37480423,37541476,37548640,37548927,37607876,37608494,37674110,37674489,37687664,37699129,37710048,37753382,37755349,37762535,37771925,37804765,37808714,37823601,37827460,37837357,37861594,37905792,37913273,37968140,37984747,37987670,37990189,37993451,38010292,38026551,38068140,38069175,38069244,38069556,38089406,38125272,38125469,38153274,38203855,38252517,38267329,38267423,38273133,38283303,38293132,38305530,38354155,38357879,38393956,38403750,38421829,38426209,38433543,38440060,38453162,38457463,38468873,38524478,38525371,38587378,38618361,38623312,38625333,38636631,38683452,38687834,38698318,38747669,38787428,38787952,38788606,38794514,38795696,38827552,38834763,38837828,38843677,38866521,38881088,38893439,38912508,38934059,38990526,38992898,39000787,39115195,39171152,39208181,39269790,39327657,39393540,39467140,39516212,39520933,39550098,39560274,39774003,39802362,39802363,39909590,39927280,40011989,40374926,40719839,41577178,92173805,92203967,92561514,92690256,92747243,92818148,92840732,92971878,92993744,93312024,93568324,93636826,93715765,93876367,94350607,";
        //var val = ",3721733,3895266,4248540,";//4298610,4317918,4430880,4513993,4514173,4516189,4541826,4623403,4678004,4833404,4840450,4962776,4980452,4987226,4995854,5054066,5072229,5073887,5083049,5091453,5119328,5150399,5201218,5214899,5218214,5219014,5260931,5262548,5268053,5333992,5416927,5432122,5453033,5473894,5616682,5640330,5663207,5663368,5717570,5814319,5830074,5891158,5945215,5964699,5969302,6052997,6056752,6063484,6066597,6066632,6075183,6079105,6085619,6140314,6150973,6160428,6173675,6178466,6179994,6201768,6216789,6216903,6228761,6241276,6250122,6278699,6354582,6360891,6362264,6373464,6391222,6426044,6427052,6435564,6441550,6493491,6532049,6532064,6532111,6544040,6553382,6553457,6554210,6560687,6609343,6632776,6694154,6702324,6707986,6711644,6717619,7381241,7530181,7593730,7600962,7606315,7607420,7610913,7633682,7686050,7737661,7779985,7787921,7789956,7793253,7820957,7837226,7849597,7869055,8191432,8255244,8277555,8286744,8309017,8346081,8376384,8382912,8424466,8463470,8464872,8495257,8498546,8522520,8558937,8575972,8595941,8635183,8660648,8667020,10013414,10061693,10082669,10084892,10090383,10108434,10121653,10122230,10127047,10136680,10138179,10139318,10139825,10152180,10180457,10184819,10203526,10203744,10212595,10231204,10233786,10258236,10261254,10264042,10264670,10284175,10284483,10314539,10330016,10353348,10373016,10395385,10400872,10425037,10428143,10428998,10433996,10439898,10448072,10449813,10462966,10469120,10477929,10485326,10492129,10494125,10499735,10517223,10539841,10547767,10548351,10551984,10554670,10579403,10587494,10605844,10626102,10659739,10676514,10701790,10716799,10741730,10758032,10777007,10788819,10793075,10797898,10809428,10809455,10815526,10816849,10823532,10830251,10831256,10840687,10843675,10849568,10867208,10868026,10884513,10895882,10899008,10900347,10922775,10924290,10931242,10936508,10949258,10952103,10960295,10960509,10960852,10961787,10964734,10966701,11024464,11037463,11051958,11083677,11091247,11098149,11109316,11121543,11122541,11122879,11129335,11159967,11167040,11170276,11176368,11182289,11201386,11203329,11205417,11231009,11237204,11244311,11255178,11266461,11287023,11293897,11320120,11320409,11320507,11322303,11346597,11358653,11360721,11361583,11361763,11372090,11375983,11389957,11399271,11399393,11403618,11415589,11419521,11419728,11423458,11443393,11443840,11445714,11454280,11456464,11488030,11488589,11489469,11504951,11538886,11547558,11552138,11570106,11578324,11579578,11593859,11597867,11602132,11607138,11607664,11625755,11625756,11632630,11642761,11645388,11666448,11675840,11683946,11701208,11703743,11721990,11755502,11773087,11783558,11792464,11793457,11798026,11815644,11818978,11819489,11828669,11839235,11848834,11854546,11864790,11872867,11876257,11880322,11889001,11889039,11890945,11907469,11908400,11921959,11940043,11945417,11953935,11955017,11967932,11973170,11981067,11983462,11985820,11987598,11988414,11997859,11998602,12001053,12010086,12012635,12017414,12022582,12028786,12046181,12046718,12053096,12055512,12078708,12080612,12082058,12126420,12126603,12143142,12153865,12157306,12159322,12163533,12176696,12206708,12206881,12207578,12261595,12274223,12277025,12277571,12286233,12301657,12301981,12302392,12317441,12366326,12394139,12401115,12406243,12406254,12427000,12437987,12438031,12468964,12472226,12481571,12487128,12504384,12505765,12506169,12511139,12520247,12548620,12551446,12561327,12563769,12573225,12574708,12581968,12587775,12588232,12588869,12589394,12620651,12623166,12623871,12623925,12668277,12676126,12697155,12700035,12712711,12713545,12713609,12713991,12733973,12739234,12741275,12744898,12753250,12759257,12767266,12776176,12780794,12784319,12785954,12792481,12795968,12798408,12798448,12798516,12813075,12818281,12834760,12849105,12849918,12896895,12904314,12927247,12942175,12943725,12945726,12946542,12949892,12953405,12957251,12958582,12961176,12961660,12964529,12969639,12975049,12975159,12976059,12976181,12980202,12980903,12981483,12982600,12996335,13014792,13022857,13027772,13069170,13080405,13088174,13102744,13103600,13106632,13117957,13120900,13127350,13130380,13133648,13137243,13137515,13138388,13138649,13156775,13158567,13172331,13208932,13211930,13214723,13216838,13236898,13245357,13245662,13264030,13264224,13265741,13295707,13302203,13303928,13305928,13307945,13313581,13313748,13314887,13315688,13316699,13322679,13322784,13331977,13333954,13335235,13339041,13348407,13360275,13361020,13368188,13372639,13375084,13385328,13395353,13402459,13407166,13410764,13418943,13425794,13432405,13432901,13437047,13437655,13438841,13444758,13447209,13451369,13454149,13477606,13478986,13490268,13515034,13518695,13530443,13530507,13548760,13550177,13566320,13585812,13592917,13615584,13617753,13652468,13656126,13656179,13656490,13656744,13669641,13684795,13685719,13686257,13687376,13687399,13687754,13694355,13707583,13713206,13713690,13736274,13737657,13739273,13740727,13753732,13753899,13754206,13766684,13766976,13773881,13782070,13782196,13782417,13789555,13792270,13800464,13801496,13807376,13807602,13807867,13808514,13844221,13851054,13855365,13859109,13865107,13876111,13879278,13884741,13896804,13900123,13904796,13907487,13909616,13912997,13915434,13915663,13915806,13924128,13943952,13945818,13976847,13982180,13983957,13990227,13991643,13992286,13995796,13996563,13996744,14003305,14003658,14014049,14026749,14027089,14027242,14045493,14051566,14052476,14060134,14064052,14069311,14081292,14087997,14091984,14101330,14105422,14116094,14116284,14121705,14138129,14140910,14142240,14144704,14145312,14176271,14182109,14195270,14201535,14231556,14233198,14235927,14242906,14255504,14269126,14272858,14277836,14281981,14309869,14311103,14316007,14316887,14324755,14324866,14327709,14327934,14337842,14346038,14353944,14359818,14369698,14375573,14380416,14388365,14410345,14429007,14431667,14432666,14435817,14441881,14456617,14460230,14463738,14464289,14472971,14483211,14495611,14497403,14497809,14502136,14513423,14528363,14547611,14548971,14559068,14563467,14568897,14582743,14583938,14609968,14617409,14647373,14659162,14659952,14660905,14663104,14663153,14672855,14719242,14728272,14735981,14740570,14741538,14750832,14761629,14764039,14767026,14779797,14796038,14796516,14806269,14816349,14823231,14825800,14840169,14844992,14845390,14846500,14851331,14852867,14855944,14860595,14868274,14872088,14876454,14877570,14880220,14895966,14900550,14901608,14927705,14932145,14946395,14946490,14956041,14957845,14959158,14959269,14964411,14970001,14990046,14990868,14996796,16019440,16023232,16025529,16028401,16037261,16039088,16043568,16054105,16055781,16077678,16105207,16114913,16123805,16124308,16130459,16137590,16150405,16161845,16171052,16172633,16184005,16185882,16187536,16190393,16190793,16191999,16208515,16214018,16218798,16223206,16259093,16262680,16274918,16275650,16287633,16287715,16289198,16291049,16296753,16308902,16321878,16327224,16335538,16345439,16345771,16356295,16372630,16379331,16380102,16401745,16405094,16413687,16427345,16436824,16444268,16470164,16474639,16480763,16492125,16492703,16495840,16504493,16519797,16528239,16531115,16533276,16533781,16542688,16545497,16548541,16553361,16573121,16580757,16583796,16591416,16591734,16594210,16595320,16596778,16607758,16613236,16630994,16641996,16669727,16673224,16678539,16679907,16681773,16687037,16694401,16728145,16737773,16747526,16749993,16753318,16754770,16755111,16755931,16763628,16765501,16767353,16768481,16782486,16787993,16788631,16790555,16793159,16809145,16812454,16821984,16830819,16833560,16835853,16844962,16867260,16870428,16871071,16876055,16883836,16894382,16895597,16895955,16896179,16900387,16913327,16914293,16916581,16929900,16938119,16938708,16941162,16944769,16961408,16965617,16965645,16970368,16973737,16974062,16974407,16974767,16976212,17003930,17008167,17008301,17019567,17023204,17028230,17038995,17056948,17061179,17062381,17080059,17082314,17086768,17100450,17106020,17106887,17110313,17143050,17148439,17148585,17163216,17163957,17166505,17170324,17172106,17172472,17177133,17195009,17200622,17203040,17229657,17229728,17232051,17238885,17243472,17248253,17251196,17253002,17256684,17269048,17286727,17294876,17297612,17299468,17308032,17318533,17325858,17326617,17326835,17332584,17332590,17333830,17350036,17354104,17363298,17363790,17364049,17365063,17365131,17366179,17366250,17367889,17392345,17394423,17406375,17411001,17449030,17449065,17454023,17476402,17492032,17499403,17529032,17534502,17538065,17542673,17547030,17556831,17560622,17569882,17569949,17574699,17575112,17587147,17587621,17588649,17588990,17595395,17602872,17606017,17607665,17608220,17612164,17612504,17613190,17616238,17635475,17644004,17657076,17660567,17666295,17666620,17686122,17687252,17691514,17703778,17704901,17710899,17713489,17717084,17732164,17732723,17742890,17747853,17749663,17753488,17754400,17754866,17759854,17761700,17765726,17781119,17785416,17802346,17806761,17818038,17820232,17820796,17822838,17824939,17826177,17829074,17833015,17847240,17848755,17856668,17861703,17863006,17863723,17864163,17875259,17875349,17880860,17902102,17904248,17906846,17910618,17919836,17921440,17934255,17935449,17943914,17945338,17954930,17966670,17968300,17971979,17989707,17993034,17993051,18004988,18019099,18025795,18034531,18034672,18034739,18034785,18046370,18047730,18051156,18066185,18069041,18071582,18087749,18089868,18091445,18094568,18098362,18101807,18106677,18106892,18109354,18110361,18116306,18134449,18141194,18143503,18151622,18154418,18159132,18163238,18175333,18178609,18183438,18191231,18195526,18199146,18213489,18217164,18222055,18222748,18225870,18227788,18234653,18242073,18252077,18253428,18254421,18259480,18260530,18272517,18272953,18277911,18278630,18279586,18280194,18282868,18287104,18293915,18295296,18298428,18302245,18305454,18308753,18311122,18316253,18318955,18322105,18323765,18328572,18343448,18349230,18353115,18357706,18363654,18365704,18369555,18370371,18380273,18383282,18388770,18389538,18392884,18393468,18395332,18398057,18403798,18408015,18412803,18414562,18420485,18426751,18428025,18429067,18435564,18440770,18445586,18451514,18451855,18452792,18459059,18466572,18468585,18468935,18470566,18479004,18485560,18497519,18506532,18507027,18512574,18513352,18513441,18517112,18532332,18545044,18551773,18555453,18562309,18569210,18581543,18583408,18588266,18588756,18602777,18607983,18611932,18622089,18627296,18641606,18667741,18673306,18698569,18706393,18717415,18719449,18724166,18737077,18756771,18767013,18774989,18780191,18795272,18795682,18803978,18804309,18811790,18816012,18829186,18837488,18843174,18844965,18847945,18850302,18851923,18862273,18862463,18863114,18863607,18865079,18873172,18873272,18874538,18874738,18875838,18878377,18881810,18884466,18896257,18897487,18897488,18898398,19003337,19003658,19005537,19006292,19007628,19008054,19008566,19012159,19013629,19016188,19016199,19018733,19018930,19019034,19019292,19019627,19020683,19022552,19022985,19023570,19025471,19027894,19036119,19038702,19040065,20000310,20002747,20004493,20006968,20007852,20007869,20008710,20009900,20010811,20011485,20012851,20014533,20016580,20017824,20023516,20025761,20026554,20030156,20035618,20035948,20056179,20071006,20089627,20108035,20111307,20121178,20159915,20163111,20187308,20193715,20198441,20204509,20211857,20217460,20219002,20226106,20226608,20228520,20233812,20236333,20244373,20250436,20250670,20251122,20253708,20263176,20265411,20266025,20266813,20270544,20270658,20270854,20284304,20286366,20289732,20295689,20314615,20324989,20332273,20338925,20350285,20356660,20359553,20369276,20378792,20379742,20383139,20383713,20387104,20389367,20391602,20396299,20403084,20404596,20405037,20406443,20409874,20416475,20416670,20416819,20416820,20420088,20420471,20426813,20426856,20426954,20427461,20428488,20448823,20463794,20464207,20469246,20477190,20481107,20489695,20493085,20493122,20497653,20501876,20503320,20519192,20521311,20521604,20527145,20527196,20534171,20537168,20537488,20537873,20540626,20545731,20550147,20561449,20561770,20562194,20568017,20569546,20573286,20573549,20581325,20598114,20598162,20607795,20616840,20617496,20618482,20618762,20634172,20636223,20636747,20646862,20646876,20649699,20650011,20652377,20665028,20683124,20683288,20698170,20698273,20699768,20700198,20719276,20723395,20728243,20729952,20735780,20736041,20751155,20760531,20764573,20797238,20809249,20832714,20840064,20840268,20852426,20856358,20861270,20862775,20863889,20864166,20864410,20874660,20891171,20891210,20891756,20893403,20893947,20894696,20899615,20907784,20908298,20908510,20911566,20921108,20921564,20922151,20922672,20946442,20954864,20956146,20964225,20965231,20979712,20982338,20983613,20993935,20994148,21002136,21004141,21013691,21017466,21048681,21050145,21055063,21056928,21057078,21058743,21086627,21115195,21130854,21142117,21142630,21155590,21175591,21301676,21303259,21306140,21314947,21321812,21328624,21335913,21341100,21353749,21363289,21381176,21387714,21388976,21398546,21407089,21412573,21430866,21431287,21436952,21444863,21454747,21463213,21465423,21469393,21473807,21477081,21477791,21478018,21480867,21485056,21485273,21486160,21486243,21492195,21492978,21499523,21502875,21505388,21508455,21512355,21519029,21519694,21519727,21523039,21536260,21543925,21544029,21544235,21550321,21552136,21555372,21560782,21561670,21577294,21577336,21582899,21589166,21595144,21596634,21602078,21603118,21609165,21611995,21619842,21624166,21632752,21635088,21636807,21640781,21644832,21646696,21651548,21654223,21657414,21672178,21703300,21710661,21715490,21715856,21720522,21723683,21726036,21727625,21728702,21728957,21729662,21732317,21744037,21749971,21752866,21756524,21756622,21762355,21763630,21772160,21779554,21784091,21786001,21787171,21787981,21795191,21796638,21797562,21797846,21811013,21812092,21827839,21828009,21828053,21829794,21831658,21832236,21832701,21850623,21854948,21871249,21872953,21873718,21878946,21888890,21894217,21909158,21917898,21921024,21921098,21922703,21923155,21923826,21925132,21928500,21938174,21940482,21945591,21953000,21953649,21953765,21954194,21954658,21964594,21975477,21977206,21981107,21986631,22001691,22002799,22006376,22007275,22017202,22025355,22049006,22049144,22049417,22052121,22052248,22069571,22090317,22097983,22100520,22108116,22114778,22121399,22125113,22125906,22126276,22128233,22128263,22128415,22128447,22140388,22147351,22147507,22148838,22151922,22151980,22154401,22157791,22158172,22158256,22158676,22167498,22173990,22174406,22174407,22177605,22183019,22186107,22191051,22195889,22198484,22203676,22207155,22211433,22212679,22233250,22236778,22237211,22237340,22243277,22264634,22276439,22277520,22285767,22290114,22293018,22302255,22302884,22303455,22304391,22310628,22314116,22323533,22333201,22335082,22341868,22344585,22349213,22349613,22350605,22353008,22362151,22366451,22374062,22375813,22376896,22386172,22405908,22409822,22411929,22426051,22426848,22432651,22433750,22433990,22434060,22434189,22434277,22435831,22447405,22448645,22457538,22468027,22471262,22474825,22479715,22489297,22493025,22496431,22503376,22508602,22524446,22533532,22538204,22545953,22547535,22548270,22548918,22552995,22570554,22572596,22582310,22583076,22584428,22588287,22590036,22593372,22596311,22596609,22598381,22605255,22610781,22615674,22620531,22629902,22634895,22647300,22649440,22651692,22651909,22654705,22655293,22655921,22656180,22661324,22662854,22667136,22675395,22678431,22686180,22699191,22699563,22706654,22707956,22708815,22709885,22717461,22717766,22725381,22725695,22734738,22737974,22740375,22755723,22764007,22765308,22767397,22767463,22777282,22780863,22781316,22781921,22784958,22787253,22809464,22809741,22818830,22825780,22829294,22834337,22837526,22837529,22842949,22849830,22851630,22854583,22858858,22859279,22860624,22870116,22871109,22871332,22871426,22871703,22871972,22872219,22880128,22885307,22891163,22893668,22906788,22913337,22917543,22923942,22924105,22950655,22955816,22964456,22965372,22968034,22983775,22988721,22990377,22991254,22996678,22997085,23003700,23006253,23009796,23012890,23024162,23024169,23026921,23029545,23044421,23044422,23045000,23045386,23050517,23050874,23053261,23057885,23060270,23065499,23066833,23068246,23075675,23076360,23078524,23081073,23090076,23090781,23091276,23091542,23091835,23092863,23094280,23100353,23102107,23102829,23103221,23106872,23108969,23115794,23120431,23123198,23123296,23123485,23123688,23124068,23124168,23125721,23127258,23127847,23127988,23136360,23140227,23147521,23147774,23152527,23158814,23174101,23177723,23182438,23182584,23182778,23194347,23197247,23197536,23199710,23205489,23210166,23210460,23216678,23218779,23227787,23238031,23238109,23245960,23248590,23250012,23250035,23250288,23251294,23251386,23254430,23256800,23257254,23259661,23261691,23269667,23270471,23270497,23281160,23283474,23292353,23297515,23303024,23309712,23313122,23314535,23326315,23326477,23326621,23329516,23335111,23337797,23340687,23340786,23347233,23351545,23366241,23366317,23374417,23374761,23374899,23375821,23384178,23398180,23398203,23398671,23403238,23403752,23404635,23405885,23408507,23408870,23408985,23416840,23417492,23452791,23453112,23453572,23454241,23454243,23462011,23463926,23467665,23467718,23469627,23469766,23471725,23472303,23474087,23474552,23481911,23482964,23485266,23485280,23485446,23489127,23490872,23505545,23507512,23507750,23515432,23519798,23521175,23522031,23522339,23531740,23539383,23539478,23541738,23549016,23551434,23551459,23552886,23556827,23557279,23569290,23569630,23569707,23570178,23571903,23572388,23573093,23573399,23574530,23576401,23582428,23587295,23590899,23598298,23598414,23598456,23599528,23602986,23608279,23611511,23615331,23617699,23626082,23626253,23626522,23627605,23628820,23630497,23632321,23644118,23644282,23644389,23645179,23648660,23668210,23671480,23671966,23674673,23675948,23689205,23698723,23700654,23701390,23702964,23703890,23704828,23705952,23723532,23724398,23724970,23732329,23754991,23757793,23766713,23766836,23767398,23768615,23771456,23771676,23772197,23773715,23773754,23774828,23778258,23781997,23784665,23784774,23787898,23788179,23789290,23791291,23792965,23798439,23799725,23801498,23806767,23815393,23815839,23817341,23827369,23829294,23829671,23834654,23851982,23856054,23856925,23858331,23864226,23865252,23866181,23866974,23872380,23873297,23877949,23879096,23880060,23881191,23886879,23887714,23888613,23898489,23899401,23904936,23910920,23913686,23915160,23924360,23925820,23942314,23949754,23950214,23950249,23960278,23967786,23968109,23969268,23969999,23971226,23974340,23974912,23992228,23995132,23995191,23995566,24000640,24001915,24003648,24006465,24017356,24022859,24025355,24026853,24028385,24030396,24037139,24037507,24038083,24041255,24041972,24042285,24042783,24043327,24048528,24052610,24054053,24060224,24068918,24074310,24080458,24083806,24101072,24110497,24112663,24112773,24113231,24113350,24114089,24118104,24122102,24122296,24122730,24126729,24129489,24138878,24142870,24143149,24143262,24145463,24149649,24157529,24164105,24164575,24170176,24177838,24180454,24183559,24189318,24197341,24197793,24198328,24203058,24203276,24203825,24204865,24205801,24206886,24215986,24218195,24220266,24222121,24222947,24224049,24226158,24227325,24228084,24229389,24235223,24235764,24238292,24245261,24246469,24246470,24251535,24252841,24255270,24256372,24264303,24265605,24268204,24268415,24270623,24270741,24270901,24271457,24271674,24277652,24278891,24284626,24290707,24293555,24296278,24296674,24296686,24296906,24305757,24312535,24312662,24312667,24312721,24313792,24313968,24314378,24319097,24325843,24329409,24329985,24333924,24334162,24334627,24335929,24336377,24337071,24341174,24341537,24341569,24344051,24350117,24351342,24375467,24378834,24385502,24403621,24405445,24405714,24405887,24406010,24416993,24421178,24421616,24422538,24424220,24424445,24425714,24425947,24426400,24428813,24431183,24431965,24433580,24434073,24434344,24446709,24446748,24450599,24453753,24458164,24459178,24462944,24476552,24481099,24481547,24481972,24484823,24497163,24499068,24499201,24499366,24504560,24514720,24525552,24526087,24530025,24539100,24540742,24540847,24546121,24548359,24554988,24561161,24563338,24563791,24563881,24568525,24569003,24569433,24572399,24575517,24579246,24583010,24583556,24587970,24592496,24594963,24598608,24600586,24603823,24608655,24618372,24623016,24624404,24624585,24626135,24627070,24628455,24630113,24632275,24641584,24648979,24650685,24657948,24660152,24660923,24662172,24662251,24663588,24663696,24666635,24678473,24680416,24686608,24689571,24690144,24690529,24694926,24699439,24704637,24710794,24711817,24716651,24718938,24722613,24723424,24727167,24736286,24738339,24742317,24745989,24750662,24750670,24753352,24755398,24755618,24755696,24758376,24764858,24770442,24771707,24773928,24776030,24776342,24780992,24782306,24788377,24788605,24789214,24791121,24791322,24799593,24800497,24804818,24813671,24814130,24820559,24821155,24821766,24822780,24824405,24824654,24824997,24832841,24832907,24836342,24840361,24847510,24860540,24867234,24867295,24870153,24870655,24872586,24873119,24873302,24873427,24873633,24878058,24881470,24881704,24881948,24882383,24888850,24897734,24902819,24907390,24909421,24909903,24921967,24922312,24923432,24923574,24923851,24923885,24934871,24940598,24940624,24944644,24948412,24953323,24957770,24963474,24963698,24971772,24977538,24978790,24979048,24985825,24988287,24988753,24989135,24990521,24993072,24993296,25001076,25001921,25002227,25002261,25016579,25020377,25020791,25023264,25024180,25025799,25025900,25025992,25026178,25026516,25028193,25028209,25029536,25029655,25034010,25041770,25042151,25042598,25057513,25059088,25061262,25085394,25088003,25094372,25094756,25096352,25097804,25099932,25113182,25113302,25114090,25117912,25126940,25128724,25129289,25129861,25130467,25130871,25131266,25131546,25134775,25146604,25152035,25158208,25178344,25179080,25179083,25179295,25181633,25181717,25190606,25190855,25191064,25200075,25206655,25209663,25211204,25216020,25218283,25220279,25223295,25223296,25223403,25223877,25224495,25225251,25226469,25227064,25228996,25230823,25242752,25254245,25255263,25255269,25257034,25258852,25268370,25273880,25284655,25285579,25291792,25292464,25292729,25294931,25295029,25295562,25295638,25301683,25302051,25305225,25306741,25308724,25310369,25312061,25314963,25317709,25317832,25319692,25325337,25328638,25330040,25330844,25332522,25333635,25336460,25347558,25350184,25355385,25359543,25360113,25360791,25360938,25361263,25361351,25368967,25370816,25373399,25375208,25376204,25376521,25376545,25378116,25378236,25381649,25385070,25385183,25385318,25385436,25385472,25385808,25387946,25389554,25395889,25396312,25400035,25400525,25411670,25415093,25422052,25422907,25424719,25430955,25431097,25435966,25436589,25436717,25437948,25448643,25449357,25454478,25462443,25469699,25474503,25476233,25476379,25476393,25476587,25477298,25488031,25489088,25491225,25495610,25502062,25506231,25506715,25512056,25513223,25514083,25519382,25523275,25523760,25533574,25535522,25537709,25538020,25540267,25540384,25549595,25552680,25554143,25557275,25559596,25559990,25560701,25568493,25568834,25570381,25574104,25576069,25578795,25582837,25594010,25596838,25598354,25612213,25617723,25619150,25621097,25621761,25628511,25630693,25630718,25641577,25645649,25647453,25649473,25650520,25654008,25654060,25655403,25655616,25658049,25658772,25659181,25659191,25659920,25661085,25662602,25665479,25668190,25669277,25670246,25671069,25675394,25676095,25676111,25676348,25678566,25678929,25681091,25681774,25681794,25682425,25683488,25690102,25696037,25696788,25699774,25704764,25705015,25705075,25708456,25713704,25723785,25728045,25730878,25731769,25732584,25732692,25734054,25734507,25735854,25737715,25739058,25742596,25745284,25748169,25759233,25766378,25770408,25771123,25771639,25776090,25784801,25787145,25788121,25788308,25788517,25791278,25795516,25796706,25797511,25798715,25798739,25800443,25804381,25807422,25808587,25812089,25821234,25822647,25833222,25839003,25839494,25846703,25848618,25854243,25855439,25856497,25856541,25856866,25863292,25864036,25865101,25865816,25866656,25869636,25874113,25876403,25878653,25879581,25886993,25896033,25896278,25897628,25899219,25902057,25906356,25909471,25909922,25914304,25915141,25922642,25923621,25928764,25928838,25928907,25936869,25943018,25943229,25943433,25943447,25945362,25952420,25952648,25952735,25954509,25959622,25965340,25966106,25967743,25969289,25969687,25983286,25983693,25984287,25984714,25988536,25988866,25992221,25993545,25994325,25997295,25997726,25999008,26000288,26000596,26006098,26007629,26012430,26012861,26020154,26020485,26021358,26023021,26023588,26024146,26025464,26026967,26036701,26046611,26046926,26047540,26053235,26054773,26054823,26056880,26065219,26067348,26072048,26079939,26080485,26080517,26080577,26084589,26088952,26096162,26096441,26096614,26101380,26106596,26106682,26106729,26107041,26112657,26114367,26115573,26115576,26115806,26115901,26116054,26116472,26117003,26118854,26119765,26119849,26122189,26122221,26122435,26123334,26123503,26123773,26124493,26132470,26133736,26133869,26140341,26145154,26145242,26146063,26152273,26157052,26157463,26168329,26169058,26169446,26170714,26172299,26182594,26184629,26185417,26186384,26192093,26193224,26194393,26198545,26198722,26199811,26199948,26201263,26209314,26211270,26211900,26215559,26216129,26216267,26220614,26221483,26224551,26225571,26225812,26227804,26229457,26234258,26234659,26240968,26247324,26249288,26249330,26250037,26252901,26258458,26259875,26260564,26267471,26271673,26271689,26271751,26273655,26274745,26277856,26283302,26289496,26289729,26293293,26301849,26311815,26315998,26317851,26318505,26323122,26326742,26327122,26327411,26329276,26338609,26347223,26348338,26348559,26353186,26353249,26353449,26365033,26371609,26379242,26384470,26384633,26386697,26387270,26392916,26396875,26398396,26404695,26408501,26410669,26412100,26417591,26420637,26422153,26425747,26427140,26427774,26428185,26428630,26429753,26429907,26429977,26436207,26439476,26440112,26445046,26452107,26456736,26458925,26461094,26466229,26466709,26470609,26471288,26471438,26471774,26471778,26473451,26474884,26475451,26491496,26492768,26495107,26497176,26500692,26507843,26513230,26521750,26524375,26530382,26531326,26536071,26537932,26538556,26539076,26539103,26539428,26539592,26542206,26542248,26542519,26544418,26547958,26549622,26552451,26554369,26556744,26556745,26561483,26568253,26570178,26577813,26578982,26584281,26588420,26591402,26592322,26599280,26600781,26601425,26601824,26602250,26604551,26611450,26612458,26613200,26613397,26620043,26621250,26625518,26625642,26626475,26626894,26630594,26632891,26632977,26634699,26652455,26654342,26656198,26661438,26665626,26665728,26665781,26669752,26669777,26669790,26675751,26679072,26679124,26683387,26683646,26688200,26688589,26688705,26689212,26689225,26689876,26691192,26701393,26706309,26708013,26708410,26708579,26709068,26716494,26721698,26725488,26726479,26726915,26728541,26729293,26730333,26731945,26732007,26733375,26734268,26742749,26748150,26749547,26753328,26754556,26755650,26758976,26761541,26769629,26769795,26769852,26771049,26771122,26772434,26781599,26789218,26790537,26791090,26792972,26794290,26800401,26801939,26803824,26803890,26805822,26811393,26812940,26815097,26817584,26819819,26822492,26825357,26827067,26841873,26842029,26842588,26844627,26846116,26846353,26846568,26851136,26859348,26861975,26862666,26864032,26864381,26865579,26865869,26867873,26867886,26873230,26873559,26873815,26879462,26885025,26885171,26885575,26886599,26886665,26894500,26900592,26900780,26902718,26910735,26918922,26920326,26921015,26926165,26927238,26927671,26929302,26934209,26934325,26942651,26942812,26943354,26950864,26952604,26952692,26959539,26959754,26963525,26967091,26970783,26971316,26985002,26985327,26990039,26995489,26995791,26996512,26997517,27005531,27008653,27008836,27015019,27016375,27019185,27019850,27026034,27026522,27026769,27027278,27027715,27028839,27031939,27033300,27039548,27043443,27048213,27049525,27050353,27051006,27051804,27058747,27060519,27061018,27067871,27071154,27073031,27073448,27077347,27082546,27083779,27086228,27086760,27087540,27089440,27089557,27091607,27094603,27099057,27100709,27104001,27104359,27112873,27120232,27121100,27143073,27143680,27146356,27146592,27150566,27151074,27151301,27152415,27159694,27162164,27163885,27170158,27178903,27179040,27179375,27182589,27182760,27191054,27192140,27192753,27198435,27199371,27203667,27208063,27208077,27216087,27217016,27217048,27217592,27217599,27219173,27227139,27231106,27234876,27235959,27236893,27242074,27259487,27259804,27262224,27262772,27264205,27268012,27268575,27279044,27279863,27281391,27281536,27283318,27283323,27283484,27283645,27284136,27285205,27285256,27286276,27287219,27287870,27288108,27291185,27295131,27310763,27310792,27313970,27315605,27323311,27330084,27333222,27336649,27342989,27349140,27351463,27356032,27367284,27373451,27373481,27377262,27382360,27384245,27384434,27384762,27386709,27393398,27396235,27399469,27399907,27401111,27401767,27402746,27416883,27417717,27419378,27422454,27433129,27439484,27441326,27448157,27454005,27458485,27463608,27463654,27478253,27483516,27487028,27487225,27490782,27491573,27491740,27497490,27497727,27500484,27503317,27509396,27509771,27518422,27520951,27528180,27528656,27530022,27535920,27536768,27537127,27544846,27554841,27559221,27559946,27565426,27565451,27567599,27589255,27590649,27593289,27593475,27601808,27603097,27603263,27609747,27620391,27621990,27622719,27623437,27626003,27626689,27627290,27627609,27627624,27630259,27632154,27636330,27637410,27647839,27649062,27652430,27653865,27658256,27658257,27659687,27666988,27677122,27677503,27678239,27689460,27692841,27693242,27696285,27697930,27702138,27702607,27702615,27703581,27703656,27704910,27708360,27711227,27713822,27715693,27717826,27724419,27724581,27727953,27728731,27729020,27732314,27732760,27738801,27742403,27742761,27742788,27745804,27746323,27746333,27746623,27752772,27757882,27758845,27761435,27761588,27766517,27767306,27767843,27769385,27769401,27769798,27776814,27776915,27777061,27777503,27778950,27781296,27784529,27789258,27791245,27791512,27791766,27798935,27801168,27802408,27807682,27808946,27815870,27818243,27820459,27820956,27821622,27822665,27822888,27822957,27824754,27824851,27842721,27846111,27846192,27846538,27852326,27855326,27855965,27860441,27861558,27861830,27870103,27887655,27890944,27895372,27901765,27902261,27902367,27911492,27917092,27924395,27925557,27925962,27926183,27926478,27926922,27928918,27930036,27934589,27939119,27940691,27941969,27943290,27944505,27946737,27947537,27947635,27948686,27948839,27950268,27952371,27961116,27963052,27975067,27975160,27981791,27984482,27988138,27993169,28003741,28005067,28008927,28022940,28029376,28029635,28029948,28030013,28030869,28031184,28034322,28039082,28040847,28041548,28044470,28048652,28049235,28052875,28052966,28055285,28055544,28056697,28057627,28061210,28062035,28070382,28073648,28077301,28077737,28079273,28080135,28082604,28087629,28094019,28098178,28098571,28104421,28108410,28108768,28112642,28115107,28119248,28119398,28123601,28127357,28135849,28141187,28143165,28150332,28154737,28156104,28156115,28156313,28156338,28156514,28156569,28165441,28165492,28165938,28167432,28167967,28168304,28168537,28169391,28169703,28171261,28173876,28174043,28179008,28191003,28196763,28197223,28201176,28205120,28214311,28215684,28221223,28225742,28232298,28233866,28234697,28235064,28235123,28235139,28235143,28235408,28235437,28235516,28235619,28237812,28240374,28240487,28241578,28259417,28259554,28264085,28264650,28268805,28274078,28277448,28282299,28285039,28285208,28286152,28293192,28299995,28303341,28304389,28322302,28322448,28323006,28323895,28327261,28327490,28327610,28327895,28328732,28340921,28350952,28351009,28351923,28353499,28361661,28366079,28366957,28369181,28369316,28372026,28375858,28379463,28380238,28380808,28381193,28381773,28382532,28383385,28383684,28386555,28396458,28400934,28403851,28406907,28407712,28409056,28413235,28413754,28419034,28421012,28421773,28423720,28435856,28437119,28444851,28450315,28452478,28452603,28463235,28464374,28464784,28464845,28470514,28472134,28475232,28476028,28477766,28478184,28483666,28484140,28485602,28488073,28489404,28489602,28490464,28490564,28497725,28497912,28498659,28499544,28504704,28505688,28505926,28505968,28508130,28508833,28509120,28511956,28515909,28516205,28519480,28519706,28528608,28541053,28547938,28554938,28555410,28556662,28560751,28563600,28563961,28569229,28570025,28573596,28577665,28585475,28586680,28589756,28589974,28607589,28607630,28611998,28615729,28620189,28622346,28624515,28629175,28631560,28631937,28632003,28637230,28637703,28640070,28640953,28641255,28642135,28642363,28642976,28643114,28643152,28644056,28644488,28647060,28649463,28649560,28654964,28659005,28662336,28665650,28665950,28669495,28669797,28670491,28670541,28670921,28671101,28671179,28671607,28672159,28673417,28674288,28679060,28680976,28682262,28693127,28693370,28694563,28695983,28697231,28702297,28707858,28710614,28713101,28713471,28714131,28730254,28730691,28730923,28730982,28732801,28738380,28740758,28740786,28744113,28746024,28746311,28746814,28747145,28748599,28749161,28749789,28750772,28751706,28751783,28753928,28757354,28768065,28768493,28768812,28769419,28769911,28771235,28775869,28780914,28788655,28794097,28794190,28794535,28798989,28799367,28802479,28803214,28803298,28803362,28805560,28813848,28814391,28814821,28817184,28820408,28830020,28830442,28831218,28839291,28840019,28840513,28844077,28852053,28857738,28859409,28860170,28860202,28861954,28862052,28862748,28862788,28863383,28863773,28864478,28867768,28868771,28871594,28873513,28884447,28892017,28895930,28899327,28901380,28904277,28905089,28905473,28908074,28909754,28910503,28910528,28910768,28910793,28911561,28911582,28911962,28924370,28924984,28936088,28936372,28940091,28951156,28954739,28959020,28961230,28970642,28972537,28976491,28981292,28982949,28984478,28985151,28985440,28985737,28986322,28986639,28986809,28986870,28987066,28987171,28990949,28990952,28991731,28991823,28994540,28997188,29004279,29006575,29009572,29009935,29018508,29022929,29025184,29025409,29031081,29032855,29034292,29040421,29042821,29043968,29044184,29051380,29052825,29053756,29064932,29065704,29066605,29070570,29072680,29072974,29072996,29075579,29075833,29076107,29076469,29077204,29077736,29083875,29084115,29092523,29094468,29094479,29106984,29109486,29116286,29116479,29118243,29122175,29123179,29126201,29132161,29133531,29135343,29135551,29141293,29147566,29150150,29153216,29154782,29157567,29159896,29163583,29168940,29176141,29190374,29191034,29191609,29193500,29193783,29193865,29197248,29198220,29198472,29198680,29198820,29198944,29199801,29205548,29206602,29211854,29220598,29230034,29230073,29230198,29231749,29237814,29239568,29244899,29246536,29247036,29247159,29247717,29248992,29250149,29258049,29270454,29271446,29271681,29278132,29279047,29280468,29286203,29286897,29286938,29288508,29305851,29307618,29310530,29310561,29310700,29310938,29315441,29315816,29316913,29318544,29319010,29320622,29322562,29329115,29330024,29330372,29340084,29343806,29344020,29344395,29353287,29362504,29364125,29365871,29368505,29371983,29375345,29376058,29377015,29380435,29381444,29382205,29384957,29387325,29389325,29394061,29394674,29396516,29399529,29400243,29400432,29400988,29403292,29403388,29410259,29410363,29410459,29416380,29429308,29433101,29433682,29433847,29433967,29434148,29439109,29439678,29439997,29445346,29458652,29459001,29461131,29461301,29461673,29470557,29479140,29479757,29482400,29485167,29485730,29485890,29486358,29490126,29491373,29492692,29492955,29496033,29496196,29496800,29501034,29501254,29501523,29501735,29502831,29503165,29505573,29508101,29511247,29517508,29517752,29517790,29521378,29522025,29527891,29530958,29535089,29536638,29541032,29542118,29543537,29544550,29546214,29558073,29558690,29561816,29563660,29564850,29569720,29572392,29575349,29577024,29577481,29577601,29577621,29579608,29579697,29579715,29582626,29582664,29584745,29592097,29592390,29593528,29595218,29597403,29597572,29598337,29601402,29617921,29623630,29635706,29637744,29637939,29642087,29644506,29646177,29646400,29646807,29647319,29647639,29649126,29653225,29655336,29655565,29656586,29661605,29664795,29668810,29669553,29670790,29678652,29684154,29684420,29689610,29696977,29698750,29703933,29705015,29705843,29705851,29705985,29707693,29708577,29708717,29708993,29718576,29732162,29734081,29735103,29735118,29738732,29746843,29751487,29752279,29753370,29753914,29754416,29756606,29756765,29759119,29763214,29763377,29763576,29764079,29764320,29764587,29768724,29773513,29773649,29794610,29799876,29801894,29801924,29812278,29812798,29821818,29822707,29824791,29825542,29827238,29829513,29832170,29832692,29839868,29858141,29860680,29862396,29866863,29866872,29867732,29867939,29871353,29872047,29875566,29885911,29894801,29901004,29904976,29906327,29910733,29912746,29912970,29917801,29921311,29927835,29930563,29935955,29941809,29946076,29946588,29947015,29949412,29950100,29950419,29950944,29954344,29955382,29959506,29964479,29970177,29974185,29975080,29979664,29982137,29984976,29987257,29993881,29994160,29998357,29999633,30008884,30014342,30018457,30025206,30035049,30036248,30036581,30036582,30036736,30040017,30047131,30049237,30050669,30051266,30053147,30053227,30062678,30062878,30067124,30067338,30067744,30073550,30073601,30073618,30073858,30082109,30082925,30083242,30086206,30086397,30086752,30087509,30093040,30098653,30099935,30107240,30120181,30135948,30136219,30136951,30137245,30137376,30139976,30140127,30142371,30142713,30144343,30146077,30146439,30146547,30152033,30156959,30172036,30173480,30175289,30176993,30182902,30183616,30197036,30198895,30201215,30202485,30204760,30217737,30218903,30219594,30219653,30220167,30224697,30226273,30226313,30231203,30236188,30237394,30238984,30240181,30241373,30248076,30253404,30256000,30261934,30263180,30269759,30276765,30276919,30277479,30277539,30277540,30278641,30279769,30281103,30281142,30281858,30282774,30297464,30307629,30307844,30314617,30321064,30322331,30326577,30333112,30333178,30333342,30335148,30336936,30337659,30339656,30340195,30344173,30357004,30367180,30374367,30374432,30387105,30388241,30393048,30394073,30394744,30396270,30397985,30401410,30401417,30402000,30403329,30407802,30407963,30408550,30409172,30410004,30410801,30414357,30416680,30420743,30422721,30423042,30425141,30426303,30426632,30435847,30439789,30440588,30449066,30453988,30460226,30466680,30466734,30477732,30484178,30485085,30487205,30487425,30494442,30494593,30495467,30496067,30502619,30502685,30505247,30505415,30507434,30513379,30519810,30525735,30531467,30537000,30537225,30537360,30541285,30541949,30556181,30557322,30557410,30575367,30576351,30576679,30582900,30590941,30591643,30592939,30592991,30594561,30594667,30595337,30596621,30602862,30603309,30608803,30610417,30611642,30614021,30616254,30619611,30626178,30636098,30643533,30651121,30651959,30652802,30654230,30654775,30661142,30663126,30663191,30663415,30664049,30666770,30667267,30678025,30682142,30682585,30697098,30697150,30699734,30700890,30706340,30714773,30719960,30721792,30728882,30733079,30737617,30742099,30742252,30743389,30743433,30744021,30744194,30744604,30745642,30746163,30751752,30761712,30776238,30777703,30778644,30780441,30780781,30786233,30791606,30794613,30794948,30799469,30800591,30803855,30809552,30811430,30815942,30818256,30820412,30820559,30820839,30820889,30820980,30822275,30823188,30832950,30833449,30839232,30850599,30859321,30859892,30861892,30863901,30867636,30868846,30868946,30874001,30876567,30876590,30876753,30876916,30878160,30886910,30887492,30892715,30892918,30895380,30896172,30915002,30925573,30926044,30926614,30928958,30929448,30929449,30930003,30931945,30944220,30945180,30956921,30957797,30957820,30958613,30962918,30963745,30973498,30975276,30976789,30978677,30978989,30980449,30984663,30984922,30992592,30993585,30999153,31001828,31008402,31011035,31012805,31017301,31018087,31023821,31026055,31026057,31026391,31033918,31046838,31046911,31050122,31050328,31050501,31051007,31051251,31059529,31060375,31060560,31060798,31063463,31064044,31064157,31066580,31070444,31073547,31077599,31082474,31082721,31083120,31089552,31090730,31094546,31096020,31102562,31105009,31107147,31119610,31119715,31121712,31133645,31157963,31160594,31160751,31162544,31163973,31164682,31165544,31171386,31171853,31173023,31175827,31181207,31184643,31186507,31190747,31198924,31199000,31206966,31208019,31208161,31210060,31217593,31221547,31223252,31223852,31224539,31224761,31232409,31235236,31238967,31239063,31239975,31251593,31252453,31254809,31258076,31258700,31258886,31259365,31259606,31267246,31270118,31270358,31270514,31270764,31272136,31282786,31286132,31289635,31289846,31293937,31298195,31301575,31301847,31302910,31310549,31317135,31317142,31329953,31337338,31342773,31343124,31344646,31348785,31354377,31362803,31375750,31376384,31377061,31377075,31378433,31378434,31380272,31387494,31387750,31403423,31407555,31414948,31423283,31433147,31435467,31438657,31444079,31446300,31447506,31447857,31448147,31452527,31453801,31453820,31454313,31454498,31460327,31461307,31465438,31471366,31473398,31475729,31477029,31477175,31477208,31477300,31477980,31479487,31487689,31489849,31490489,31492008,31492200,31493705,31500743,31507256,31507315,31507683,31511234,31519286,31525826,31529051,31529568,31535703,31538731,31543346,31550819,31552264,31555741,31574616,31575136,31577187,31583762,31583924,31596522,31597902,31599159,31599397,31601164,31601633,31603416,31605492,31607693,31609030,31616307,31617311,31617417,31625043,31629000,31635561,31641496,31652338,31654664,31658906,31661591,31662911,31665657,31668871,31674551,31674552,31674615,31674950,31676081,31685242,31685482,31688650,31690049,31693776,31694395,31694471,31695136,31697599,31700238,31703189,31704361,31710976,31722331,31728209,31728260,31751563,31752314,31753766,31762313,31763709,31764065,31764239,31779295,31781577,31783082,31801832,31806949,31817534,31822200,31823896,31826690,31830052,31843020,31847384,31848748,31856253,31860141,31867554,31876249,31876352,31877072,31879528,31879569,31880312,31882324,31884694,31894877,31895501,31902379,31904426,31907876,31909234,31912436,31918094,31925223,31925369,31925817,31926092,31926691,31932556,31932930,31932997,31937496,31937582,31940665,31956482,31957020,31959949,31963550,31967772,31977721,31982141,31988503,31998903,31999542,32000124,32003616,32003743,32003776,32005999,32006571,32006636,32008273,32009352,32022637,32027936,32051070,32064016,32065528,32065686,32069134,32094634,32095779,32100574,32107025,32110806,32111256,32111356,32112436,32127862,32132816,32136175,32140438,32144163,32144414,32144850,32146625,32147013,32151956,32163894,32171490,32172014,32173884,32191537,32191813,32209283,32223139,32223442,32232842,32242879,32243806,32254603,32261035,32261568,32261824,32265696,32267648,32275855,32296736,32311060,32312919,32315627,32318058,32318273,32318964,32319134,32323407,32326784,32329175,32337581,32340065,32341414,32342958,32345645,32355607,32357579,32359207,32372058,32372261,32373334,32379458,32385982,32386493,32392186,32392724,32392746,32394660,32394763,32401506,32402025,32402871,32403581,32403654,32404218,32404284,32405896,32417857,32420739,32428793,32431817,32432216,32432636,32436554,32437580,32451080,32460706,32469709,32478079,32480805,32496507,32522961,32523317,32523600,32523662,32530208,32532137,32532330,32532581,32533567,32536291,32536379,32538047,32552357,32554470,32554521,32554593,32565692,32565720,32568679,32575599,32579369,32580172,32582165,32589390,32592414,32592838,32592876,32593144,32603441,32605997,32608909,32610521,32614020,32617877,32620337,32628731,32629883,32638784,32639087,32651104,32655158,32655680,32656118,32660612,32660663,32665876,32670426,32671570,32677535,32677862,32681151,32709780,32711807,32714651,32715050,32715228,32721227,32730990,32737943,32738609,32739429,32742625,32743411,32743794,32743861,32744189,32745502,32756919,32757460,32771364,32771845,32783342,32783478,32783522,32783636,32790834,32791226,32800532,32801665,32803797,32805831,32808876,32814158,32824009,32830299,32839197,32847975,32848640,32848855,32865165,32865847,32867485,32868991,32869483,32869764,32869789,32870636,32878993,32882231,32885173,32885748,32890185,32890850,32894834,32897304,32911486,32915886,32919391,32919882,32938204,32942825,32944858,32947139,32947359,32949481,32957442,32961051,32964692,32983425,32988356,32990246,32992702,32999373,33003668,33004079,33004262,33006949,33013383,33019819,33021815,33022204,33022205,33022561,33023148,33023261,33023456,33024167,33024604,33025978,33025979,33031767,33036722,33037262,33043630,33048766,33057719,33059654,33079903,33085627,33087709,33087926,33089630,33106191,33110884,33113183,33126066,33130596,33138903,33142433,33152669,33155746,33156033,33158077,33168505,33170442,33170820,33174144,33174688,33175285,33182299,33191488,33192071,33193178,33196094,33196102,33196440,33202333,33203835,33206247,33206253,33209871,33222428,33230191,33230597,33233391,33237523,33240346,33241053,33241227,33241436,33245828,33252394,33252433,33258246,33258314,33258324,33280397,33284307,33284550,33285663,33293736,33293737,33293939,33300583,33300630,33302242,33309202,33324450,33334119,33336427,33338093,33341029,33341296,33350204,33362768,33369497,33380220,33408571,33409499,33409861,33416664,33419642,33434979,33441060,33442989,33443024,33446724,33458153,33459442,33459624,33464986,33472899,33480741,33495020,33498007,33499211,33502458,33503538,33506701,33508134,33509763,33516451,33519339,33525149,33531610,33541300,33549211,33554124,33554411,33556082,33563681,33586824,33591044,33621195,33621309,33626559,33630189,33655049,33655483,33664516,33665380,33669467,33669521,33672603,33676986,33677309,33691593,33692411,33694466,33708222,33709323,33712727,33713081,33714156,33716472,33716486,33717974,33718310,33718657,33738632,33745545,33746025,33746389,33754827,33760345,33771988,33772276,33775545,33777665,33778854,33787516,33787526,33798601,33807769,33814208,33828439,33834508,33844919,33874825,33877197,33895264,33897461,33915815,33921852,33934272,33942200,33956424,33958992,33969262,33989811,33990555,33990746,33996540,34000827,34000955,34015037,34016514,34023306,34023339,34027311,34027671,34028583,34049867,34050042,34056367,34071857,34075561,34076206,34077745,34078209,34078753,34078762,34079401,34079471,34083649,34096942,34098351,34109679,34114095,34114329,34114596,34124665,34128623,34139149,34142641,34142751,34144212,34145968,34148067,34148443,34150116,34158170,34158558,34179084,34179553,34211199,34229765,34230764,34235556,34239840,34251702,34252031,34253396,34256563,34258541,34260224,34274980,34275028,34283785,34294315,34294752,34294765,34294900,34295889,34297186,34304188,34320390,34334063,34338701,34340448,34350807,34353508,34372223,34374839,34376974,34387214,34390586,34392222,34400061,34405027,34409654,34410896,34412167,34414947,34415954,34419968,34428871,34430565,34434583,34445277,34462136,34462342,34462397,34463752,34464990,34480396,34498110,34499696,34502763,34505816,34506635,34521212,34524312,34525309,34533071,34533459,34536191,34539901,34540329,34551372,34551520,34552803,34559236,34571100,34571326,34576081,34577128,34583555,34585353,34600423,34600522,34600964,34602454,34614013,34649244,34653631,34673038,34673058,34682154,34682573,34690825,34692545,34705132,34712253,34713777,34715459,34723833,34727074,34732195,34732476,34739374,34745077,34760529,34760983,34761114,34770096,34771695,34773270,34789676,34806529,34806675,34813030,34814626,34815223,34828383,34833564,34841595,34842342,34845831,34847660,34847706,34857854,34862789,34874111,34874415,34876879,34886875,34889914,34890244,34905708,34905992,34924684,34928884,34929218,34929402,34954547,34956763,34961843,34963462,34987981,35016974,35017100,35017201,35017571,35025100,35025598,35031568,35051180,35062113,35063040,35068807,35071579,35072741,35073038,35073064,35084534,35092297,35095373,35099323,35110911,35111304,35111951,35117580,35121172,35122858,35146304,35156902,35156940,35159957,35167310,35169605,35169665,35171345,35180632,35202828,35207925,35208194,35217049,35222381,35226155,35229447,35231395,35231955,35242872,35247019,35247665,35253570,35255445,35265110,35266767,35266924,35267944,35270001,35275083,35302380,35321063,35322681,35324119,35325900,35329589,35335431,35337312,35337360,35337779,35337888,35338839,35348312,35350740,35350837,35351268,35358619,35361972,35366537,35368034,35373771,35374300,35375772,35378141,35378162,35381966,35399731,35401063,35425758,35428739,35445386,35451804,35458971,35459557,35459558,35512738,35519207,35534538,35535756,35567658,35567691,35569667,35593440,35610316,35610901,35611081,35611117,35611760,35620031,35639957,35646254,35656504,35704454,35726363,35727046,35727898,35728028,35729454,35754575,35761028,35762304,35792462,35793513,35804187,35836983,35837080,35855054,35867275,35868021,35874206,35880734,35887933,35896637,35901825,35902510,35904594,35912021,35940297,35943695,35943945,35944354,35944678,35950143,35952268,35958712,35959888,35960798,35961173,35961466,35970558,35971310,35971369,35976305,35978449,35983017,35987179,36009594,36064868,36066216,36084759,36109838,36114003,36114862,36127795,36152900,36155959,36158278,36159055,36160027,36164107,36165858,36169721,36171234,36171442,36171565,36247766,36259247,36273385,36274430,36277002,36294018,36294160,36294418,36294419,36295661,36299278,36319369,36319448,36325339,36332100,36339107,36359028,36359077,36376328,36382428,36393594,36397522,36398972,36399593,36400077,36400557,36400601,36400687,36411564,36452040,36468078,36477367,36527817,36528779,36554545,36554781,36559801,36560560,36584395,36592857,36593817,36594559,36595221,36595255,36615799,36616124,36630180,36635827,36637457,36644196,36683969,36686562,36687059,36687376,36687938,36699262,36718531,36719881,36720804,36724010,36724113,36724245,36727382,36728666,36728699,36729511,36729699,36745977,36748237,36754518,36755093,36755236,36756291,36761882,36763106,36786103,36786538,36787991,36790245,36791010,36798876,36804382,36806640,36825669,36846861,36857818,36872273,36873273,36873283,36878043,36887355,36897485,36904751,36904905,36905002,36905365,36909546,36910175,36915225,36916449,36929689,36931154,36944817,36944969,36947065,36950998,36990641,36997184,37007138,37007500,37034813,37035510,37036811,37040895,37048659,37048794,37048901,37053892,37066001,37066437,37067367,37075667,37086979,37113838,37118161,37139964,37162174,37171145,37171407,37171427,37184792,37184802,37199148,37202409,37204505,37204615,37216420,37217279,37277259,37337887,37346813,37351682,37353209,37365776,37417466,37423352,37431372,37431669,37432228,37477002,37480423,37541476,37548640,37548927,37607876,37608494,37674110,37674489,37687664,37699129,37710048,37753382,37755349,37762535,37771925,37804765,37808714,37823601,37827460,37837357,37861594,37905792,37913273,37968140,37984747,37987670,37990189,37993451,38010292,38026551,38068140,38069175,38069244,38069556,38089406,38125272,38125469,38153274,38203855,38252517,38267329,38267423,38273133,38283303,38293132,38305530,38354155,38357879,38393956,38403750,38421829,38426209,38433543,38440060,38453162,38457463,38468873,38524478,38525371,38587378,38618361,38623312,38625333,38636631,38683452,38687834,38698318,38747669,38787428,38787952,38788606,38794514,38795696,38827552,38834763,38837828,38843677,38866521,38881088,38893439,38912508,38934059,38990526,38992898,39000787,39115195,39171152,39208181,39269790,39327657,39393540,39467140,39516212,39520933,39550098,39560274,39774003,39802362,39802363,39909590,39927280,40011989,40374926,40719839,41577178,92173805,92203967,92561514,92690256,92747243,92818148,92840732,92971878,92993744,93312024,93568324,93636826,93715765,93876367,94350607,";
        //var val = ",7607420,";
        //val = ",10264670,";
        //val = ",4248540,";

        repo_licencias.CachearVacacionesAprobadasPara("," + val + ",", new ConceptoLicenciaAnualOrdinaria());
        repo_licencias.CachearVacacionesPermitidasPara("," + val + ",", new ConceptoLicenciaAnualOrdinaria());
        repo_licencias.CachearGetVacacionesPendientesAprobacion("," + val + ",");

        repo_licencias.CachearVacacionesPerdidas("," + val + ",");
        repo_personas.CachearTipoDePlantaDe("," + val + ",");

        TablaDeDatos tabla_log_analisis_licencia = repo_licencias.TablaLogAnalisisLicencia();
        TablaDeDatos tabla_log_saldos_analisis_licencia = repo_licencias.TablaLogSaldoAnalisisLicencia();

        var err_count = 0;
        var count = 0;
        var docs = val.Split(',').ToList();
        docs.ForEach(doc =>
        {
            if (doc != string.Empty)
            {
                var persona = new Persona();
                persona.Documento = int.Parse(doc);
                try
                {
                    analisis = ordinaria.GetAnalisisCalculoVacacionesPara(repo_licencias, repo_personas, persona, DateTime.Now);
                    if (persistir_resultados)
                    {
                        repo_licencias.AddToBulkAnalisisLicencias(analisis, persona.Documento, tabla_log_analisis_licencia);
                        repo_licencias.AddToBulkSaldosAnalisisLicencias(analisis, persona.Documento, tabla_log_saldos_analisis_licencia);
                    }
                    //repo_personas.GuardarAnalisis(analisis);
                    count++;
                }
                catch (ErrorLogException err)
                {
                    err_count++;
                }

            }
        });
        if (persistir_resultados)
        {
            repo_licencias.BulkInsertTablaAnalisisLicencia((DataTable)tabla_log_analisis_licencia);
            repo_licencias.BulkInsertTablaSaldosAnalisisLicencia((DataTable)tabla_log_saldos_analisis_licencia);
        }
        var tiempo = DateTime.Now - begin_time;

        return analisis;
    }

    [WebMethod]
    public AreaParaDDJJ104[] GetAreasParaDDJJ104(int mes, int anio, int id_area, int complementaria, Usuario usuario)
    {
        var responsableDDJJ = new ResponsableDDJJ(RepoPermisosSobreAreas(), RepositorioDeFuncionalidadesDeUsuarios(), Autorizador());
        var a = new AreaParaDDJJ104[1];

        if (id_area == 0)
        {
            //Traigo las areas formales
            a = responsableDDJJ.GetAreasParaDDJJ104(mes, anio, id_area, usuario).ToArray();
        }
        else
        {
            a = responsableDDJJ.GetAreasParaDDJJ104InferioresA(mes, anio, id_area, complementaria, usuario).ToArray();
        }

        return a;
    }

    [WebMethod]
    public DDJJ104_2001 GenerarDDJJ104(int id_area, int mes, int anio, Persona[] lista_persona, int estado_guardado, int complementaria, Usuario usuario)
    {
        //RepositorioDDJJ104 ddjj = new RepositorioDDJJ104();
        //return ddjj.GenerarDDJJ104(usuario, area, mes, anio);

        var UnArea = GetAreasParaDDJJ104(mes, anio, id_area, complementaria, usuario);

        RepositorioDDJJ104 ddjj = new RepositorioDDJJ104();

        DDJJ104_2001 cabe = new DDJJ104_2001();
        cabe = ddjj.GenerarDDJJ104(usuario, UnArea[0], mes, anio, lista_persona, estado_guardado, complementaria);


        return cabe;
    }

    [WebMethod]
    public string GetLeyendaAnio(int anio)
    {
        return new RepositorioDeParametrosGenerales(Conexion()).GetLeyendaAnio(anio);
    }

    [WebMethod]
    public string GetAnioDeContrato(Usuario usuario)
    {
        return new RepositorioDeParametrosGenerales(Conexion()).GetAnioDeContrato();
    }

    [WebMethod]
    public DateTime[] GetFeriados()
    {
        return new RepositorioDeParametrosGenerales(Conexion()).GetFeriados().ToArray();
    }

    //CONSULTA INDIVIDUAL
    [WebMethod]
    public DDJJ104_Consulta[] GetConsultaIndividualPorPersona(int mesdesde, int aniodesde, int meshasta, int aniohasta, int nrodoc_persona, int estado, int orden, Usuario usuario)
    {
        var responsableDDJJ = new ResponsableDDJJ(RepoPermisosSobreAreas(), Autorizador());
        var a = new DDJJ104_Consulta[1];

        a = responsableDDJJ.GetConsultaIndividualPorPersona(mesdesde, aniodesde, meshasta, aniohasta, nrodoc_persona, estado, orden, usuario).ToArray();

        return a;
    }

    [WebMethod]
    public DDJJ104_Consulta[] GetConsultaPorArea(int mesdesde, int aniodesde, int meshasta, int aniohasta, int id_area, int estado, int orden, Usuario usuario)
    {
        var responsableDDJJ = new ResponsableDDJJ(RepoPermisosSobreAreas(), Autorizador());
        var a = new DDJJ104_Consulta[1];

        a = responsableDDJJ.GetConsultaPorArea(mesdesde, aniodesde, meshasta, aniohasta, id_area, estado, orden, usuario).ToArray();

        return a;
    }


    //[WebMethod]
    //public AreaParaDDJJ104[] ImprimirDDJJ104(List<AreaParaDDJJ104> lista)
    //{
    //    RepositorioDDJJ104 ddjj = new RepositorioDDJJ104();
    //    return ddjj.ImprimirDDJJ104(lista);
    //}

    //[WebMethod]
    //public void MarcarDDJJ104Impresa(int nroDDJJ, int estado)
    //{
    //    var responsableDDJJ = new ResponsableDDJJ(RepoPermisosSobreAreas());
    //    responsableDDJJ.MarcarDDJJ104Impresa(nroDDJJ, estado);
    //}

    [WebMethod]
    public MesDto[] GetMeses()
    {
        List<MesDto> meses = new List<MesDto>();

        DateTime fechaActual = DateTime.Now;
        if (fechaActual.Day > 22)
        {
            meses.Add(new MesDto() { Mes = fechaActual.Month, NombreMes = DateTimeFormatInfo.CurrentInfo.GetMonthName(fechaActual.Month), Anio = fechaActual.Year });
        }

        var mesesGenerados = GetMesesGenerados();

        meses.AddRange(mesesGenerados);

        //foreach (var item in mesesGenerados)
        //{
        //    string sFecha = "01" + Convert.ToString(item.Mes) + Convert.ToString(item.Anio);
        //    DateTime fechaAnterior = Convert.ToDateTime(sFecha);
        //    meses.Add(new MesDto() { Mes = fechaAnterior.Month, NombreMes = DateTimeFormatInfo.CurrentInfo.GetMonthName(fechaAnterior.Month), Anio = fechaAnterior.Year });    
        //}

        return meses.ToArray();
    }


    [WebMethod]
    public EstadoDto[] GetEstadosDDJJ104(int mostrarSinGenerar)
    {
        List<EstadoDto> estado = new List<EstadoDto>();


        estado.Add(new EstadoDto() { Id = 9, Descripcion = "Mostrar Todos" });
        if (mostrarSinGenerar == 1)
        {
            estado.Add(new EstadoDto() { Id = 0, Descripcion = "Sin Generar" });
        }
        estado.Add(new EstadoDto() { Id = 1, Descripcion = "Impresa no recepcionada" });
        estado.Add(new EstadoDto() { Id = 2, Descripcion = "Recepcionada" });

        return estado.ToArray();
    }



    //[WebMethod]
    public MesDto[] GetMesesGenerados()
    {
        var RepositorioDDJJ = new RepositorioDDJJ104();

        List<DDJJ104_2001> ListDDJJ = RepositorioDDJJ.GetMesesGenerados();

        List<MesDto> meses = new List<MesDto>();

        foreach (var item in ListDDJJ)
        {
            meses.Add(new MesDto() { Mes = item.Mes, NombreMes = DateTimeFormatInfo.CurrentInfo.GetMonthName(item.Mes), Anio = item.Anio });
        }

        return meses.ToArray();
    }




    [WebMethod]
    public DDJJ104_Consulta[] GetPersonasSinCertificar(int mes, int anio)
    {
        var responsableDDJJ = new ResponsableDDJJ(RepoPermisosSobreAreas(), Autorizador());
        var a = new DDJJ104_Consulta[1];

        a = responsableDDJJ.GetPersonasSinCertificar(mes, anio).ToArray();

        return a;
    }




    //FIN: DDJJ 104 ---------------

    [WebMethod]
    public void EliminarInasistenciaActual(Persona unaPersona)
    {
        RepositorioPersonas repoPersonas = new RepositorioPersonas();
        repoPersonas.EliminarInasistenciaActual(unaPersona);
    }


    [WebMethod]
    public void EliminarPasePendienteAprobacion(int id_pase)
    {
        PaseDeArea un_pase = new PaseDeArea();
        un_pase.Id = id_pase;
        this.EliminarPase(un_pase);
    }

    [WebMethod]
    public void EliminarPase(PaseDeArea unPase)
    {
        RepositorioPasesDeArea repositorio = new RepositorioPasesDeArea();
        repositorio.EliminarSolicitudDePase(unPase);
    }

    [WebMethod]
    public bool CargarPase(PaseDeArea unPase)
    {
        RepositorioPasesDeArea repositorio = new RepositorioPasesDeArea();
        return repositorio.CargarSolicitudDePase(unPase);

    }

    [WebMethod]
    public bool CargarPasePlano(int documento, int idAreaOrigen, int idAreaDestino, int idUsuarioCarga)
    {
        RepositorioPasesDeArea repositorio = new RepositorioPasesDeArea();

        Persona nuevaPersona = new Persona();
        nuevaPersona.Documento = documento;

        Area areaOrigen = new Area(idAreaOrigen, "");
        Area areaDestino = new Area(idAreaDestino, "");

        Usuario usuario = new Usuario();
        usuario.Id = idUsuarioCarga;

        Auditoria auditoria = new Auditoria();
        auditoria.UsuarioDeCarga = usuario;

        PaseDeArea nuevoPase = new PaseDeArea();
        nuevoPase.AreaDestino = areaDestino;
        nuevoPase.AreaOrigen = areaOrigen;
        nuevoPase.Auditoria = auditoria;
        nuevoPase.Persona = nuevaPersona;

        return repositorio.CargarSolicitudDePase(nuevoPase);
    }

    [WebMethod]
    public GraficoSueldo GetReporteSueldos(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_ingreso")) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_sueldo")) throw (new Exception("El usuario no tiene permisos para acceder al reporte de sueldos"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
        string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();
        int dia = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(0, 2)));
        int mes = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(3, 2)));
        int anio = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(6, 4)));
        bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
        DateTime fecha = new DateTime(anio, mes, dia);
        int id_area = (int)((JValue)criterio_deserializado["id_area"]);
        if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_ingreso", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_sueldo", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());
        return repositorio.GetReporteSueldosPorArea(tipo, fecha, id_area, incluir_dependencias);
    }

    [WebMethod]
    public GraficoDotacion GetGrafico(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_ingreso")) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_dotacion")) throw (new Exception("El usuario no tiene permisos para acceder al reporte de dotacion"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
        string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();
        int dia = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(0, 2)));
        int mes = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(3, 2)));
        int anio = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(6, 4)));
        bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
        DateTime fecha = new DateTime(anio, mes, dia);
        int id_area = (int)((JValue)criterio_deserializado["id_area"]);
        if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_ingreso", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_dotacion", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());
        return repositorio.GetGraficoDotacion(tipo, fecha, id_area, incluir_dependencias);

    }

    [WebMethod]
    public GraficoRangoEtario GetGraficoRangoEtario(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_ingreso")) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
        string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();
        int dia = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(0, 2)));
        int mes = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(3, 2)));
        int anio = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(6, 4)));
        bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
        DateTime fecha = new DateTime(anio, mes, dia);
        int id_area = (int)((JValue)criterio_deserializado["id_area"]);
        if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_ingreso", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de reportes")); 
        RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());
        return repositorio.GetGraficoRangoEtario(tipo, fecha, id_area, incluir_dependencias);

    }

    [WebMethod]
    public string AgregarRenovacionContrato(string criterio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_seleccion_contrato")) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
        int id_area = (int)((JValue)criterio_deserializado["id_area"]);
        string documento = ((JValue)criterio_deserializado["documento"]).ToString();
        string accion = ((JValue)criterio_deserializado["accion"]).ToString();


        RepositorioDeContratos repositorio = new RepositorioDeContratos(Conexion());
        return repositorio.AgregaAccionAPersona(id_area, int.Parse(documento), accion, usuario.Id);

    }

    [WebMethod]
    public string GenerarInformeContrato(string criterio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_seleccion_contrato")) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);

        bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
        int id_area = Int32.Parse((string)((JValue)criterio_deserializado["id_area"]));
        int id_estado = Int32.Parse((string)((JValue)criterio_deserializado["id_estado"]));

        RepositorioDeContratos repositorio = new RepositorioDeContratos(Conexion());
        return repositorio.GenerarInforme(id_area, id_estado, incluir_dependencias, usuario.Id);
    }

    [WebMethod]
    public string GetInformesGeneradosPorArea(string criterio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_seleccion_contrato")) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);

        bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
        int id_area = Int32.Parse((string)((JValue)criterio_deserializado["id_area"]));
        int id_estado = Int32.Parse((string)((JValue)criterio_deserializado["id_estado"]));

        RepositorioDeContratos repositorio = new RepositorioDeContratos(Conexion());
        return repositorio.GetInformesGenerados(id_area, id_estado, incluir_dependencias);
    }

    [WebMethod]
    public GraficoContratos GetGraficoContratados(string criterio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_seleccion_contrato")) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
        string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();

        bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
        DateTime fecha = DateTime.Today;
        int id_area = (int)((JValue)criterio_deserializado["id_area"]);
        RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());
        return repositorio.GetGraficoContratados(tipo, fecha, id_area, incluir_dependencias);

    }


    [WebMethod]
    public GraficoBienes GetGraficoBienes(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_seleccion_contrato")) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
        string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();

        bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
        DateTime fecha = DateTime.Today;
        int id_area = (int)((JValue)criterio_deserializado["id_area"]);
        RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());
        return repositorio.GetGraficoBienes(tipo, fecha, id_area, incluir_dependencias);

    }


    /*Excel contratos*/

    [WebMethod]
    public string ExcelGeneradoContratos(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_seleccion_contrato")) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));


        try
        {
            var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
            string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();
            int dia = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(0, 2)));
            int mes = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(3, 2)));
            int anio = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(6, 4)));
            bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
            DateTime fecha = new DateTime(anio, mes, dia);
            int id_area = (int)((JValue)criterio_deserializado["id_area"]);

            if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "ingreso_seleccion_contrato", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));

            RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());

            return repositorio.ExcelGeneradoContratos(tipo, dia, mes, anio, incluir_dependencias, id_area);
        }
        catch (Exception ex)
        {

            throw ex;
        }


    }



    /**/
    /*Gráfico rango etário*/

    [WebMethod]
    public string ExcelGeneradoRangoEtario(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_ingreso")) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        try
        {
            var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
            string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();
            int dia = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(0, 2)));
            int mes = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(3, 2)));
            int anio = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(6, 4)));
            bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
            DateTime fecha = new DateTime(anio, mes, dia);
            int id_area = (int)((JValue)criterio_deserializado["id_area"]);

            if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_ingreso", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));

            RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());

            return repositorio.ExcelGeneradoRangoEtario(tipo, dia, mes, anio, incluir_dependencias, id_area);
        }
        catch (Exception ex)
        {

            throw ex;
        }


    }

    /**/




    /*Grafico Excel Sueldo*/

    [WebMethod]
    public string ExcelGeneradoSueldos(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_ingreso")) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        try
        {
            var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
            string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();
            int dia = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(0, 2)));
            int mes = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(3, 2)));
            int anio = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(6, 4)));
            bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
            DateTime fecha = new DateTime(anio, mes, dia);
            int id_area = (int)((JValue)criterio_deserializado["id_area"]);

            if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_ingreso", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));

            RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());

            return repositorio.ExcelGeneradoSueldos(tipo, dia, mes, anio, incluir_dependencias, id_area);
        }
        catch (Exception ex)
        {

            throw ex;
        }


    }


    /**/

    /*Grafico Excel*/
    [WebMethod]
    public string ExcelGenerado(string criterio, Usuario usuario)
    {
        //if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "reportes_ingreso")) throw (new Exception("El usuario no tiene permisos para el modulo de reportes"));
        try
        {
            var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);
            string tipo = ((JValue)criterio_deserializado["tipo"]).ToString();
            int dia = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(0, 2)));
            int mes = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(3, 2)));
            int anio = Int32.Parse((((JValue)criterio_deserializado["fecha"]).ToString().Substring(6, 4)));
            bool incluir_dependencias = (bool)((JValue)criterio_deserializado["incluir_dependencias"]);
            DateTime fecha = new DateTime(anio, mes, dia);
            int id_area = (int)((JValue)criterio_deserializado["id_area"]);

            if (!Autorizador().ElUsuarioTienePermisosParaFuncionalidadYArea(usuario.Id, "reportes_ingreso", id_area)) throw (new Exception("El usuario no tiene permisos para el modulo de contratos"));

            RepositorioDeReportes repositorio = new RepositorioDeReportes(Conexion());

            return repositorio.ExcelGenerado(tipo, dia, mes, anio, incluir_dependencias, fecha, id_area);
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }




    /*Excel DDJJ104*/
    [WebMethod]
    public string ExcelDDJJ104(string criterio, Usuario usuario)
    {
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);

        int mes = (int)((JValue)criterio_deserializado["mes"]);
        int anio = (int)((JValue)criterio_deserializado["anio"]);
        int id_area = (int)((JValue)criterio_deserializado["id_area"]);


        AreaParaDDJJ104[] areas = GetAreasParaDDJJ104(mes, anio, id_area, 0, usuario); //COMPLEMENTARIA=0, No filtra por Area.

        try
        {

            DataTable table_resumen = new DataTable();
            table_resumen.TableName = "Areas";

            table_resumen.Columns.Add("Areas");
            table_resumen.Columns.Add("Estado");

            foreach (var item in areas)
            {
                string ColEstado = "";
                string ColNombreArea = "";

                if (item.DDJJ != null)
                {
                    switch (item.DDJJ.Estado)
                    {
                        case 1:
                            ColEstado = "Impresa no recepcionada";
                            break;
                        case 2:
                            ColEstado = "Recepcionada";
                            break;

                        default:
                            ColEstado = "";
                            break;
                    }
                }
                else
                {
                    ColEstado = "Sin Generar";
                }


                //switch (item.Jerarquia)
                //{
                //    case 1000:	//Unidad Ministro
                //        ColNombreArea = item.Nombre;
                //        break;
                //    case 900:	//Secretaría
                //        ColNombreArea = "   " + item.Nombre;
                //        break;
                //    case 800:	//SubSecretaría
                //        ColNombreArea = "       " + item.Nombre;
                //        break;
                //    case 700:	//Dir. Nac/General
                //        ColNombreArea = "           " + item.Nombre;
                //        break;
                //    case 600:	//Dirección
                //        ColNombreArea = "               " + item.Nombre;
                //        break;
                //    case 500:   //Coordinación
                //        ColNombreArea = "                   " + item.Nombre;
                //        break;
                //    case 400:	//Departamento
                //        ColNombreArea = "                       " + item.Nombre;
                //        break;
                //    case 300:	//Lugar de Trabajo
                //        ColNombreArea = "                           " + item.Nombre;
                //        break;
                //}


                int EspaciosEnBlanco = (int)Math.Truncate(((decimal)(1000 - item.Jerarquia) / 20));
                string cadena = "";
                for (int i = 0; i < EspaciosEnBlanco; i++)
                {
                    cadena = cadena + " ";
                }
                ColNombreArea = cadena + item.Nombre;

                table_resumen.Rows.Add(ColNombreArea, ColEstado);
            }

            var workbook = new XLWorkbook();

            var dataTable_resumen = table_resumen;

            var ws = workbook.Worksheets.Add("DDJJ104");

            ws.Style.Font.FontSize = 11;
            ws.Style.Font.FontName = "Verdana";

            //ws.Column("A").Width = 115;
            //ws.Column("B").Width = 50;

            ws.Cell(1, 1).Value = "AREA:";
            ws.Cell(1, 2).Value = "ESTADO:";

            ws.Cell(1, 1).Style.Font.Bold = true;
            ws.Cell(1, 2).Style.Font.Bold = true;

            //ws.Cell(1, 2).Value = fecha.ToShortDateString();
            //ws.Cell(2, 2).Value = area.Nombre.ToUpper();

            //ws.Range(4, 1, 4, 3).Style.Fill.BackgroundColor = XLColor.FromArgb(79, 129, 189);
            //ws.Range(4, 1, 4, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

            //ws.Range(4, 1, 4, 3).Style.Font.FontColor = XLColor.White;

            //ws.Cell(4, 1).Value = "Informacion";
            //ws.Cell(4, 2).Value = "Cantidad";
            //ws.Cell(4, 3).Value = "Porcentaje %";

            var rangeWithData = ws.Cell(2, 1).InsertData(dataTable_resumen.AsEnumerable());

            //var lastCell = ws.LastCellUsed();
            //ws.Range(4, 1, lastCell.Address.RowNumber, lastCell.Address.ColumnNumber).Style.Border.InsideBorder = XLBorderStyleValues.Thin;
            //ws.Range(4, 1, lastCell.Address.RowNumber, lastCell.Address.ColumnNumber).Style.Border.OutsideBorder = XLBorderStyleValues.Medium;


            using (var ms = new MemoryStream())
            {
                workbook.SaveAs(ms);
                return Convert.ToBase64String(ms.ToArray());
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    /**/


    [WebMethod]
    public Area[] GetAreas()
    {
        //var repositorio = new RepositorioDeAreas(Conexion());

        var repositorio = new RepositorioDeOrganigrama(Conexion());
        List<Area> areas = repositorio.GetOrganigrama().ObtenerAreas(true);

        Area[] returnAreas = new Area[areas.Count];

        for (int i = 0; i < areas.Count; i++)
        {
            returnAreas[i] = areas[i];
        }
        return returnAreas;
    }

    [WebMethod]
    public AreaArbolDTO GetArbolOrganigrama()
    {
        //var repositorio = new RepositorioDeAreas(Conexion());

        var repositorio = RepositorioDeOrganigrama.NuevoRepositorioOrganigrama(Conexion());
        return repositorio.GetOrganigrama().GetArbol();
    }

    [WebMethod]
    public Area GetAreaSuperiorA(Area unArea)
    {
        RepositorioDeOrganigrama repo = new RepositorioDeOrganigrama(Conexion());

        var organigrama = repo.GetOrganigrama();

        var area = organigrama.AreaSuperiorDe(unArea);
        while (!area.PresentaDDJJ)
            area = organigrama.AreaSuperiorDe(area);

        return area;
    }

    [WebMethod]
    public Area GetAreaPreviaDe(ComisionDeServicio una_comision)
    {
        var repositorio = new RepositorioDeComisionesDeServicio(Conexion());
        return repositorio.GetAreaPreviaDe(una_comision);
    }

    [WebMethod]
    public Area RecargarArea(Area unArea)
    {
        var repositorio = RepositorioDeAreas();
        repositorio.ReloadArea(unArea);
        return unArea;
    }

    [WebMethod]
    public SaldoLicencia GetSaldoLicencia(Persona unaPersona, ConceptoDeLicencia concepto)
    {
        var concepto_subclasificado = concepto.InstanciaDeSubclase();

        DateTime fecha_de_consulta = DateTime.Today;

        ServicioDeLicencias servicioLicencias = new ServicioDeLicencias(RepoLicencias());

        SaldoLicencia saldo = servicioLicencias.GetSaldoLicencia(unaPersona, concepto_subclasificado, fecha_de_consulta, RepositorioDePersonas());

        return saldo;
    }

    [WebMethod]
    public int GetSegmentosUtilizados(Persona unaPersona, DateTime desde)
    {

        int anio = desde.Year;
        if (desde.Month == 12)
        {
            anio = anio + 1; //Porque cambia el período de licencias desde el 1ero de diciembre
        }

        ServicioDeLicencias servicioLicencias = new ServicioDeLicencias(RepoLicencias());

        return servicioLicencias.GetSegmentosUtilizados(unaPersona.Documento, anio);


    }

    [WebMethod]
    public SaldoLicencia GetSaldoLicencia14FoH(Persona unaPersona, ConceptoDeLicencia concepto, DateTime fecha)
    {

        return RepoLicencias().CargarSaldoLicencia14FoHDe(concepto, unaPersona, fecha);


    }

    [WebMethod]
    public bool DiasHabilitadosEntreFechas(DateTime desde, DateTime hasta, int idconcepto)
    {
        RepositorioLicencias repositorio = new RepositorioLicencias(Conexion());

        return repositorio.DiasHabilitadosEntreFechas(desde, hasta, idconcepto);

    }

    [WebMethod]
    public SaldoLicencia GetSaldoLicenciaPlano(int documento, int idConcepto)
    {
        Persona persona = new Persona();
        SaldoLicencia saldo;
        persona.Documento = documento;
        ConceptoDeLicencia concepto = new ConceptoDeLicencia();
        concepto.Id = idConcepto;
        saldo = this.GetSaldoLicencia(persona, concepto);
        return saldo;
    }

    [WebMethod]
    public string CargarLicencia(Licencia unaLicencia)
    {
        RepositorioLicencias repositorio = new RepositorioLicencias(Conexion());
        if (repositorio.GetLicenciasQueSePisanCon(unaLicencia))
            return "Ya existe una licencia en el periodo especificado";
        if (repositorio.GetSolicitudesQueSePisanCon(unaLicencia))
            return "Ya existe una solicitud de licencia en el periodo especificado";

        return repositorio.Guardar(unaLicencia);
    }

    [WebMethod]
    public GrupoConceptosDeLicencia[] GetGruposConceptosLicencia()
    {
        GrupoConceptosDeLicencia grupo = new GrupoConceptosDeLicencia();
        RepositorioConceptosDeLicencia repositorio = new RepositorioConceptosDeLicencia();
        List<GrupoConceptosDeLicencia> grupos = repositorio.GetGruposConceptosLicencia();



        GrupoConceptosDeLicencia[] returnGrupos = new GrupoConceptosDeLicencia[grupos.Count];




        for (int i = 0; i < grupos.Count; i++)
        {
            returnGrupos[i] = grupos[i];
        }
        return returnGrupos;
    }

    [WebMethod]
    public Persona[] GetPersonas(Area unArea, int imprimeplanillafirma)
    {

        RepositorioPersonas repositorio = new RepositorioPersonas();
        List<Persona> personas = repositorio.GetPersonasDelArea(unArea, imprimeplanillafirma);
        Persona[] returnPersonas = new Persona[personas.Count];

        for (int i = 0; i < personas.Count; i++)
        {
            returnPersonas[i] = personas[i];
        }
        return returnPersonas;
    }


    [WebMethod]
    public Persona[] GetPersonasACargo(Area unArea)
    {

        RepositorioPersonas repositorio = new RepositorioPersonas();
        List<Persona> personas = repositorio.GetPersonasDelAreaACargo(unArea);
        Persona[] returnPersonas = new Persona[personas.Count];

        for (int i = 0; i < personas.Count; i++)
        {
            returnPersonas[i] = personas[i];
        }
        return returnPersonas;
    }


    [WebMethod]
    public Persona[] GetAusentesEntreFechasPara(Persona[] personas, DateTime desde, DateTime hasta)
    {
        RepositorioLicencias repositorio = new RepositorioLicencias(Conexion());

        return repositorio.GetAusentesEntreFechasPara(personas.ToList(), desde, hasta).ToArray();
    }


    [WebMethod]
    public void EliminarLicenciaPendienteAprobacion(int id)
    {
        RepositorioLicencias repositorio = new RepositorioLicencias(Conexion());

        repositorio.EliminarLicenciaPendienteAprobacion(id);
    }



    [WebMethod]
    public Persona[] GetPasesEntreFechasPara(Persona[] personas, DateTime desde, DateTime hasta)
    {
        RepositorioLicencias repositorio = new RepositorioLicencias(Conexion());

        return repositorio.GetPasesEntreFechasPara(personas.ToList(), desde, hasta).ToArray();
    }

    #endregion

    #region viaticos

    [WebMethod]
    public void AltaDeComisionesDeServicio(ComisionDeServicio unaComision)
    {
        var repositorio = new RepositorioDeComisionesDeServicio(Conexion());
        List<ComisionDeServicio> comisiones = new List<ComisionDeServicio>();

        comisiones.Add(unaComision);
        repositorio.GuardarComisionesDeServicio(comisiones);
    }


    [WebMethod]
    public void AltaDeComisionDeServicio(ComisionDeServicio unaComision)
    {
        var repositorio = new RepositorioDeComisionesDeServicio(Conexion());

        repositorio.GuardarComisionDeServicio(unaComision);
    }

    [WebMethod]
    public Zona[] ZonasDeViaticos()
    {
        var repositorio = new RepositorioZonas(Conexion());

        List<Zona> zonas = repositorio.GetTodasLasZonas();
        Zona[] dtos = new Zona[zonas.Count];

        for (int i = 0; i < zonas.Count; i++)
        {
            dtos[i] = zonas[i];
        }
        return dtos;
    }

    [WebMethod]
    public Zona GetZonaDe(Provincia provincia)
    {
        var repositorio = new RepositorioZonas(Conexion());
        Zona zona = repositorio.GetZonaFromProvincia(provincia);

        return zona;
    }


    [WebMethod]
    public MedioDeTransporte[] MediosDeTransporte()
    {
        RepositorioMediosDeTransporte repositorio = new RepositorioMediosDeTransporte();
        List<MedioDeTransporte> medios = repositorio.GetTodosLosMediosDeTransporte();
        MedioDeTransporte[] dtos = new MedioDeTransporte[medios.Count];

        for (int i = 0; i < medios.Count; i++)
        {
            dtos[i] = medios[i];
        }
        return dtos;
    }

    [WebMethod]
    public MedioDePago[] MediosDePago()
    {
        RepositorioMediosDePago repositorio = new RepositorioMediosDePago();
        List<MedioDePago> medios = repositorio.GetTodosLosMediosDePago();
        MedioDePago[] dtos = new MedioDePago[medios.Count];

        for (int i = 0; i < medios.Count; i++)
        {
            dtos[i] = medios[i];
        }
        return dtos;
    }

    [WebMethod]
    public string CargarLicenciaPlana(int documentoAgente, int idConcepto, string LicenciaDesde, string LicenciaHasta, int idArea, int idUsuarioAuditoria)
    {
        Licencia licencia = new Licencia();
        licencia.Persona = new Persona();
        licencia.Persona.Documento = documentoAgente;
        licencia.Concepto = new ConceptoDeLicencia();
        licencia.Concepto.Id = idConcepto;
        licencia.Desde = DateTime.Parse(LicenciaDesde);
        licencia.Hasta = DateTime.Parse(LicenciaHasta);
        licencia.Auditoria = new Auditoria();
        licencia.Auditoria.UsuarioDeCarga = new Usuario();
        licencia.Auditoria.UsuarioDeCarga.Id = idUsuarioAuditoria;
        licencia.Persona.Area = new Area();
        licencia.Persona.Area.Id = idArea;

        return this.CargarLicencia(licencia);
    }

    //FC: implementar para traer las listas de solicitudes
    [WebMethod]
    public ComisionDeServicio[] GetTodasLasComisionesDeServicios()
    {

        var repositorio = new RepositorioDeComisionesDeServicio(Conexion());

        return repositorio.ObtenerTodosLosViaticos().ToArray();
    }

    [WebMethod]
    public ComisionDeServicio[] GetComisionesDeServicioPorUsuario(Usuario usuario)
    {
        var repositorio = new RepositorioDeComisionesDeServicio(Conexion());
        //Se puede mejorar
        var lista_de_todos_los_viaticos = repositorio.ObtenerTodosLosViaticos();
        var lista_viaticos_usuario = new List<ComisionDeServicio>();
        Autorizador().AreasAdministradasPor(usuario).ForEach(a => lista_viaticos_usuario.AddRange(lista_de_todos_los_viaticos.FindAll(v => v.TransicionesRealizadas.Select(t => t.AreaOrigen.Id).Contains(a.Id) ||
                                                                                                            v.TransicionesRealizadas.Select(t => t.AreaDestino.Id).Contains(a.Id))));

        return lista_viaticos_usuario.Distinct().ToArray();
    }

    [WebMethod]
    public void ReasignarComision(ComisionDeServicio una_comision, Int32 id_area, Int32 id_accion, String comentarios)
    {
        var repo_viaticos = new RepositorioDeComisionesDeServicio(Conexion());
        var repo_areas = new RepositorioDeOrganigrama(Conexion());
        //Se cambio el Repositorio de Áreas por el Repositorio de Organigrama para refactorizar
        var area = repo_areas.GetAreaById(id_area);
        //Se puede mejorar
        repo_viaticos.ReasignarComision(una_comision, area, id_accion, comentarios);
    }

    [WebMethod]
    public List<AccionDeTransicion> GetAccionesDeTransicion()
    {
        var repositorio = new RepositorioDeAccionesDeTransicion();

        var acciones = repositorio.GetAccionesDeTransicion();
        return acciones;
    }

    [WebMethod]
    public List<AccionDeTransicion> GetAccionesDeTransicionParaUnViaticoEnCirculacion()
    {
        var repositorio = new RepositorioDeAccionesDeTransicion();

        var acciones = repositorio.GetAccionesDeTransicionParaUnViaticoEnCirculacion();
        return acciones;
    }

    [WebMethod]
    public Decimal CalcularViaticoPara(Estadia estadia, Persona persona)
    {
        RepositorioCalculadorDeViatico repo = new RepositorioCalculadorDeViatico();
        RepositorioTipoDeViatico repo_tipoViatico = new RepositorioTipoDeViatico();

        //si no encuentra un tipo de viatico rompe...o.O
        persona.TipoDeViatico = repo_tipoViatico.GetTipoDeViaticoDe(persona);

        return repo.GetValorDeViatico(estadia, persona);

    }

    [WebMethod]
    public float CalcularDiasPara(Estadia estadia)
    {
        CalculadorDeDias calculadorDeDias = new CalculadorDeDias();

        return calculadorDeDias.CalcularDiasDe(estadia);

    }



    [WebMethod]
    public Persona CompletarDatosDeContratacion(Persona persona)
    {
        RepositorioTipoDeViatico repo_tipoViatico = new RepositorioTipoDeViatico();
        return repo_tipoViatico.GetNivelGradoDeContratacionDe(persona);
    }

    [WebMethod]
    public Area SiguientePasoDelCircuitoDelArea(Area area_actual)
    {
        RepositorioDeOrganigrama repo = new RepositorioDeOrganigrama(Conexion());
        var organigrama = repo.GetOrganigrama();
        var excepciones = repo.ExcepcionesDeCircuitoViaticos();
        var area_de_viaticos = new Area(1073, "Área de Viáticos y Pasajes", true);
        var circuito = new CircuitoDeAprobacionDeViatico(organigrama, excepciones, area_de_viaticos);
        return circuito.SiguienteAreaDe(area_actual);
    }

    [WebMethod]
    public bool PuedeGuardarseComision(ComisionDeServicio comision)
    {
        return comision.PuedeGuardarse();
    }

    [WebMethod]
    public List<List<string>> GetComisionesPorFiltro(List<Area> lista_areas, List<Provincia> lista_provincias, DateTime fechaDesde, DateTime fechaHasta, List<ComisionDeServicio> comisiones)
    {
        var generadorDeReporte = new GeneradorDeReportes();

        var filtro_area = new FiltroDeComisiones(lista => lista.FindAll(c => c.TuAreaCreadoraEstaEn(lista_areas)));
        var filtro_provincia = new FiltroDeComisiones(lista => lista.FindAll(c => c.Estadias.Any(e => lista_provincias.Any(p => p.Id == e.Provincia.Id))));
        var filtro_periodo = new FiltroDeComisiones(lista => lista.FindAll(c => c.TenesAlgunaEstadiaEnElPeriodo(fechaDesde, fechaHasta)));
        List<FiltroDeComisiones> filtros = new List<FiltroDeComisiones>() { filtro_area, filtro_provincia, filtro_periodo };

        return generadorDeReporte.ViaticoPorAreasPorProvincia(filtros, comisiones, lista_provincias);

    }

    //El web service acepta metodos sobrecargados??
    [WebMethod]
    public List<List<string>> GetComisionesPorProvincia(List<Provincia> lista_provincias, DateTime fechaDesde, DateTime fechaHasta, List<ComisionDeServicio> comisiones)
    {
        var generadorDeReporte = new GeneradorDeReportes();


        var filtro_provincia = new FiltroDeComisiones(lista => lista.FindAll(c => c.Estadias.Any(e => lista_provincias.Any(p => p.Id == e.Provincia.Id))));
        var filtro_periodo = new FiltroDeComisiones(lista => lista.FindAll(c => c.TenesAlgunaEstadiaEnElPeriodo(fechaDesde, fechaHasta)));
        List<FiltroDeComisiones> filtros = new List<FiltroDeComisiones>() { filtro_provincia, filtro_periodo };

        return generadorDeReporte.ViaticosPorProvincia(filtros, comisiones, lista_provincias);

    }

    [WebMethod]
    public List<List<string>> GetComisionesPorAgente(List<Area> areas_autorizadas, Persona persona, DateTime fechaDesde, DateTime fechaHasta, List<ComisionDeServicio> comisiones)
    {
        var generadorDeReporte = new GeneradorDeReportes();

        var filtro_area = new FiltroDeComisiones(lista => lista.FindAll(c => c.TuAreaCreadoraEstaEn(areas_autorizadas)));
        var filtro_persona = new FiltroDeComisiones(lista => lista.FindAll(c => c.Persona.Documento == persona.Documento));
        var filtro_periodo = new FiltroDeComisiones(lista => lista.FindAll(c => c.TenesAlgunaEstadiaEnElPeriodo(fechaDesde, fechaHasta)));
        List<FiltroDeComisiones> filtros = new List<FiltroDeComisiones>() { filtro_area, filtro_persona, filtro_periodo };

        return generadorDeReporte.ViaticosDePersonaPorAreas(filtros, comisiones);

    }

    #endregion

    #region sicoi


    //[WebMethod]
    //public string GuardarDocumento_Ajax(string documento_DTO, Usuario usuario)
    //{
    //    var propiedades_doc = JsonConvert.DeserializeObject<Dictionary<String, Object>>(documento_DTO);
    //    var documento = new Documento();
    //    documento.extracto = (string)propiedades_doc["extracto"];
    //    documento.tipoDeDocumento = new TipoDeDocumentoSICOI(int.Parse(propiedades_doc["tipo"].ToString()), "");
    //    documento.categoriaDeDocumento = new CategoriaDeDocumentoSICOI(int.Parse(propiedades_doc["categoria"].ToString()), "");
    //    documento.numero = (string)propiedades_doc["numero"];
    //    documento.comentarios = (string)propiedades_doc["comentarios"];

    //    this.GuardarDocumento(documento, 
    //        int.Parse(propiedades_doc["id_area_origen"].ToString()), 
    //        int.Parse(propiedades_doc["id_area_actual"].ToString()),
    //        usuario);
    //    try
    //    {
    //        var id_area_destino = int.Parse(propiedades_doc["id_area_destino"].ToString());
    //        if (id_area_destino >= 0) this.CrearTransicionFuturaParaDocumento(documento.Id, id_area_destino, usuario);
    //    }
    //    catch (Exception e) { }
    //    return JsonConvert.SerializeObject(new {ticket = documento.ticket});
    //}

    [WebMethod]
    public string GuardarDocumento_Ajax(string documento_JSON, Usuario usuario)
    {
        try
        {
            var documento_dto_alta = JsonConvert.DeserializeObject<Documento_DTO_Alta>(documento_JSON);
            var documento = documento_dto_alta.toDocumento();

            this.GuardarDocumento(documento, int.Parse(documento_dto_alta.id_area_origen), int.Parse(documento_dto_alta.id_area_actual), usuario);


            int id_area_destino = -1;
            if (documento_dto_alta.id_area_destino != "")
            {
                id_area_destino = int.Parse(documento_dto_alta.id_area_destino);
                if (id_area_destino >= 0) this.CrearTransicionFuturaParaDocumento(documento.Id, id_area_destino, usuario);
            }

            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "altaDeDocumento.ok",
                ticket = documento.ticket
            });

        }
        catch (Exception e)
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "altaDeDocumento.error",
                error = e.Message
            });
        }
    }

    [WebMethod]
    public Documento GuardarDocumento(Documento un_documento, int id_area_creadora, int id_area_actual, Usuario usuario)
    {
        var conexion = Conexion();
        var repo_documentos = new RepositorioDeDocumentos(conexion);
        var repo_organigrama = RepositorioDeOrganigrama.NuevoRepositorioOrganigrama(conexion);
        var repo_transiciones = new RepositorioMensajeria(conexion, repo_documentos, repo_organigrama);
        var repo_usuarios = new RepositorioUsuarios(conexion);
        var mensajeria = repo_transiciones.GetMensajeria();

        repo_documentos.GuardarDocumento(un_documento, usuario);

        mensajeria.SeEnvioDirectamente(un_documento, repo_organigrama.GetAreaById(id_area_creadora), repo_organigrama.GetAreaById(id_area_actual), DateTime.Now);

        repo_transiciones.GuardarTransicionesDe(mensajeria);
        return un_documento;
    }

    [WebMethod]
    public string GuardarCambiosEnDocumento(int id_documento, int id_area_destino, string comentario, Usuario usuario)
    {
        try
        {
            var conexion = Conexion();
            var repo_documentos = new RepositorioDeDocumentos(conexion);
            var repo_organigrama = new RepositorioDeOrganigrama(conexion);
            var repo_transiciones = new RepositorioMensajeria(conexion, repo_documentos, repo_organigrama);
            var mensajeria = repo_transiciones.GetMensajeria();

            var un_documento = repo_documentos.GetDocumentoPorId(id_documento);
            un_documento.comentarios = comentario;
            repo_documentos.UpdateDocumento(un_documento, usuario);

            var area_destino = new Area();

            if (id_area_destino != -1)
            {
                area_destino = repo_organigrama.GetAreaById(id_area_destino);
                mensajeria.SeEnviaAFuturo(un_documento, Autorizador().AreasAdministradasPor(usuario)[0], area_destino);
            }
            else
            {
                mensajeria.YaNoSeEnviaAFuturo(un_documento);
                repo_transiciones.BorrarTransicionFuturaPara(un_documento);
            }

            repo_transiciones.GuardarTransicionesDe(mensajeria);


            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "guardarDocumento.ok",
                documento = new DocumentoDTO(un_documento, mensajeria)
            });

        }
        catch (Exception e)
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "guardarDocumento.error",
                error = e.Message
            });
        }
    }

    [WebMethod]
    public Documento CrearTransicionFuturaParaDocumento(int id_documento, int id_area_destino, Usuario usuario)
    {
        var conexion = Conexion();
        var repo_documentos = new RepositorioDeDocumentos(conexion);
        var repo_organigrama = new RepositorioDeOrganigrama(conexion);
        var repo_transiciones = new RepositorioMensajeria(conexion, repo_documentos, repo_organigrama);
        var mensajeria = repo_transiciones.GetMensajeria();

        var un_documento = repo_documentos.GetDocumentoPorId(id_documento);
        var area_destino = repo_organigrama.GetAreaById(id_area_destino);

        mensajeria.SeEnviaAFuturo(un_documento, Autorizador().AreasAdministradasPor(usuario)[0], area_destino);

        repo_transiciones.GuardarTransicionesDe(mensajeria);
        return un_documento;
    }

    [WebMethod]
    public List<Area> AreasCompletas()
    {

        List<Area> areas = new List<Area>();
        var repositorio = RepositorioDeAreas();

        return areas = repositorio.GetTodasLasAreasCompletas();
    }

    [WebMethod]
    public string AreasFormalesConInformales_JSON()
    {
        var repositorio = new RepositorioDeOrganigrama(Conexion());
        var areasFormales = repositorio.GetOrganigrama().ObtenerAreas(true);
        var areasFormales_dto = new List<Object>();
        areasFormales.ForEach(delegate(Area a)
        {
            areasFormales_dto.Add(new AreaDTO(a));
        });
        return JsonConvert.SerializeObject(areasFormales_dto);
    }

    [WebMethod]
    public List<Area> AreasInferioresDe(Area area)
    {
        List<Area> areas = new List<Area>();
        var repositorio = new RepositorioDeOrganigrama(Conexion());
        return areas = repositorio.GetOrganigrama().GetAreasInferioresDelArea(area);
    }

    [WebMethod]
    public Documento[] GetTodosLosDocumentos()
    {
        var repositorio = new RepositorioDeDocumentos(Conexion());
        return repositorio.GetTodosLosDocumentos().ToArray();
    }

    [WebMethod]
    public TipoDeDocumentoSICOI[] TiposDeDocumentosSICOI()
    {
        var repositorio = new RepositorioDeDocumentos(Conexion());
        return repositorio.GetTiposDeDocumentos().ToArray();
    }

    [WebMethod]
    public CategoriaDeDocumentoSICOI[] CategoriasDocumentosSICOI()
    {
        var repositorio = new RepositorioDeDocumentos(Conexion());
        var categorias_ordenadas = repositorio.GetCategoriasDeDocumentos();
        categorias_ordenadas.Sort(delegate(CategoriaDeDocumentoSICOI c1, CategoriaDeDocumentoSICOI c2)
            {
                return c1.descripcion.CompareTo(c2.descripcion);
            }
        );
        return categorias_ordenadas.ToArray();
    }

    [WebMethod]
    public List<DocumentoDTO> GetDocumentosFiltrados(String filtros)
    {
        var filtrosDesSerializados = desSerializadorDeFiltros().DesSerializarFiltros(filtros);
        var documentos = RepositorioDocumentos().GetDocumentosFiltrados(filtrosDesSerializados);
        var documentos_dto = new List<DocumentoDTO>();
        var mensajeria = Mensajeria();
        if (documentos.Count > 50) documentos.RemoveRange(51, documentos.Count - 51);
        documentos.ForEach(delegate(Documento doc)
        {
            documentos_dto.Add(new DocumentoDTO(doc, mensajeria));
        });

        return documentos_dto;
    }

    [WebMethod]
    public string GetDocumentosEnAlerta()
    {
        var documentos = DocumentosEnAlerta();
        var documentos_dto = new List<Object>();
        var mensajeria = Mensajeria();

        documentos.ForEach(delegate(Documento doc)
        {
            documentos_dto.Add(new DocumentoDTO(doc, mensajeria));
        });
        return JsonConvert.SerializeObject(documentos_dto);
    }

    private List<Documento> DocumentosEnAlerta()
    {
        var alertas = new RepositorioDeAlertas(Mensajeria()).GetAlertas();
        var documentos = new List<Documento>();

        alertas.ForEach(a => documentos = RepositorioDocumentos().GetDocumentosFiltrados(a));

        documentos = documentos.Distinct().ToList();
        return documentos;
    }

    [WebMethod]
    public Boolean HayDocumentosEnAlerta()
    {
        return DocumentosEnAlerta().Any();
    }

    [WebMethod]
    public void IniciarServicioDeAlertas(string HtmlHead, string HtmlBody)
    {
        reportadorDeDocumentosEnAlerta().start(HtmlHead, HtmlBody);
    }

    [WebMethod]
    public void DetenerServicioDeAlertas()
    {
        reportadorDeDocumentosEnAlerta().stop();
    }

    [WebMethod]
    public string EstadoServicioDeAlertas()
    {
        return reportadorDeDocumentosEnAlerta().estado;
    }

    private ReportadorDeDocumentosEnAlerta reportadorDeDocumentosEnAlerta()
    {
        if (Application["reportadorDeDocumentosEnAlerta"] == null)
        {
            var filtros = new List<FiltroDeDocumentos>();
            filtros.Add(new FiltroDeDocumentosPorAreaActual(Mensajeria(), 1));
            filtros.Add(new FiltroDeDocumentosPorTipoDocumento(39));
            var enviador = new EnviadorDeMails();
            Application["reportadorDeDocumentosEnAlerta"] = new ReportadorDeDocumentosEnAlerta(filtros, "arielzambrano@gmail.com", enviador, RepositorioDocumentos());
        }
        return (ReportadorDeDocumentosEnAlerta)Application["reportadorDeDocumentosEnAlerta"];
    }

    private DesSerializadorDeFiltros desSerializadorDeFiltros()
    {
        return new DesSerializadorDeFiltros(Mensajeria());
    }

    public RepositorioDeDocumentos RepositorioDocumentos()
    {
        return new RepositorioDeDocumentos(Conexion());
    }

    public ConexionBDSQL Conexion()
    {
        return new ConexionBDSQL(ConfigurationManager.ConnectionStrings["SQLConection"].ConnectionString);
    }

    public RepositorioMensajeria RepoMensajeria()
    {
        var conexion = Conexion();
        var repo_documentos = new RepositorioDeDocumentos(conexion);
        var repo_organigrama = RepositorioDeOrganigrama.NuevoRepositorioOrganigrama(conexion);//new RepositorioDeOrganigrama(conexion);
        return new RepositorioMensajeria(conexion, repo_documentos, repo_organigrama);
    }

    public Mensajeria Mensajeria()
    {
        var repo_transiciones = RepoMensajeria();
        return repo_transiciones.GetMensajeria();
    }

    [WebMethod]
    public string TransicionarDocumento(int id_documento, int id_area_origen, int id_area_destino)
    {
        try
        {
            var documento = RepositorioDocumentos().GetTodosLosDocumentos().Find(d => d.Id == id_documento);
            var area_origen = new RepositorioDeOrganigrama(Conexion()).GetAreaById(id_area_origen);
            var area_destino = new RepositorioDeOrganigrama(Conexion()).GetAreaById(id_area_destino);
            var mensajeria = Mensajeria();
            mensajeria.SeEnvioDirectamente(documento, area_origen, area_destino, DateTime.Now);
            RepoMensajeria().GuardarTransicionesDe(mensajeria);
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "envioDeDocumento.ok",
                documento = new DocumentoDTO(documento, mensajeria)
            });
        }
        catch (Exception e)
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "envioDeDocumento.error",
                error = e.Message
            });
        }
    }

    [WebMethod]
    public string TransicionarDocumentoConAreaIntermedia(int id_documento, int id_area_origen, int id_area_intermedia, int id_area_destino)
    {
        try
        {
            var documento = RepositorioDocumentos().GetTodosLosDocumentos().Find(d => d.Id == id_documento);
            var area_origen = new RepositorioDeOrganigrama(Conexion()).GetAreaById(id_area_origen);
            var area_intermedia = new RepositorioDeOrganigrama(Conexion()).GetAreaById(id_area_intermedia);
            var area_destino = new RepositorioDeOrganigrama(Conexion()).GetAreaById(id_area_destino);
            var mensajeria = Mensajeria();
            mensajeria.TransicionarConAreaIntermedia(documento, area_origen, area_intermedia, area_destino, DateTime.Now);
            RepoMensajeria().GuardarTransicionesDe(mensajeria);
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "envioDeDocumento.ok",
                documento = new DocumentoDTO(documento, mensajeria)
            });
        }
        catch (Exception e)
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "envioDeDocumento.error",
                error = e.Message
            });
        }
    }

    [WebMethod]
    public Area EstaEnElArea(Documento documento)
    {
        var mensajeria = Mensajeria();
        return mensajeria.EstaEnElArea(documento);
    }

    #endregion

    #region sacc
    //////////////////////////
    [WebMethod]
    public CalendarioDeCurso GetCalendarioDeCurso(Curso un_curso)
    {
        var manager_de_calendarios = new ManagerDeCalendarios(new CalendarioDeFeriados());
        manager_de_calendarios.AgregarCalendarioPara(un_curso);
        return manager_de_calendarios.CalendarioPara(un_curso);

    }


    public PlanillaMensual GetPlanillaMensual(Curso un_curso, DateTime fecha_desde, DateTime fecha_hasta, CalendarioDeCurso calendario)
    {
        return new GeneradorDePlanillas().GenerarPlanillaMensualPara(un_curso, fecha_desde, fecha_hasta, calendario);
    }

    [WebMethod]
    public MesDto[] GetMesesCursoDto(int id_curso, Usuario usuario)
    {
        var curso = RepositorioDeCursos().GetCursoById(id_curso);
        var mes_inicio = curso.FechaInicio.Month;
        var mes_fin = curso.FechaFin.Month;
        List<MesDto> meses = new List<MesDto>();
        for (int i = mes_inicio; i <= mes_fin; i++)
        {
            meses.Add(new MesDto() { Mes = i, NombreMes = DateTimeFormatInfo.CurrentInfo.GetMonthName(i) });
        }
        return meses.ToArray();
    }

    [WebMethod]
    public PlanillaAsistenciasDto GuardarAsistencias(AcumuladorDto[] asistencias_nuevas_dto, AcumuladorDto[] asistencias_originales_dto, Usuario usuarioLogueado)
    {
        List<AcumuladorAsistencia> asistencias_nuevas = new List<AcumuladorAsistencia>();
        List<AcumuladorAsistencia> asistencias_originales = new List<AcumuladorAsistencia>();

        foreach (var a in asistencias_nuevas_dto)
        {
            if (a.Valor == "-" || a.Valor == "")
                asistencias_nuevas.Add(new AsistenciaDiaNoCursado(a.Id, a.Valor, 0, a.Fecha, a.IdAlumno, a.IdCurso));
            else
                asistencias_nuevas.Add(new AsistenciaDiaCursado(a.Id, a.Valor, 0, a.Fecha, a.IdAlumno, a.IdCurso));
        }
        foreach (var a in asistencias_originales_dto)
        {
            if (a.Valor == "-" || a.Valor == "")
                asistencias_originales.Add(new AsistenciaDiaNoCursado(a.Id, a.Valor, 0, a.Fecha, a.IdAlumno, a.IdCurso));
            else
                asistencias_originales.Add(new AsistenciaDiaCursado(a.Id, a.Valor, 0, a.Fecha, a.IdAlumno, a.IdCurso));
        }
        RepoAsistencias().GuardarAsistencias(asistencias_nuevas, asistencias_originales, usuarioLogueado);
        return null;
    }



    [WebMethod]
    public PlanillaAsistenciasDto GetPlanillaAsistencias(int id_curso, DateTime fecha_desde, DateTime fecha_hasta, Usuario usuario)
    {
        var detalle_asistencias = new List<DetalleAsistenciasDto>();
        var horas_catedra = 0;
        var curso = RepositorioDeCursos().GetCursoById(id_curso);
        var organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();

        DateTime fecha_inicio_planilla = curso.FechaInicio > fecha_desde ? curso.FechaInicio : fecha_desde;
        if (fecha_hasta == DateTime.MinValue)
            fecha_hasta = new DateTime(fecha_inicio_planilla.Year, fecha_inicio_planilla.Month, DateTime.DaysInMonth(fecha_inicio_planilla.Year, fecha_inicio_planilla.Month));
        DateTime fecha_fin_planilla = curso.FechaFin < fecha_hasta ? curso.FechaFin : fecha_hasta;

        var calendario = GetCalendarioDeCurso(curso);
        var planilla_mensual = GetPlanillaMensual(curso, fecha_inicio_planilla, fecha_fin_planilla, calendario);
        var dias_planilla = planilla_mensual.GetDiasDeCursadaEntre(fecha_inicio_planilla, fecha_fin_planilla);
        var dias_curso = planilla_mensual.GetDiasDeCursadaEntre(curso.FechaInicio, curso.FechaFin);

        var asistencias = RepoAsistencias().GetAsistencias();
        var alumnos = curso.Alumnos();
        alumnos = FiltrarAlumnosPorUsuarioLogueado(usuario, alumnos, organigrama, new AutorizadorSacc(Autorizador()));

        foreach (var a in alumnos)
        {
            int asist_per = 0;
            int inasist_per = 0;
            int asist_acum = 0;
            int inasist_acum = 0;
            var asist_dto = new List<AcumuladorDto>();
            //ver asistencias a dto
            var asist = asistencias.FindAll(x => x.IdCurso.Equals(curso.Id) && x.IdAlumno.Equals(a.Id) && x.Fecha >= fecha_inicio_planilla && x.Fecha <= fecha_fin_planilla);
            var asist_totales = asistencias.FindAll(x => x.IdCurso.Equals(curso.Id) && x.IdAlumno.Equals(a.Id) && x.Fecha >= curso.FechaInicio && x.Fecha <= fecha_hasta);
            foreach (var item in asist)
            {
                asist_per = item.AcumularHorasAsistidas(asist_per);
                inasist_per = item.AcumularHorasNoAsistidas(inasist_per);
                //
                asist_dto.Add(new AcumuladorDto() { Id = item.Id, Fecha = item.Fecha, IdAlumno = item.IdAlumno, IdCurso = item.IdCurso, Valor = item.Valor });
            }
            foreach (var item in asist_totales)
            {
                asist_acum = item.AcumularHorasAsistidas(asist_acum);
                inasist_acum = item.AcumularHorasNoAsistidas(inasist_acum);
            }
            var detalle_asist = new DetalleAsistenciasDto()
            {
                IdAlumno = a.Id,
                IdCurso = curso.Id,
                Asistencias = asist_dto.ToArray(),
                AsistenciasPeriodo = asist_per,
                InasistenciasPeriodo = inasist_per,
                AsistenciasTotal = asist_acum,
                InasistenciasTotal = inasist_acum
            };
            detalle_asistencias.Add(detalle_asist);
        }

        var horarios_de_cursada = curso.GetHorariosDeCursada();
        var fechas_planilla = new List<FechaDeCursada>();
        dias_curso.ForEach(d => horas_catedra += horarios_de_cursada.Find(h => h.Dia.Equals(d.DayOfWeek)).HorasCatedra);

        dias_planilla.ForEach(d =>
        {
            var fecha_cursada = new FechaDeCursada()
            {
                Dia = d.ToString("dd"),
                NombreDia = d.ToString("ddd"),
                Fecha = d,
                HorasCatedra = planilla_mensual.Curso.GetHorariosDeCursada().Find(h => h.Dia == d.DayOfWeek).HorasCatedra
            };
            fechas_planilla.Add(fecha_cursada);
        });


        var planilla_asistencias_dto = new PlanillaAsistenciasDto()
        {
            Docente = curso.Docente.Nombre + " " + curso.Docente.Apellido,
            Alumnos = alumnos.ToArray(),
            FechasDeCursada = fechas_planilla.ToArray(),
            HorasCatedra = horas_catedra,
            DetalleAsistenciasPorAlumno = detalle_asistencias.ToArray(),
            CodigoError = 0,
            MensajeError = "",
            Observaciones = curso.Observaciones
        };
        return planilla_asistencias_dto;
    }

    [WebMethod]
    public int GetMaxHorasCatedraCurso(Usuario usuario)
    {
        return RepositorioDeCursos().GetMaxHorasCatedraCurso();
    }

    [WebMethod]
    public string Personas()
    {
        var personas = RepoPersonas().GetPersonas();

        var persoas_dto = new List<Object>();

        if (personas.Count() > 0)
        {
            personas.ForEach(delegate(Persona persona)
            {
                Inasistencia inasistenciadto = new Inasistencia();
                inasistenciadto.Aprobada = persona.Inasistencias.First().Aprobada;
                inasistenciadto.Descripcion = persona.Inasistencias.First().Descripcion;
                inasistenciadto.Desde = persona.Inasistencias.First().Desde;
                inasistenciadto.Hasta = persona.Inasistencias.First().Hasta;
                inasistenciadto.Estado = persona.Inasistencias.First().Estado;

                persoas_dto.Add(new
                {
                    label = persona.Apellido + ", " + persona.Nombre + " (DNI: " + persona.Documento + ")",
                    value = persona.Documento.ToString(),
                    nombre = persona.Apellido + ", " + persona.Nombre,
                    apellido = persona.Apellido,
                    documento = persona.Documento,
                    area = new AreaDTO(persona.Area),
                    inasistencia = inasistenciadto
                });
            });
        }

        return JsonConvert.SerializeObject(persoas_dto);

    }

    [WebMethod]
    public string GetAlumnos(Usuario usuario)
    {
        var alumnos = RepoAlumnos().GetAlumnos();
        Organigrama organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();
        var autorizador = new AutorizadorSacc(Autorizador());
        alumnos = autorizador.FiltrarAlumnosPorUsuario(alumnos, organigrama, usuario);

        var alumnos_dto = new List<Object>();

        if (alumnos.Count() > 0)
        {
            alumnos.ForEach(delegate(Alumno alumno)
            {
                alumnos_dto.Add(new
                {
                    Id = alumno.Id,
                    Nombre = alumno.Nombre,
                    Apellido = alumno.Apellido,
                    Documento = alumno.Documento,
                    Telefono = alumno.Telefono,
                    Mail = alumno.Mail,
                    Direccion = alumno.Direccion,
                    //   Area = AreaDtoPara(alumno.Area),
                    Modalidad = ModalidadPara(alumno.Modalidad),
                    Baja = alumno.Baja,
                });
            });
        }

        return JsonConvert.SerializeObject(alumnos_dto);

    }

    [WebMethod]
    public string GetAlumnoByDNI(int dni)
    {
        var alumno = RepoAlumnos().GetAlumnoByDNI(dni);

        var alumno_dto = new AlumnoDto
        {
            Id = alumno.Id,
            Apellido = alumno.Apellido,
            Nombre = alumno.Nombre,
            Documento = alumno.Documento,
            Areas = alumno.Areas,
            Modalidad = ModalidadPara(alumno.Modalidad),
            Telefono = alumno.Telefono,
            Mail = alumno.Mail,
            Direccion = alumno.Direccion,
            LugarDeTrabajo = alumno.LugarDeTrabajo,
            FechaDeNacimiento = alumno.FechaDeNacimiento.ToShortDateString(),
            EstadoDeAlumno = alumno.EstadoDeAlumno.Descripcion,
            CicloCursado = alumno.CicloCursado.Nombre,
            FechaDeIngreso = alumno.FechaDeIngreso.ToShortDateString(),
            Baja = alumno.Baja

        };

        return JsonConvert.SerializeObject(alumno_dto);
    }

    [WebMethod]
    public List<CursoDto> GetCursosDelAlumno(int dni)
    {
        var alumno = RepoAlumnos().GetAlumnoByDNI(dni);
        var cursos = RepositorioDeCursos().GetCursos();
        var evaluaciones = RepoEvaluaciones().GetEvaluacionesAlumno(alumno);
        var cursos_del_alumno = RepositorioDeCursos().GetCursosParaElAlumno(alumno, cursos);
        var articulador = new Articulador();

        var cursos_dto = new List<CursoDto>();

        if (cursos_del_alumno.Count() > 0)
        {
            cursos_del_alumno.ForEach(delegate(Curso curso)
            {
                var un_curso = new CursoDto();
                un_curso.Id = curso.Id;
                un_curso.Nombre = curso.Nombre;
                un_curso.Materia = curso.Materia;
                un_curso.Docente = curso.Docente;
                un_curso.Alumnos = curso.Alumnos();
                un_curso.EspacioFisico = curso.EspacioFisico;
                un_curso.EstadoDelAlumno = articulador.EstadoDelAlumnoParaElCurso(curso, evaluaciones);
                un_curso.FechaInicio = curso.FechaInicio.ToShortDateString();
                un_curso.FechaFin = curso.FechaFin.ToShortDateString();
                var horarios = new List<HorarioDto>();
                foreach (var h in curso.GetHorariosDeCursada())
                {
                    horarios.Add(new HorarioDto() { NumeroDia = (int)h.Dia, Dia = DateTimeFormatInfo.CurrentInfo.GetDayName(h.Dia), HoraDeInicio = h.HoraDeInicio.ToString().Substring(0, 5), HoraDeFin = h.HoraDeFin.ToString().Substring(0, 5), HorasCatedra = h.HorasCatedra });
                }
                un_curso.Horarios = horarios;
                cursos_dto.Add(un_curso);
            });
        }
        return cursos_dto;

        //return JsonConvert.SerializeObject(alumno_dto);
    }



    //private List<Area> AreasDto(List<Area> areas)
    //{
    //    var lista_area = new List<Area>();
    //    foreach (var a in areas)
    //    {

    //    }
    //    return new 
    //    {
    //        Id = modalidad.Id,
    //        Descripcion = modalidad.Descripcion
    //    };
    //}


    //[WebMethod]
    //public List<Alumno> GetTodosLosAlumnos()
    //{
    //    var alumnos = RepoAlumnos().GetAlumnos();
    //    return alumnos;

    //}

    private object EdificioPara(Edificio edificio)
    {
        return new
        {
            id = edificio.Id,
            nombre = edificio.Nombre,
            direccion = edificio.Direccion
        };
    }

    //private object ObtenerAsistentes(List<Persona> responsables) HACER DPS BEL
    //{

    //    string responsable_to_string = " yoo ";
    //    if (!(responsables == null))
    //    {
    //        foreach (Persona responsable in responsables)
    //        {
    //            responsable_to_string = responsable_to_string + responsable.Apellido + responsable.Nombre + "blah";
    //        }
    //        return responsable_to_string;
    //    }
    //    return responsable_to_string;
    //}

    private object ObtenerResponsable(Responsable responsable)
    {
        return (responsable.Apellido + ", " + responsable.Nombre);
    }


    private object ModalidadPara(Modalidad modalidad)
    {
        return new
        {
            Id = modalidad.Id,
            Descripcion = modalidad.Descripcion
        };
    }

    [WebMethod]
    public Alumno GuardarAlumno(Alumno un_alumno, Usuario usuario)
    {
        var conexion = Conexion();
        var repo_alumnos = RepoAlumnos();

        repo_alumnos.GuardarAlumno(un_alumno, usuario);

        return un_alumno;
    }

    [WebMethod]
    public Materia GuardarMateria(Materia una_materia, Usuario usuario)
    {
        var conexion = Conexion();
        una_materia = RepositorioDeMaterias().GuardarMaterias(una_materia, usuario);

        return una_materia;
    }

    [WebMethod]
    public void ModificarMateria(Materia una_materia, Usuario usuario)
    {
        var conexion = Conexion();
        RepositorioDeMaterias().ActualizarMaterias(una_materia, usuario);
    }

    [WebMethod]
    public bool QuitarMateria(Materia materia, Usuario usuario)
    {
        if (RepositorioDeMaterias().MateriaAsignadaACurso(materia))
        {
            return false;
        }
        RepositorioDeMaterias().QuitarMateria(materia, usuario);
        return true;
    }

    [WebMethod]
    public Docente GuardarDocente(Docente un_docente, Usuario usuario)
    {
        var conexion = Conexion();
        RepositorioDeDocentes().GuardarDocente(un_docente, usuario);

        return un_docente;
    }

    [WebMethod]
    public bool QuitarDocente(Docente docente, Usuario usuario)
    {
        if (RepositorioDeDocentes().DocenteAsignadoACurso(docente))
        {
            return false;
        }
        RepositorioDeDocentes().QuitarDocente(docente, usuario);
        return true;
    }

    [WebMethod]
    public void ActualizarAlumno(Alumno un_alumno, Usuario usuario)
    {
        var conexion = Conexion();
        var repo_alumnos = RepoAlumnos();

        repo_alumnos.ActualizarAlumno(un_alumno, usuario);
    }

    [WebMethod]
    public string InscribirAlumnosACurso(List<Alumno> alumnos_a_inscribir, int idCurso, Usuario usuario)
    {
        var conexion = Conexion();

        try
        {
            Curso curso = RepositorioDeCursos().GetCursoById(idCurso);
            var alumnos_a_procesar = new List<Alumno>();
            var alumnos_desincriptos = new List<Alumno>();
            var alumnos_nuevos = new List<Alumno>();
            var alumnos_que_ya_estaban = new List<Alumno>();

            if (alumnos_a_inscribir.Count == 0)
                alumnos_desincriptos = RepositorioDeCursos().ObtenerAlumnosDelCurso(curso);
            else
            {
                alumnos_nuevos = alumnos_a_inscribir.FindAll(a => !RepositorioDeCursos().ObtenerAlumnosDelCurso(curso).Contains(a));
                alumnos_que_ya_estaban = alumnos_a_inscribir.FindAll(a => RepositorioDeCursos().ObtenerAlumnosDelCurso(curso).Contains(a));
                alumnos_desincriptos = RepositorioDeCursos().ObtenerAlumnosDelCurso(curso).FindAll(a => !alumnos_a_inscribir.Contains(a));
            }
            var asistencias = RepoAsistencias().GetAsistencias();
            var alumnos_que_se_pueden_desinscribir = alumnos_desincriptos.FindAll(a => !asistencias.Exists(asist => asist.IdAlumno == a.Id && asist.IdCurso == idCurso));
            var alumnos_que_no_se_pueden_desinscribir = alumnos_desincriptos.FindAll(a => asistencias.Exists(asist => asist.IdAlumno == a.Id && asist.IdCurso == idCurso));

            alumnos_a_procesar.AddRange(alumnos_nuevos);
            alumnos_a_procesar.AddRange(alumnos_que_ya_estaban);
            alumnos_a_procesar.AddRange(alumnos_que_no_se_pueden_desinscribir);

            RepositorioDeCursos().ActualizarInscripcionesACurso(alumnos_a_procesar, curso, usuario);

            if (alumnos_que_no_se_pueden_desinscribir.Count > 0)
            {
                var alumnos_dto = new List<Object>();

                alumnos_que_no_se_pueden_desinscribir.ForEach(delegate(Alumno alumno)
                {
                    alumnos_dto.Add(new
                    {
                        Id = alumno.Id,
                        Nombre = alumno.Nombre,
                        Apellido = alumno.Apellido,
                        Documento = alumno.Documento,
                        Telefono = alumno.Telefono,
                        Mail = alumno.Mail,
                        Direccion = alumno.Direccion,
                        Modalidad = ModalidadPara(alumno.Modalidad),
                        Baja = alumno.Baja,
                    });
                });

                return JsonConvert.SerializeObject(new { tipoDeRespuesta = "inscripcionAlumno.parcial", alumnos = alumnos_dto });
            }
            else
            {
                return JsonConvert.SerializeObject(new { tipoDeRespuesta = "inscripcionAlumno.ok" });
            }
        }
        catch (Exception e)
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "inscripcionAlumno.error",
                error = e.Message
            });
        }

    }

    [WebMethod]
    public bool QuitarAlumno(Alumno alumno, Usuario usuario)
    {
        if (RepoAlumnos().AlumnoAsignadoACurso(alumno))
        {
            return false;
        }
        RepoAlumnos().QuitarAlumno(alumno, usuario);
        return true;

    }

    [WebMethod]
    public string GetCursoById(int id)
    {
        var curso = RepositorioDeCursos().GetCursoById(id);
        return JsonConvert.SerializeObject(curso);
    }

    [WebMethod]
    public CursoDto GetCursoDtoById(int id, Usuario usuario)
    {
        var curso = this.GetCursosDto(usuario).Find(c => c.Id == id);
        return curso;
    }

    [WebMethod]
    public EspacioFisico GetEspacioFisicoById(int id)
    {
        return RepoEspaciosFisicos().GetEspacioFisicoById(id); //JsonConvert.SerializeObject(espacio_fisico);
    }

    [WebMethod]
    [System.Xml.Serialization.XmlInclude(typeof(DocenteNull))]
    public List<CursoDto> GetCursosDto(Usuario usuario)
    {
        var cursos = new RepositorioDeCursos(Conexion()).GetCursos();
        var organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();
        var autorizador = new AutorizadorSacc(Autorizador());

        cursos = autorizador.FiltrarCursosPorUsuario(cursos, organigrama, usuario);


        var cursos_dto = new List<CursoDto>();

        if (cursos.Count() > 0)
        {
            cursos.ForEach(delegate(Curso curso)
            {
                var un_curso = new CursoDto();
                un_curso.Id = curso.Id;
                un_curso.Nombre = curso.Nombre;
                un_curso.Materia = curso.Materia;
                un_curso.Docente = curso.Docente;
                un_curso.Alumnos = FiltrarAlumnosPorUsuarioLogueado(usuario, curso.Alumnos(), organigrama, autorizador);
                un_curso.EspacioFisico = curso.EspacioFisico;
                un_curso.FechaInicio = curso.FechaInicio.ToShortDateString();
                un_curso.FechaFin = curso.FechaFin.ToShortDateString();
                var horarios = new List<HorarioDto>();
                foreach (var h in curso.GetHorariosDeCursada())
                {
                    horarios.Add(new HorarioDto() { NumeroDia = (int)h.Dia, Dia = DateTimeFormatInfo.CurrentInfo.GetDayName(h.Dia), HoraDeInicio = h.HoraDeInicio.ToString().Substring(0, 5), HoraDeFin = h.HoraDeFin.ToString().Substring(0, 5), HorasCatedra = h.HorasCatedra });
                }
                un_curso.Horarios = horarios;
                cursos_dto.Add(un_curso);
            });
        }
        return cursos_dto;
    }


    [WebMethod]
    public string GetMaterias()
    {
        var materias = RepositorioDeMaterias().GetMaterias();
        var materias_dto = new List<object>();

        if (materias.Count > 0)
        {
            materias.ForEach(delegate(Materia materia)
            {
                materias_dto.Add(new
                {
                    id = materia.Id,
                    nombre = materia.Nombre,
                    modalidad = ModalidadPara(materia.Modalidad),
                    ciclo = materia.Ciclo,
                });
            });
        };
        return JsonConvert.SerializeObject(materias_dto);
    }

    [WebMethod]
    public Docente GetDocenteById(int id)
    {
        var docente = RepositorioDeDocentes().GetDocenteById(id);
        return docente;
    }

    [WebMethod]
    public string GetDocentes()
    {
        var docentes = RepositorioDeDocentes().GetDocentes();
        var docentes_dto = new List<object>();

        if (docentes.Count > 0)
        {
            docentes.ForEach(delegate(Docente docente)
            {
                docentes_dto.Add(new
                {
                    id = docente.Id,
                    dni = docente.Dni,
                    nombre = docente.Nombre,
                    apellido = docente.Apellido,
                    telefono = docente.Telefono,
                    mail = docente.Mail,
                    domicilio = docente.Direccion
                });
            });
        };
        return JsonConvert.SerializeObject(docentes_dto);
    }


    [WebMethod]
    public List<AlumnoDto> ReporteAlumnosPorModalidad(Modalidad modalidad)
    {
        Reportes reportes = new Reportes();
        List<AlumnoDto> alumnos_dto = new List<AlumnoDto>();
        var alumnos_reporte = reportes.ObtenerAlumnosQueEstanCursandoConModalidad(modalidad, RepositorioDeCursos());
        foreach (Alumno alumno in alumnos_reporte)
        {

            var alumno_dto = new AlumnoDto();
            alumno_dto.Id = alumno.Id;
            alumno_dto.Apellido = alumno.Apellido;
            alumno_dto.Nombre = alumno.Nombre;
            alumno_dto.Documento = alumno.Documento;
            alumno_dto.Modalidad = alumno.Modalidad;
            alumno_dto.Telefono = alumno.Telefono;
            alumno_dto.Organismo = alumno.Organismo.Id;

            alumnos_dto.Add(alumno_dto);
        }

        return alumnos_dto;
    }

    //[WebMethod]
    //public List<AlumnoDto> ReporteAlumnosDeCursos(DateTime fecha_desde, DateTime fecha_hasta)
    //{
    //    Reportes reportes = new Reportes();
    //    List<AlumnoDto> alumnos_dto = new List<AlumnoDto>();
    //    var alumnos_reporte = reportes.ObtenerAlumnosDeLosCursos(fecha_desde, fecha_hasta, RepositorioDeCursos());
    //    foreach (Alumno alumno in alumnos_reporte)
    //    {
    //        var alumno_dto = new AlumnoDto();
    //        alumno_dto.Id = alumno.Id;
    //        alumno_dto.Apellido = alumno.Apellido;
    //        alumno_dto.Nombre = alumno.Nombre;
    //        alumno_dto.Documento = alumno.Documento;
    //        alumno_dto.Modalidad = alumno.Modalidad;
    //        alumno_dto.Telefono = alumno.Telefono;
    //        alumno_dto.Organismo = alumno.Organismo.Id;

    //        alumnos_dto.Add(alumno_dto);
    //    }

    //    return alumnos_dto;
    //}

    [WebMethod]
    public List<AlumnoDto> ReporteAlumnos(string fecha_desde, string fecha_hasta, Usuario usuario)
    {
        Reportes reportes = new Reportes();
        List<AlumnoDto> alumnos_dto = new List<AlumnoDto>();
        var organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();

        DateTime fecha_desde_formateada;
        DateTime.TryParse(fecha_desde, out fecha_desde_formateada);

        DateTime fecha_hasta_formateada;
        DateTime.TryParse(fecha_hasta, out fecha_hasta_formateada);

        if (fecha_desde_formateada.Year.Equals(0001))
        {
            fecha_desde_formateada = new DateTime(1900, 01, 01);
        }

        if (fecha_hasta_formateada.Year.Equals(0001))
        {
            fecha_hasta_formateada = new DateTime(1900, 01, 01);
        }
        var alumnos_reporte = reportes.ObtenerAlumnosDeLosCursos(fecha_desde_formateada, fecha_hasta_formateada, RepositorioDeCursos());

        alumnos_reporte = FiltrarAlumnosPorUsuarioLogueado(usuario, alumnos_reporte, organigrama, new AutorizadorSacc(Autorizador()));

        foreach (Alumno alumno in alumnos_reporte)
        {
            var alumno_dto = new AlumnoDto();
            alumno_dto.Id = alumno.Id;
            alumno_dto.Apellido = alumno.Apellido;
            alumno_dto.Nombre = alumno.Nombre;
            alumno_dto.Documento = alumno.Documento;
            alumno_dto.Modalidad = alumno.Modalidad;
            alumno_dto.Telefono = alumno.Telefono;
            alumno_dto.Organismo = alumno.Organismo.Id;
            alumno_dto.CicloCursado = alumno.CicloCursado.Id.ToString();

            alumnos_dto.Add(alumno_dto);
        }

        return alumnos_dto;
    }

    private List<Alumno> FiltrarAlumnosPorUsuarioLogueado(Usuario usuario, List<Alumno> alumnos, Organigrama organigrama, AutorizadorSacc autorizador)
    {
        alumnos = autorizador.FiltrarAlumnosPorUsuario(alumnos, organigrama, usuario);
        return alumnos;
    }




    [WebMethod]
    public Modalidad[] Modalidades()
    {
        return RepoModalidades().GetModalidades().ToArray();
    }

    [WebMethod]
    public Organismo[] Organismos()
    {
        return RepoAlumnos().GetOrganismos().ToArray();
    }

    [WebMethod]
    public Ciclo[] Ciclos()
    {
        return RepositorioDeMaterias().GetCiclos().ToArray();
    }

    [WebMethod]
    public Materia GetMateriaById(int id)
    {
        return RepositorioDeMaterias().GetMateriaById(id);

    }

    [WebMethod]
    public bool QuitarCurso(CursoDto curso, Usuario usuario)
    {
        var un_curso = RepositorioDeCursos().GetCursoById(curso.Id);
        if (un_curso.Alumnos().Count == 0)
            return RepositorioDeCursos().QuitarCurso(un_curso, usuario);
        else return false;
    }

    [WebMethod]
    public bool AgregarCurso(CursoDto curso)
    {
        var un_curso =
            new Curso(curso.Materia, curso.Docente, curso.EspacioFisico, DateTime.Parse(curso.FechaInicio), DateTime.Parse(curso.FechaFin), curso.Observaciones);
        var horarios = curso.Horarios;
        horarios.ForEach(h =>
        {
            un_curso.AgregarHorarioDeCursada(new HorarioDeCursada((DayOfWeek)h.NumeroDia, h.HoraDeInicio, h.HoraDeFin, h.HorasCatedra, h.IdCurso));
        });

        return RepositorioDeCursos().AgregarCurso(un_curso);
    }

    [WebMethod]
    public bool GuardarObservacionesCurso(int id_curso, string observaciones, Usuario usuario)
    {
        var un_curso = RepositorioDeCursos().GetCursoById(id_curso);
        un_curso.Observaciones = observaciones;
        return RepositorioDeCursos().ModificarCurso(un_curso);
    }
    [WebMethod]
    public bool ModificarCurso(CursoDto curso)
    {
        var un_curso =
            new Curso(curso.Id, curso.Materia, curso.Docente, curso.EspacioFisico, DateTime.Parse(curso.FechaInicio), DateTime.Parse(curso.FechaFin), curso.Observaciones)
            {
                Observaciones = curso.Observaciones
            };
        var horarios = curso.Horarios;
        horarios.ForEach(h =>
        {
            un_curso.AgregarHorarioDeCursada(new HorarioDeCursada((DayOfWeek)h.NumeroDia, h.HoraDeInicio, h.HoraDeFin, h.HorasCatedra, h.IdCurso));
        });

        return RepositorioDeCursos().ModificarCurso(un_curso);
    }

    [WebMethod]
    public string GetPersonaByDNI(int dni, Usuario usuario)
    {
        RepositorioDeAlumnos repo = new RepositorioDeAlumnos(Conexion(), RepositorioDeCursos(), RepoModalidades());
        Alumno persona = repo.GetAlumnoByDNI(dni);

        Organigrama organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();
        var autorizador = new AutorizadorSacc(Autorizador());
        var persona_dto = new Object();

        if (!autorizador.AlumnoVisibleParaUsuario(persona, organigrama, usuario))
        {

            throw new Exception();
        }
        else
        {
            persona_dto =
                       new
                       {
                           id = persona.Id,
                           nombre = persona.Nombre,
                           apellido = persona.Apellido,
                           documento = persona.Documento,
                           telefono = persona.Telefono,
                           direccion = persona.Direccion,
                           mail = persona.Mail,
                           //area = persona.Areas,
                           modalidad = persona.Modalidad.Id,
                           baja = persona.Baja,
                       };
        }

        return JsonConvert.SerializeObject(persona_dto);
    }


    [WebMethod]
    public Edificio[] Edificios()
    {
        return RepoEspaciosFisicos().GetEdificios().ToArray();
    }

    //[WebMethod]
    //public void EspacioFisico(EspacioFisico espacio_fisico)
    //{

    //}

    [WebMethod]
    public bool QuitarEspacioFisico(EspacioFisico espacio_fisico, Usuario usuario)
    {
        if (RepoEspaciosFisicos().EspacioFisicoAsignadoACurso(espacio_fisico))
        {
            return false;
        }
        RepoEspaciosFisicos().QuitarEspacioFisico(espacio_fisico, usuario);
        return true;
    }

    [WebMethod]
    public void ModificarEspacioFisico(EspacioFisico espacio_fisico, Usuario usuario)
    {
        var conexion = Conexion();
        RepoEspaciosFisicos().ModificarEspacioFisico(espacio_fisico, usuario);
    }

    [WebMethod]
    public void GuardarEspacioFisico(EspacioFisico un_espacio_fisico, Usuario usuario)
    {
        var conexion = Conexion();
        RepoEspaciosFisicos().ActualizarEspacioFisico(un_espacio_fisico, usuario);
    }

    [WebMethod]
    public string GetEspaciosFisicos(Usuario usuario)
    {

        var espacios_fisicos = new RepositorioDeEspaciosFisicos(Conexion(), RepositorioDeCursos()).GetEspaciosFisicos();
        var organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();
        var autorizador = new AutorizadorSacc(Autorizador());

        espacios_fisicos = autorizador.FiltrarEspaciosFisicosPorUsuario(espacios_fisicos, organigrama, usuario);

        var espacios_fisicos_dto = new List<object>();

        if (espacios_fisicos.Count > 0)
        {
            espacios_fisicos.ForEach(delegate(EspacioFisico espacio_fisico)
            {
                espacios_fisicos_dto.Add(new
                {
                    id = espacio_fisico.Id,
                    aula = espacio_fisico.Aula,
                    edificio = EdificioPara(espacio_fisico.Edificio),
                    capacidad = espacio_fisico.Capacidad
                });
            });
        };
        return JsonConvert.SerializeObject(espacios_fisicos_dto);

    }

    [WebMethod]
    public List<Area> GetAreasParaProtocolo()
    {
        return RepositorioDeAreas().GetAreasParaProtocolo();
    }

    [WebMethod]
    public string GetUsuarioWindows()
    {
        return Environment.UserName;
    }

    [WebMethod]
    public List<Area> GetAreasParaLugaresDeTrabajo()
    {
        return RepositorioDeAreas().GetAreasParaLugaresDeTrabajo();
    }

    [WebMethod]
    public string GetAreasParaProtocoloJSON(Usuario usuario)
    {

        List<Area> areas = RepositorioDeAreas().GetAreasParaProtocolo();
        //var organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();
        //var autorizador = Autorizador();

        //areas = autorizador.FiltrarEspaciosFisicosPorUsuario(areas, organigrama, usuario);

        var areas_dto = new List<object>();

        if (areas.Count > 0)
        {
            areas.ForEach(delegate(Area area)
            {
                areas_dto.Add(new
                {
                    id = area.Id,
                    nombre = area.Nombre,
                    responsable = ObtenerResponsable(area.datos_del_responsable),
                    //asistentes = ObtenerAsistentes(COMPLETAR DPS, CAMBIARRRRRR
                    telefono = ObtenerDato(area, ConstantesDeDatosDeContacto.TELEFONO),
                    fax = ObtenerDato(area, ConstantesDeDatosDeContacto.FAX),
                    mail = ObtenerDato(area, ConstantesDeDatosDeContacto.MAIL),
                    direccion = area.Direccion
                    //ANALIZAR DESPUES
                    //aula = area.Aula,
                    //edificio = EdificioPara(area.Edificio),
                    //capacidad = area.Capacidad
                });
            });
        };
        return JsonConvert.SerializeObject(areas_dto);

    }

    private string ObtenerDato(Area UnArea, int id_dato)
    {
        string datos_listados = "";

        if (UnArea.DatosDeContacto.Any(d => d.Id == id_dato))
        {
            List<DatoDeContacto> datos = UnArea.DatosDeContacto.ToList().FindAll(dc => dc.Id == id_dato);

            foreach (DatoDeContacto dato in datos)
            {
                datos_listados += " " + dato.Dato + " / ";
            }

        }

        if (datos_listados.Length > 2)
        {
            return datos_listados.Substring(0, (datos_listados.Length - 2));
        }
        else
        {
            return datos_listados;
        }
    }

    [WebMethod]
    public ItemDeMenu[] ItemsDelMenu(Usuario usuario, string menu)
    {
        //List<ItemDeMenu> items_permitidos_dto = new List<ItemDeMenu>();
        //var repo_usuarios = new RepositorioUsuarios(Conexion());
        //var items_permitidos = from i in repo_usuarios.AutorizadorPara(usuario).ItemsPermitidos(menu)
        //                       orderby i.Orden
        //                       select i;

        //foreach (var item in items_permitidos)
        //{
        //    items_permitidos_dto.Add(new ItemDeMenu() { NombreItem = item.NombreItem, Url = item.Url });
        //}

        //return items_permitidos_dto.ToArray();
        return new List<ItemDeMenu>().ToArray();
    }

    [WebMethod]
    public RespuestaABusquedaDeLegajos BuscarLegajosParaDigitalizacion(string criterio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        return servicioDeDigitalizacionDeLegajos().BuscarLegajos(criterio);
    }

    [WebMethod]
    public ImagenModi GetImagenPorId(int id_imagen, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        return servicioDeDigitalizacionDeLegajos().GetImagenPorId(id_imagen);
    }

    [WebMethod]
    public int AgregarImagenSinAsignarAUnLegajo(int id_interna, string nombre_imagen, string bytes_imagen, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        return servicioDeDigitalizacionDeLegajos().AgregarImagenSinAsignarAUnLegajo(id_interna, nombre_imagen, bytes_imagen);
    }

    [WebMethod]
    public int AgregarImagenAUnFolioDeUnLegajo(int id_interna, int numero_folio, string nombre_imagen, string bytes_imagen, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        return servicioDeDigitalizacionDeLegajos().AgregarImagenAUnFolioDeUnLegajo(id_interna, numero_folio, nombre_imagen, bytes_imagen);
    }

    [WebMethod]
    public ImagenModi GetThumbnailPorId(int id_imagen, int alto, int ancho, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        return servicioDeDigitalizacionDeLegajos().GetThumbnailPorId(id_imagen, alto, ancho);
    }

    [WebMethod]
    public int AsignarImagenAFolioDeLegajo(int id_imagen, int nro_folio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        return servicioDeDigitalizacionDeLegajos().AsignarImagenAFolioDeLegajo(id_imagen, nro_folio, usuario);
    }

    [WebMethod]
    public void AsignarImagenAFolioDeLegajoPasandoPagina(int id_imagen, int nro_folio, int pagina, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        servicioDeDigitalizacionDeLegajos().AsignarImagenAFolioDeLegajoPasandoPagina(id_imagen, nro_folio, pagina, usuario);
    }

    [WebMethod]
    public void AsignarCategoriaADocumento(int id_categoria, string tabla, int id_documento, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        servicioDeDigitalizacionDeLegajos().AsignarCategoriaADocumento(id_categoria, tabla, id_documento, usuario);
    }

    [WebMethod]
    public void DesAsignarImagen(int id_imagen, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "ingreso_a_modi")) throw (new Exception("El usuario no tiene permisos para MODI"));
        servicioDeDigitalizacionDeLegajos().DesAsignarImagen(id_imagen, usuario);
    }

    private ServicioDeDigitalizacionDeLegajos servicioDeDigitalizacionDeLegajos()
    {
        return new ServicioDeDigitalizacionDeLegajos(Conexion());
    }

    #endregion

    #region mau


    [WebMethod]
    public bool Login(string alias, string clave)
    {
        return Autorizador().Login(alias, clave);
    }

    [WebMethod]
    public bool SolicitarCambioDeImagen(int id_imagen, Usuario usuario)
    {
        return RepositorioDeUsuarios().SolicitarCambioImagen(usuario.Id, id_imagen);
    }


    [WebMethod]
    public bool SolicitarCambioDeImagenPara(int id_usuario, int id_imagen, Usuario usuario)
    {
        return RepositorioDeUsuarios().CambiarImagenPerfil(id_usuario, id_imagen, usuario.Id);
    }


    [WebMethod]
    public bool AceptarCambioDeImagen(int id_usuario, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_administrar_cambios_de_imagen")) throw (new Exception("El usuario no tiene permisos para administrar cambios de imagen"));
        return RepositorioDeUsuarios().AceptarCambioDeImagen(id_usuario, usuario.Id);
    }

    [WebMethod]
    public bool AceptarCambioImagenConImagenRecortada(int id_usuario, int id_imagen_recortada, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_administrar_cambios_de_imagen")) throw (new Exception("El usuario no tiene permisos para administrar cambios de imagen"));
        return RepositorioDeUsuarios().AceptarCambioImagenConImagenRecortada(id_imagen_recortada, id_usuario, usuario.Id);
    }

    [WebMethod]
    public bool RechazarCambioDeImagen(int id_usuario, string razon_de_rechazo, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_administrar_cambios_de_imagen")) throw (new Exception("El usuario no tiene permisos para administrar cambios de imagen"));
        return RepositorioDeUsuarios().RechazarCambioDeImagen(razon_de_rechazo, id_usuario, usuario.Id);
    }

    [WebMethod]
    public SolicitudDeCambioDeImagen GetCambioImagenPorIdTicket(int id_ticket, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_administrar_cambios_de_imagen")) throw (new Exception("El usuario no tiene permisos para administrar cambios de imagen"));
        return RepositorioDeUsuarios().GetCambioImagenPorIdTicket(id_ticket);
    }

    [WebMethod]
    public SolicitudDeCambioDeImagen[] GetSolicitudesDeCambioDeImagenPendientesPara(int id_usuario, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_administrar_cambios_de_imagen")) throw (new Exception("El usuario no tiene permisos para administrar cambios de imagen"));
        return RepositorioDeUsuarios().GetSolicitudesDeCambioDeImagenPendientesPara(id_usuario).ToArray();
    }

    [WebMethod]
    public SolicitudDeCambioDeImagen[] GetSolicitudesDeCambioDeImagenPendientes(Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_administrar_cambios_de_imagen")) throw (new Exception("El usuario no tiene permisos para administrar cambios de imagen"));
        return RepositorioDeUsuarios().GetSolicitudesDeCambioDeImagenPendientes().ToArray();
    }


    [WebMethod]
    public AlertaPortal[] GetMisAlertasPendientes(Usuario usuario)
    {
        return new RepositorioDeAlertasPortal(Conexion()).GetAlertasPendientesPara(usuario.Id).ToArray();
    }

    [WebMethod]
    public void MarcarAlertaComoLeida(int id_alerta, Usuario usuario)
    {
        new RepositorioDeAlertasPortal(Conexion()).MarcarAlertaComoLeida(id_alerta, usuario.Id);
    }

    [WebMethod]
    public string CambiarPassword(string PasswordActual, string PasswordNuevo, Usuario usuario)
    {
        var repoUsuarios = RepositorioDeUsuarios();

        if (repoUsuarios.CambiarPassword(usuario.Id, PasswordActual, PasswordNuevo))
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "cambioPassword.ok"
            });
        }
        else
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "cambioPassword.error"
                //error = e.Message
            });
        }
    }

    [WebMethod]
    public string ResetearPassword(int id_usuario, Usuario usuario)
    {
        if (Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_resetear_contrasenia")) return RepositorioDeUsuarios().ResetearPassword(id_usuario);
        else throw new Exception("El usuario no tiene permisos para resetear contraseñas");
    }

    [WebMethod]
    public bool ModificarMailRegistro(int id_usuario, string mail, Usuario usuario)
    {
        if (Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_modificar_mail")) return RepositorioDeUsuarios().ModificarMailRegistro(id_usuario, mail);
        else throw new Exception("El usuario no tiene permisos para modificar mails");
    }

    [WebMethod]
    public bool ModificarMiMail(string mail, Usuario usuario)
    {
        return RepositorioDeUsuarios().ModificarMailRegistro(usuario.Id, mail);
    }

    [WebMethod]
    public Usuario GetUsuarioPorAlias(string alias)
    {
        return RepositorioDeUsuarios().GetUsuarioPorAlias(alias);
    }

    [WebMethod]
    public Usuario GetUsuarioPorAliasYFuncionalidades(string alias)
    {
        return RepositorioDeUsuarios().GetUsuarioPorAliasYConFuncionalidades(alias);
    }

    [WebMethod]
    public Usuario GetUsuarioPorId(int id_usuario)
    {
        return RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
    }

    [WebMethod]
    public Usuario GetUsuarioPorIdPersona(int id_persona)
    {
        return RepositorioDeUsuarios().GetUsuarioPorIdPersona(id_persona);
    }

    [WebMethod]
    public Usuario CrearUsuarioPara(int id_persona, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_crear_usuario")) throw (new Exception("El usuario no tiene permisos para crear usuarios"));
        return RepositorioDeUsuarios().CrearUsuarioPara(id_persona);
    }

    [WebMethod]
    public UsuarioNulo GetUsuarioNulo()
    {
        return new UsuarioNulo();
    }

    [WebMethod]
    public Persona GetPersonaUsuarioLogueado(Usuario usuario)
    {
        return RepositorioDeUsuarios().GetPersonaPorIdUsuario(usuario.Id);
    }

    [WebMethod]
    public bool ElUsuarioPuedeAccederALaURL(Usuario usuario, string url)
    {
        //return Autorizador().ElUsuarioPuedeAccederALaURL(usuario, url);
        return Autorizador().NuevoElUsuarioPuedeAccederALaURL(usuario, url);
        
    }

    [WebMethod]
    public Funcionalidad[] TodasLasFuncionalidades()
    {
        var funcionalidades = RepositorioDeFuncionalidades().TodasLasFuncionalidades().ToArray();
        return funcionalidades;
    }


    [WebMethod]
    public bool ElUsuarioTienePermisosParaFuncionalidadPorId(int id_usuario, int id_funcionalidad)
    {
        return Autorizador().ElUsuarioTienePermisosPara(id_usuario, id_funcionalidad);
    }

    [WebMethod]
    public bool ElUsuarioTienePermisosParaFuncionalidadPorNombre(int id_usuario, string nombre_funcionalidad)
    {
        return Autorizador().ElUsuarioTienePermisosPara(id_usuario, nombre_funcionalidad);
    }

    [WebMethod]
    public bool ElUsuarioLogueadoTienePermisosParaFuncionalidadPorNombre(string nombre_funcionalidad, Usuario usuario)
    {
        return Autorizador().ElUsuarioTienePermisosPara(usuario.Id, nombre_funcionalidad);
    }

    [WebMethod]
    public bool ElUsuarioLogueadoTienePermisosParaFuncionalidadPorId(int id_funcionalidad, Usuario usuario)
    {
        return Autorizador().ElUsuarioTienePermisosPara(usuario.Id, id_funcionalidad);
    }

    [WebMethod]
    public Funcionalidad[] FuncionalidadesPara(int id_usuario)
    {
        var usuario = RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
        var funcionalidades = RepositorioDeFuncionalidadesDeUsuarios().FuncionalidadesPara(usuario).ToArray();
        return funcionalidades;
    }

    [WebMethod]
    public General.MAU.MAU_Perfil[] GetPerfilesActuales(int id_usuario, Usuario usuario)
    {
        //var usu = RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
        var perfiles = RepositorioDeFuncionalidadesDeUsuarios().GetPerfilesActuales(id_usuario).ToArray();
        return perfiles;
    }

    [WebMethod]
    public Funcionalidad[] GetFuncionalidadesActuales(int id_usuario, Usuario usuario)
    {
        //var usu = RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
        var funcionalidades = RepositorioDeFuncionalidadesDeUsuarios().GetFuncionalidadesActuales(id_usuario).ToArray();
        return funcionalidades;
    }

    [WebMethod]
    public MAU_Perfil[] GetPerfilesConFuncionalidades(Usuario usuario)
    {

        var perfiles = RepositorioDeFuncionalidadesDeUsuarios().GetPerfilesConFuncionalidades().ToArray();
        return perfiles;
    }

    [WebMethod]
    public Funcionalidad[] GetFuncionalidadesPerfilesAreas(Usuario usuario)
    {

        var funcionalidades = RepositorioDeFuncionalidadesDeUsuarios().GetFuncionalidadesPerfilesAreas(usuario).ToArray();
        //Session["permisos"] = funcionalidades;
        return funcionalidades;
    }

    [WebMethod]
    public Funcionalidad[] GetFuncionalidadesPerfilesAreasDeUnUsuario(int id_usuario, Usuario usuario)
    {
        //var usu = RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
        
        usuario.Id = id_usuario;

        var funcionalidades = RepositorioDeFuncionalidadesDeUsuarios().GetFuncionalidadesPerfilesAreas(usuario).ToArray();
        //Session["permisos"] = funcionalidades;
        return funcionalidades;
    }

    [WebMethod]
    public string asignarPerfiles(string idPerfiles, string areas, string entidades, int id_usuario, Usuario usuario)
    {
        //var usu = RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
        int[] perfiles = JsonConvert.DeserializeObject<int[]>(idPerfiles);
        List<Area> lista_areas = JsonConvert.DeserializeObject<List<Area>>(areas);
        List<Entidad> lista_entidades = JsonConvert.DeserializeObject<List<Entidad>>(entidades);
        var rto = RepositorioDeFuncionalidadesDeUsuarios().AsignarPerfilesAUsuario(perfiles.ToList(), lista_areas, lista_entidades, id_usuario, usuario.Id);
        return rto;
    }

    [WebMethod]
    public string desasignarPerfiles(int idPerfil, int idArea, int idEntidad, int id_usuario, Usuario usuario)
    {
        var rto = RepositorioDeFuncionalidadesDeUsuarios().DesAsignarPerfilDeUsuario(idPerfil, idArea, idEntidad, id_usuario, usuario.Id);
        return rto;
    }

    [WebMethod]
    public string asignarFuncionalidades(string idFuncionalidades, string areas, string entidades, int id_usuario, Usuario usuario)
    {
        //var usu = RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
        int[] funcionalidades = JsonConvert.DeserializeObject<int[]>(idFuncionalidades);
        List<Area> listas_areas = JsonConvert.DeserializeObject<List<Area>>(areas);
        List<Entidad> lista_entidades = JsonConvert.DeserializeObject<List<Entidad>>(entidades);
        var rto = RepositorioDeFuncionalidadesDeUsuarios().AsignarFuncionalidadesAUsuario(funcionalidades.ToList(), listas_areas, lista_entidades, id_usuario, usuario.Id);
        return rto;
        
    }

    [WebMethod]
    public string desasignarFuncionaldiad(int idFuncionalidad, int idArea, int idEntidad, int id_usuario, Usuario usuario)
    {
        var rto = RepositorioDeFuncionalidadesDeUsuarios().DesAsignarFuncionalidadDeUsuario(idFuncionalidad, idArea, idEntidad, id_usuario, usuario.Id);
        return rto;
    }
    

    [WebMethod]
    public Funcionalidad[] FuncionalidadesOtorgadasA(int id_usuario)   //tira las funcionalidades tildadas en MAU, independientemente de otras verificaciones
    {
        var usuario = RepositorioDeUsuarios().GetUsuarioPorId(id_usuario);
        var funcionalidades = RepositorioDeFuncionalidadesDeUsuarios().FuncionalidadesOtorgadasA(usuario).ToArray();
        return funcionalidades;
    }

    [WebMethod]
    public Persona[] BuscarPersonas(string criterio)
    {
        var personas = RepositorioDePersonas().BuscarPersonas(criterio).ToArray();
        return personas;
    }

    [WebMethod]
    public Area[] BuscarAreas(string criterio)
    {
        var areas = RepositorioDeAreas().BuscarAreas(criterio).ToArray();
        return areas;
    }

    [WebMethod]
    public Entidad[] BuscarEntidades(string criterio)
    {
        var entidades = RepositorioDeEntidades().BuscarEntidades(criterio).ToArray();
        return entidades;
    }

    [WebMethod]
    public Persona[] BuscarPersonasConLegajo(string criterio)
    {
        var personas = RepositorioDePersonas().BuscarPersonasConLegajo(criterio).ToArray();
        return personas;
    }

    [WebMethod]
    public Usuario[] BuscarPersonaDeBajaConPermisos()
    {
        var usuarios = RepositorioDeUsuarios().GetUsuariosConPersonasDeBaja().ToArray();
        return usuarios;
    }

    [WebMethod]
    public Usuario[] BuscarUsuariosPorArea(string nombre_area)
    {
        var usuarios = RepositorioDeUsuarios().GetUsuariosPorArea(nombre_area).ToArray();
        return usuarios;
    }


    [WebMethod]
    public Area[] AreasAdministradasPor(Usuario usuario)
    {
        //GRANI 20151228: Se cambia por un error de referencia circular.
        //return Autorizador().AreasAdministradasPor(usuario).ToArray();

        JsonSerializerSettings settings = new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects };
        //FC: nuevo esquema de permisos
        var listaDeAreas = Autorizador().NuevoAreasAdministradasPorUsuarioYFuncionalidad(usuario, 0).ToArray();
        //var listaDeAreas = Autorizador().AreasAdministradasPor(usuario).ToArray();
        var stringDeAreas = JsonConvert.SerializeObject(listaDeAreas, Formatting.Indented, new JsonSerializerSettings() { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore });

        Area[] areas = JsonConvert.DeserializeObject<Area[]>(stringDeAreas);
        return areas;
    }

    [WebMethod]
    public Area[] AreasAdministradasPorUsuarioYFuncionalidad(Usuario usuario, int idFuncionalidad)
    {

        JsonSerializerSettings settings = new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects };

        //FC: antes del nuevos permisos
        //var listaDeAreas = Autorizador().AreasAdministradasPor(usuario).ToArray();
        var listaDeAreas = Autorizador().NuevoAreasAdministradasPorUsuarioYFuncionalidad(usuario,idFuncionalidad).ToArray();
        var stringDeAreas = JsonConvert.SerializeObject(listaDeAreas, Formatting.Indented, new JsonSerializerSettings() { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore });

        Area[] areas = JsonConvert.DeserializeObject<Area[]>(stringDeAreas);
        return areas;
    }

    [WebMethod]
    public Area[] AreasAdministradasPorMiUsuarioYFuncionalidad(int idFuncionalidad, Usuario usuario)
    {

        JsonSerializerSettings settings = new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects };

        var listaDeAreas = Autorizador().NuevoAreasAdministradasPorUsuarioYFuncionalidad(usuario, idFuncionalidad).ToArray();
        var stringDeAreas = JsonConvert.SerializeObject(listaDeAreas, Formatting.Indented, new JsonSerializerSettings() { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore });

        Area[] areas = JsonConvert.DeserializeObject<Area[]>(stringDeAreas);
        return areas;
    }

    //[WebMethod]
    //public string AreasAdministradasPor2(Usuario usuario)
    //{
    //    //return JsonConvert.SerializeObject(blah,settings);
    //    JsonSerializerSettings settings = new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.Objects };
    //    var blah = Autorizador().AreasAdministradasPor(usuario).ToArray();
    //    return JsonConvert.SerializeObject(blah, Formatting.Indented, new JsonSerializerSettings() { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore });
    //}

    [WebMethod]
    public Area[] AreasAdministradasPorIdUsuario(int id_usuario)
    {
        return Autorizador().AreasAdministradasPor(id_usuario).ToArray();
    }

    [WebMethod]
    public void AsignarAreaAUnUsuario(int id_usuario, int id_area, Usuario usuario)
    {
        if (Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_cambiar_permisos")) Autorizador().AsignarAreaAUnUsuario(id_usuario, id_area, usuario.Id);
        else throw new Exception("No está habilitado para modificar permisos");
    }

    [WebMethod]
    public void DesAsignarAreaAUnUsuario(int id_usuario, int id_area, Usuario usuario)
    {
        if (Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_cambiar_permisos")) Autorizador().DesAsignarAreaAUnUsuario(id_usuario, id_area, usuario.Id);
        else throw new Exception("No está habilitado para modificar permisos");
    }

    // [WebMethod]
    //public bool ElUsuarioTienePermisosPara(Usuario usuario, string nombre_funcionalidad)
    //{
    //    return Autorizador().ElUsuarioTienePermisosPara(usuario, nombre_funcionalidad);
    //}

    [WebMethod]
    public void ConcederFuncionalidadA(int id_usuario, int id_funcionalidad, Usuario usuario)
    {
        if (Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_cambiar_permisos")) Autorizador().ConcederFuncionalidadA(id_usuario, id_funcionalidad, usuario.Id);
        else throw new Exception("No está habilitado para modificar permisos");
    }

    [WebMethod]
    public void DenegarFuncionalidadA(int id_usuario, int id_funcionalidad, Usuario usuario)
    {
        if (Autorizador().ElUsuarioTienePermisosPara(usuario.Id, 24)) Autorizador().DenegarFuncionalidadA(id_usuario, id_funcionalidad, usuario.Id);
        else throw new Exception("No está habilitado para modificar permisos");
    }

    [WebMethod]
    public MenuDelSistema GetMenuPara(string nombre_menu, Usuario usuario)
    {
        //MenuDelSistema menu = Autorizador().GetMenuPara(nombre_menu, usuario);
        MenuDelSistema menu = Autorizador().NuevoGetMenuPara(nombre_menu, usuario);
        return menu;
    }

    #endregion

    #region Credenciales

    [WebMethod]
    public string GetPDFDDJJRecepcionCredencial(SolicitudCredencial solicitud)
    {
        var solicitante = RepositorioDePersonas().GetPersonaPorId(solicitud.IdPersona);

        var foto = this.GetThumbnail(solicitante.IdImagen, 100, 100);
        while (foto.reintentar)
        {
            foto = this.GetThumbnail(solicitante.IdImagen, 100, 100);
        }
        Dictionary<string, string> mapa_para_pdf = new Dictionary<string, string>();
        //mapa_para_pdf.Add("CodigoBarras1", usuario.Owner.Documento.ToString());
        mapa_para_pdf.Add("APELLIDONombre1", solicitante.Apellido + ", " + solicitante.Nombre);
        mapa_para_pdf.Add("APELLIDONombreDNI1", solicitante.Apellido + ", " + solicitante.Nombre + " (" + solicitante.Documento.ToString("#,##0") + ")");
        mapa_para_pdf.Add("TipoNroDNI1", solicitante.Documento.ToString("#,##0"));
        mapa_para_pdf.Add("Fecha1", DateTime.Now.ToShortDateString());

        mapa_para_pdf.Add("APELLIDONombreDNI2", solicitante.Apellido + ", " + solicitante.Nombre + " (" + solicitante.Documento.ToString("#,##0") + ")");
        mapa_para_pdf.Add("Fecha2", DateTime.Now.ToShortDateString());

        var creador_pdf = new CreadorDePdfs();

        byte[] bytes;
        //if (solicitud.Organismo == "Ministerio de Desarrollo Social")
        bytes = creador_pdf.FillPDF(TemplatePath("DDJJ_entrega_credencial_2018_MDS.pdf"), "DDJJEntregaCredencial", mapa_para_pdf);
        //else
        //    bytes = creador_pdf.FillPDF(TemplatePath("DDJJ_entrega_credencial_2018_MSAL.pdf"), "DDJJEntregaCredencial", mapa_para_pdf);

        Document doc = new Document();
        byte[] result;

        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = PdfWriter.GetInstance(doc, ms);

            doc.SetPageSize(PageSize.LETTER);
            doc.Open();
            PdfContentByte cb = writer.DirectContent;
            PdfImportedPage page;



            PdfReader reader;
            reader = new PdfReader(bytes);
            int pages = reader.NumberOfPages;
            // loop over document pages

            doc.SetPageSize(PageSize.A4);
            doc.NewPage();
            page = writer.GetImportedPage(reader, 1);
            cb.AddTemplate(page, 0, 0);

            Barcode39 bc39 = new Barcode39();
            bc39.Code = solicitante.Documento.ToString() + " " + DateTime.Now.ToShortDateString();
            bc39.Font = null;
            Image image = bc39.CreateImageWithBarcode(cb, null, null);

            image.SetAbsolutePosition(270, 750);
            image.ScaleAbsolute(250, 50);
            doc.Add(image);

            Byte[] bytes_foto = Convert.FromBase64String(foto.bytes);
            var foto_usuario = iTextSharp.text.Image.GetInstance(bytes_foto);

            foto_usuario.SetAbsolutePosition(480, 640);
            foto_usuario.ScaleAbsolute(100, 100);
            doc.Add(foto_usuario);

            doc.SetPageSize(PageSize.A4);
            doc.NewPage();
            page = writer.GetImportedPage(reader, 2);
            cb.AddTemplate(page, 0, 0);

            doc.Close();
            result = ms.ToArray();
        }

        return Convert.ToBase64String(result);
    }



    [WebMethod]
    public Credencial[] GetCredencialesTodasDePortal(Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();

        return repositorio.GetCredencialesTodasDePortal(usuario.Owner.Id).ToArray();
    }

    [WebMethod]
    public Credencial[] GetCredencialesDeUnaPersona(int id_persona, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();

        return repositorio.GetCredencialesTodasDePortal(id_persona).ToArray();
    }


    [WebMethod]
    public SolicitudCredencial[] GetSolicitudesDeCredencialPorPersona(Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();

        return repositorio.GetSolicitudesDeCredencialPorPersona(usuario.Owner.Id).ToArray();
    }


    [WebMethod]
    public LugarEntrega[] GetLugaresEntregaCredencial(Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();

        return repositorio.GetLugaresEntregaCredencial().ToArray();
    }

    [WebMethod]
    public TipoCredencial[] GetTiposDeCredencial(Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();

        return repositorio.GetTiposDeCredencial().ToArray();
    }

    [WebMethod]
    public VinculoCredencial[] GetVinculosCredenciales(Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();

        return repositorio.GetVinculosCredenciales().ToArray();
    }

    [WebMethod]
    public Persona[] GetAutorizantesCredenciales(Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();

        return repositorio.GetAutorizantesCredenciales().ToArray();
    }

    [WebMethod]
    public string PuedePedirCredencial(Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();


        return repositorio.PuedePedirCredencial(usuario);
    }


    [WebMethod]
    public string SolicitarRenovacionCredencial(Usuario usuario_solicitante, string motivo, string organismo, int id_lugar_entrega, bool personal_externo, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();


        return repositorio.SolicitarRenovacionCredencial(usuario_solicitante, motivo, organismo, id_lugar_entrega, personal_externo);
    }

    [WebMethod]
    public string SolicitarCredencialExterna(int dni, string apellido, string nombres, string email, DateTime fecha_nacimiento, string telefono, int id_foto, int id_tipo_credencial, int id_autorizante, int id_vinculo, int id_lugar_de_entrega, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();


        return ""; // repositorio.SolicitarCredencialExterna(Autorizador(), RepositorioDeUsuarios(), dni, apellido, nombres, email, fecha_nacimiento, telefono, id_foto, id_tipo_credencial, id_autorizante, id_vinculo, id_lugar_de_entrega);
    }

    [WebMethod]
    public SolicitudCredencial GetSolicitudDeCredencialPorIdTicketAprobacion(int id_ticket, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.GetSolicitudDeCredencialPorIdTicketAprobacion(id_ticket);
    }

    [WebMethod]
    public SolicitudCredencial GetSolicitudDeCredencialPorIdTicketImpresion(int id_ticket, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.GetSolicitudDeCredencialPorIdTicketImpresion(id_ticket);
    }

    [WebMethod]
    public SolicitudCredencial GetSolicitudDeCredencialPorIdTicketEntrega(int id_ticket, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.GetSolicitudDeCredencialPorIdTicketEntrega(id_ticket);
    }

    [WebMethod]
    public bool CambiarOrganismoEnSolicitudCredencial(SolicitudCredencial solicitud, int id_organismo_nuevo,  Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.CambiarOrganismoEnSolicitudCredencial(solicitud, id_organismo_nuevo, usuario);
    }

    [WebMethod]
    public bool AprobarSolicitudCredencial(SolicitudCredencial solicitud, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.AprobarSolicitudCredencial(solicitud, usuario);
    }

    [WebMethod]
    public bool RechazarSolicitudCredencial(SolicitudCredencial solicitud, string motivo, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.RechazarSolicitudCredencial(solicitud, motivo, usuario);
    }

    [WebMethod]
    public bool MarcarCredencialComoImpresa(int idCredencial, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.MarcarCredencialComoImpresa(idCredencial, usuario);
    }

    [WebMethod]
    public bool AsociarCodigoMagneticoACredencial(int idCredencial, string codigo_magnetico, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.AsociarCodigoMagneticoACredencial(idCredencial, codigo_magnetico, usuario);
    }

    [WebMethod]
    public bool CerrarTicketImpresion(SolicitudCredencial solicitud, string instrucciones_de_retiro, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.CerrarTicketImpresion(solicitud, instrucciones_de_retiro, usuario);
    }

    [WebMethod]
    public bool CerrarTicketEntrega(SolicitudCredencial solicitud, Usuario usuario)
    {
        RepositorioLegajo repositorio = RepoLegajo();
        return repositorio.CerrarTicketEntrega(solicitud, usuario);
    }

    #endregion


    [WebMethod]
    public bool RefrescarCacheMAU(Usuario usuario)
    {
        RepositorioDeFuncionalidades().Refresh();
        RepositorioDeFuncionalidadesDeUsuarios().Refresh();
        RepositorioDeAccesosAURL.NuevoRepositorioDeAccesosAURL(Conexion(), RepositorioDeFuncionalidades()).Refresh();
        return true;
    }

    [WebMethod]
    public InstanciaDeEvaluacion[] GetInstanciasDeEvaluacion(int id_curso)
    {
        var instancias = RepositorioDeCursos().GetInstanciasDeEvaluacion(id_curso).ToArray();
        return instancias;
    }

    [WebMethod]
    public EvaluacionDto[] GuardarEvaluaciones(EvaluacionDto[] evaluaciones_nuevas_dto, EvaluacionDto[] evaluaciones_originales_dto, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "administracion_macc")) throw (new Exception("El usuario no tiene permisos para administrar macc"));
        var evaluaciones_no_procesadas = new List<EvaluacionDto>();
        var repo_alumnos = RepoAlumnos();
        var repo_cursos = RepositorioDeCursos();
        var evaluaciones_a_guardar = new List<Evaluacion>();
        foreach (var e in evaluaciones_nuevas_dto)
        {
            var un_curso = repo_cursos.GetCursoById(e.IdCurso);
            var una_instancia = un_curso.Materia.Modalidad.InstanciasDeEvaluacion.Find(i => i.Id == e.IdInstancia);
            var un_alumno = repo_alumnos.GetAlumnoByDNI(e.DNIAlumno);
            var una_calificacion = new CalificacionNoNumerica { Descripcion = e.Calificacion };
            DateTime una_fecha;
            DateTime.TryParse(e.Fecha, out una_fecha);
            evaluaciones_a_guardar.Add(new Evaluacion(e.Id, una_instancia, un_alumno, un_curso, una_calificacion, una_fecha));
        }

        var evaluaciones_originales = new List<Evaluacion>();
        foreach (var e in evaluaciones_originales_dto)
        {
            var un_curso = repo_cursos.GetCursoById(e.IdCurso);
            var una_instancia = un_curso.Materia.Modalidad.InstanciasDeEvaluacion.Find(i => i.Id == e.IdInstancia);
            var un_alumno = repo_alumnos.GetAlumnoByDNI(e.DNIAlumno);
            var una_calificacion = new CalificacionNoNumerica { Descripcion = e.Calificacion };
            DateTime una_fecha;
            DateTime.TryParse(e.Fecha, out una_fecha);
            evaluaciones_originales.Add(new Evaluacion(e.Id, una_instancia, un_alumno, un_curso, una_calificacion, una_fecha));
        }

        var evaluaciones_nuevas_posta = evaluaciones_a_guardar.FindAll(e => e.Calificacion.Descripcion != "" && e.Fecha.Date != DateTime.MinValue);
        var evaluaciones_originales_posta = evaluaciones_originales.FindAll(e => e.Calificacion.Descripcion != "" && e.Fecha.Date != DateTime.MinValue);

        var res = RepoEvaluaciones().GuardarEvaluaciones(evaluaciones_originales_posta, evaluaciones_nuevas_posta, usuario);
        foreach (var e in res)
        {
            evaluaciones_no_procesadas.Add(new EvaluacionDto()
            {
                Id = e.Id,
                DNIAlumno = e.Alumno.Documento,
                IdCurso = e.Curso.Id,
                IdInstancia = e.InstanciaEvaluacion.Id,
                Calificacion = e.Calificacion.Descripcion,
                Fecha = e.Fecha.ToShortDateString(),
                DescripcionInstancia = e.InstanciaEvaluacion.Descripcion
            });
        }
        return evaluaciones_no_procesadas.ToArray();
    }

    [WebMethod]
    public List<FichaAlumnoAsistenciaPorCursoDto> GetAsistenciasDelAlumno(int id_alumno)
    {
        var articulador = new Articulador();
        var detalle_asistencias_alumno_por_curso = new List<FichaAlumnoAsistenciaPorCursoDto>();

        var alumno = RepoAlumnos().GetAlumnoByDNI(id_alumno);
        var total_cursos = RepositorioDeCursos().GetCursos();
        var cursos_del_alumno = RepositorioDeCursos().GetCursosParaElAlumno(alumno, total_cursos);

        var asistencias = RepoAsistencias().GetAsistencias();

        foreach (var curso in cursos_del_alumno)
        {
            //int asist_per = 0;
            //int inasist_per = 0;
            int asist_acum = 0;
            int inasist_acum = 0;
            int dias_no_cursados_acum = 0;
            var asist_dto = new List<AcumuladorDto>();
            var calendario = articulador.CalendarioDelCurso(curso);
            var dias_de_cursada = articulador.GetDiasDeCursadaEntre(curso.FechaInicio, curso.FechaFin, calendario);
            var total_horas_catedra = articulador.TotalDeHorasCatedra(curso, dias_de_cursada);
            //ver asistencias a dto
            //var asist = asistencias.FindAll(x => x.IdCurso.Equals(curso.Id) && x.IdAlumno.Equals(a.Id) && x.Fecha >= fecha_inicio_planilla && x.Fecha <= fecha_fin_planilla);
            var asist_totales = asistencias.FindAll(asis => asis.IdCurso.Equals(curso.Id) && asis.IdAlumno.Equals(alumno.Id));
            //foreach (var item in asist)
            //{
            //    asist_per = item.AcumularHorasAsistidas(asist_per);
            //    inasist_per = item.AcumularHorasNoAsistidas(inasist_per);
            //    //
            //    asist_dto.Add(new AcumuladorDto() { Id = item.Id, Fecha = item.Fecha, IdAlumno = item.IdAlumno, IdCurso = item.IdCurso, Valor = item.Valor });
            //}
            foreach (var item in asist_totales)
            {
                asist_acum = item.AcumularHorasAsistidas(asist_acum);
                inasist_acum = item.AcumularHorasNoAsistidas(inasist_acum);
                if (item.Valor.Equals("-"))
                {
                    dias_no_cursados_acum += 1;
                }

            }

            var detalle_asist = new FichaAlumnoAsistenciaPorCursoDto()
            {
                Materia = curso.Materia.Nombre,
                Ciclo = curso.Materia.Ciclo.Nombre,
                AsistenciasTotal = asist_acum,
                InasistenciasTotal = inasist_acum,
                TotalHorasCatedra = total_horas_catedra,
                FechaInicio = curso.FechaInicio.ToShortDateString(),
                FechaFin = curso.FechaFin.ToShortDateString(),
                DiasSinCursarTotal = dias_no_cursados_acum,
            };

            //var detalle_asist = new DetalleAsistenciasDto()
            //{
            //    IdAlumno = a.Id,
            //    IdCurso = curso.Id,
            //    Asistencias = asist_dto.ToArray(),
            //    AsistenciasPeriodo = asist_per,
            //    InasistenciasPeriodo = inasist_per,
            //    AsistenciasTotal = asist_acum,
            //    InasistenciasTotal = inasist_acum
            //};
            detalle_asistencias_alumno_por_curso.Add(detalle_asist);
        }

        return detalle_asistencias_alumno_por_curso;

    }

    [WebMethod]
    public List<FichaAlumnoEvaluacionPorCursoDto> GetEvaluacionesDeAlumno(int dni)
    {

        var alumno = RepoAlumnos().GetAlumnoByDNI(dni);
        var cursos = RepositorioDeCursos().GetCursos();
        var cursos_del_alumno = RepositorioDeCursos().GetCursosParaElAlumno(alumno, cursos);
        var articulador = new Articulador();

        List<Evaluacion> evaluaciones = RepoEvaluaciones().GetEvaluacionesAlumno(alumno);
        List<FichaAlumnoEvaluacionPorCursoDto> CursosConEvaluacionesDto = new List<FichaAlumnoEvaluacionPorCursoDto>();
        //Curso curso = RepositorioDeCursos().GetCursoById(id_curso);



        foreach (var c in cursos_del_alumno)
        {

            CursosConEvaluacionesDto.Add(new FichaAlumnoEvaluacionPorCursoDto()
            {
                CodigoError = 0,
                MensajeError = "",
                Materia = c.Materia.Nombre,
                Ciclo = c.Materia.Ciclo.Nombre,
                Docente = c.Docente.Nombre,
                CalificacionFinal = articulador.CalificacionDelCurso(c, evaluaciones),
                Estado = articulador.EstadoDelAlumnoParaElCurso(c, evaluaciones),
                FechaFin = c.FechaFin.ToShortDateString(),
                Evaluaciones = EvaluacionesDTOPorCurso(evaluaciones, c).ToArray(),
            });


        }

        return CursosConEvaluacionesDto;
    }

    private List<EvaluacionDto> EvaluacionesDTOPorCurso(List<Evaluacion> evaluaciones, Curso curso)
    {
        List<EvaluacionDto> evaluacionesDto = new List<EvaluacionDto>();

        evaluaciones.FindAll(e => e.Curso.Id.Equals(curso.Id)).ForEach(e =>
        {
            evaluacionesDto.Add(new EvaluacionDto()
            {
                Id = e.Id,
                DNIAlumno = e.Alumno.Documento,
                IdCurso = e.Curso.Id,
                Calificacion = e.Calificacion.Descripcion,
                Fecha = e.Fecha.ToShortDateString(),
                IdInstancia = e.InstanciaEvaluacion.Id,
                DescripcionInstancia = e.InstanciaEvaluacion.Descripcion
            });
        });

        return evaluacionesDto;
    }

    [WebMethod]
    public PlanillaEvaluacionesDto GetPlanillaEvaluaciones(int id_curso, int id_instancia, Usuario usuario)
    {
        var curso = RepositorioDeCursos().GetCursoById(id_curso);
        List<Evaluacion> evaluaciones = RepoEvaluaciones().GetEvaluacionesPorCurso(curso);
        var organigrama = new RepositorioDeOrganigrama(Conexion()).GetOrganigrama();

        List<EvaluacionDto> EvaluacionesDto = new List<EvaluacionDto>();

        evaluaciones.ForEach(e =>
        {
            EvaluacionesDto.Add(new EvaluacionDto()
            {
                Id = e.Id,
                DNIAlumno = e.Alumno.Documento,
                IdCurso = e.Curso.Id,
                Calificacion = e.Calificacion.Descripcion,
                Fecha = e.Fecha.ToShortDateString(),
                IdInstancia = e.InstanciaEvaluacion.Id,
                DescripcionInstancia = e.InstanciaEvaluacion.Descripcion
            });
        });

        var alumnos = FiltrarAlumnosPorUsuarioLogueado(usuario, curso.Alumnos(), organigrama, new AutorizadorSacc(Autorizador())).ToArray();
        var Instancias = curso.Materia.Modalidad.InstanciasDeEvaluacion;
        if (id_instancia > 0)
        {
            Instancias = Instancias.FindAll(i => i.Id.Equals(id_instancia));
        }
        var Calificaciones = evaluaciones.Select(e => e.Calificacion.Descripcion).ToList();

        foreach (var a in alumnos)
        {
            foreach (var i in Instancias)
            {
                if (EvaluacionesDto.FindAll(e => e.DNIAlumno == a.Documento && e.IdInstancia == i.Id).Count == 0)
                {
                    EvaluacionesDto.Add(new EvaluacionDto()
                    {
                        Id = 0,
                        DNIAlumno = a.Documento,
                        IdCurso = id_curso,
                        Calificacion = string.Empty,
                        Fecha = string.Empty,
                        IdInstancia = i.Id,
                        DescripcionInstancia = i.Descripcion
                    });
                }
            }
        }

        var Planilla = new PlanillaEvaluacionesDto()
        {
            CodigoError = 0,
            MensajeError = "",
            Alumnos = alumnos,
            Evaluaciones = EvaluacionesDto.ToArray(),
            Instancias = Instancias.ToArray()
        };

        return Planilla;
    }

    [WebMethod]
    public ObservacionDTO[] GetObservaciones()
    {
        var observaciones_dto = new List<ObservacionDTO>();
        var observaciones = RepositorioDeCursos().GetObservaciones();

        foreach (var o in observaciones)
        {
            observaciones_dto.Add(new ObservacionDTO()
            {
                id = o.Id,
                FechaCarga = o.FechaCarga.ToShortDateString(),
                Relacion = o.Relacion,
                PersonaCarga = o.PersonaCarga,
                Pertenece = o.Pertenece,
                Asunto = o.Asunto,
                ReferenteMDS = o.ReferenteMDS,
                Seguimiento = o.Seguimiento,
                Resultado = o.Resultado,
                FechaResultado = o.FechaResultado.ToShortDateString(),
                ReferenteRespuestaMDS = o.ReferenteRespuestaMDS
            });
        }
        return observaciones_dto.ToArray();
    }

    [WebMethod]
    public ObservacionDTO[] GuardarObservaciones(ObservacionDTO[] observaciones_nuevas_dto, ObservacionDTO[] observaciones_originales_dto, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "administracion_macc")) throw (new Exception("El usuario no tiene permisos para administrar macc"));
        var observaciones_no_procesadas = new List<ObservacionDTO>();
        var repo_cursos = RepositorioDeCursos();

        var observaciones_a_guardar = new List<Observacion>();
        foreach (var o in observaciones_nuevas_dto)
        {
            DateTime fecha_carga;
            DateTime.TryParse(o.FechaCarga, out fecha_carga);
            DateTime fecha_rta;
            DateTime.TryParse(o.FechaResultado, out fecha_rta);

            if (fecha_carga.Year.Equals(0001))
            {
                fecha_carga = new DateTime(1900, 01, 01);
            }
            if (fecha_rta.Year.Equals(0001))
            {
                fecha_rta = new DateTime(1900, 01, 01);
            }

            observaciones_a_guardar.Add(new Observacion(o.id, fecha_carga, o.Relacion, o.PersonaCarga, o.Pertenece, o.Asunto, o.ReferenteMDS, o.Seguimiento, o.Resultado, fecha_rta, o.ReferenteRespuestaMDS));
        }

        var observaciones_originales = new List<Observacion>();
        foreach (var o in observaciones_originales_dto)
        {
            DateTime fecha_carga;
            DateTime.TryParse(o.FechaCarga, out fecha_carga);
            DateTime fecha_rta;
            DateTime.TryParse(o.FechaResultado, out fecha_rta);
            observaciones_originales.Add(new Observacion(o.id, fecha_carga, o.Relacion, o.PersonaCarga, o.Pertenece, o.Asunto, o.ReferenteMDS, o.Seguimiento, o.Resultado, fecha_rta, o.ReferenteRespuestaMDS));
        }

        var res = repo_cursos.GuardarObservaciones(observaciones_originales, observaciones_a_guardar, usuario);
        foreach (var o in res)
        {
            observaciones_no_procesadas.Add(new ObservacionDTO()
            {
                id = o.Id,
                FechaCarga = o.FechaCarga.ToShortDateString(),
                Relacion = o.Relacion,
                PersonaCarga = o.PersonaCarga,
                Pertenece = o.Pertenece,
                Asunto = o.Asunto,
                ReferenteMDS = o.ReferenteMDS,
                Seguimiento = o.Seguimiento,
                Resultado = o.Resultado,
                FechaResultado = o.FechaResultado.ToShortDateString(),
                ReferenteRespuestaMDS = o.ReferenteRespuestaMDS
            });
        }
        return observaciones_no_procesadas.ToArray();

    }

    #region mau


    [WebMethod]
    public int GetDniPorAlias(string alias)
    {
        return RepositorioDeUsuarios().GetDniPorAlias(alias);
    }

    [WebMethod]
    public bool RecuperarUsuario(string criterio)
    {
        bool ejecucion_ok = Autorizador().RecuperarUsuario(criterio);
        return ejecucion_ok;
    }


    [WebMethod]
    public bool RegistrarNuevoUsuario(AspiranteAUsuario aspirante)
    {
        return Autorizador().RegistrarNuevoUsuario(aspirante, 0);
    }

    [WebMethod]
    public bool VerificarUsuario(int id_usuario, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mau_verificar_usuarios")) throw (new Exception("El usuario no tiene permisos para verificar usuario"));
        return Autorizador().VerificarUsuario(id_usuario, usuario);
    }

    #endregion


    #region CV

    [WebMethod]
    [XmlInclude(typeof(CurriculumVitaeNull))]
    public CurriculumVitae GetCurriculum(int id)
    {
        CurriculumVitae curriculum = RepoCurriculum().GetCV(id);

        return curriculum;
    }

    [WebMethod]
    [XmlInclude(typeof(CurriculumVitaeNull))]
    public CurriculumVitae GetCurriculumVersion(int id, DateTime fechaDeLaVersion)
    {
        CurriculumVitae curriculum = RepoCurriculum().GetCV(id, fechaDeLaVersion);

        return curriculum;
    }

    [WebMethod]
    public void GuardarCvDatosPersonales(CvDatosPersonales datosPersonalesDTO, Usuario usuario)
    {
        RepoCurriculum().GuardarCVDatosPersonales(datosPersonalesDTO, usuario);
    }

    [WebMethod]
    public Postulacion PostularseA(Postulacion postulacion, Usuario usuario)
    {
        // var postulaciones = new Postulacion();
        //throw new Exception("a");
        return RepoPostulaciones().PostularseA(postulacion, usuario);
    }

    [WebMethod]
    public string GuardarPostulacionManual(string postulacion, string datosPersonales, string folio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "postular_inscripcion_manual")) throw (new Exception("El usuario no tiene permisos inscripcion manual"));

        // var postulaciones = new Postulacion();
        return RepoPostulaciones().InscripcionManual(postulacion, datosPersonales, folio, usuario);
    }

    [WebMethod]
    public string TraerReporteDePostulaciones(int idEtapa, Usuario usuario)
    {
        return JsonConvert.SerializeObject(RepoPostulaciones().traerReportesDePostulaciones(idEtapa)).ToString();
    }


    [WebMethod]
    public bool ActualizarInformesGDEDeUnaPostulacion(string numeroPostulacion, string setDeInformes, Usuario usuario)
    {
        var informesArray = (JArray)JsonConvert.DeserializeObject(setDeInformes);
        return RepoPostulaciones().ActualizarInformesGDE(numeroPostulacion, informesArray, usuario.Owner.Id);
    }



    [WebMethod]
    public Postulacion[] GetPostulaciones(Usuario usuario)
    {
        return RepoPostulaciones().GetPostulacionesDe(usuario.Owner.Id).ToArray();
    }

    [WebMethod]
    public Postulacion GetPostulacionesPorCodigo(string codigo)
    {
        var postulacion = RepoPostulaciones().GetPostulacionesPorCodigo(codigo);
        /*var usu_etapas = (from etapa in postulacion.Etapas
                          select new
                          {
                              IdUsuario = etapa.IdUsuario,
                              UsuarioEtapa = RepositorioDeUsuarios().GetUsuarioPorIdPersona(etapa.IdUsuario).Owner.Nombre + " " + RepositorioDeUsuarios().GetUsuarioPorIdPersona(etapa.IdUsuario).Owner.Apellido,
                              IdEtapa = etapa.Etapa.Id,
                              Descripcion = etapa.Etapa.Descripcion,
                              Fecha = etapa.Fecha
                          }).ToList();


        var usu = RepositorioDeUsuarios().GetUsuarioPorIdPersona(postulacion.Etapas[0].IdUsuario);
        object datos_postulacion = new
        {
            Postulacion = postulacion,
            UsuarioPostulacion = usu.Owner.Nombre + " " + usu.Owner.Apellido,
            UsuEtapas = usu_etapas
        };
        return Newtonsoft.Json.JsonConvert.SerializeObject(datos_postulacion);*/
        return postulacion;
    }

    [WebMethod(EnableSession = true)]
    public EtapaConcurso[] BuscarEtapasConcurso(string criterio)
    {
        var etapas = RepoPostulaciones().BuscarEtapasConcurso().ToArray();
        return etapas;
    }

    [WebMethod]
    public Comite GetComite(int idComite)
    {
        return RepoComites().GetComiteById(idComite);
    }

    [WebMethod]
    public void InsEtapaPostulacion(int id_postulacion, int id_etapa_postulacion, Usuario usuario)
    {
        RepoPostulaciones().InsEtapaPostulacion(id_postulacion, id_etapa_postulacion, usuario.Id);
    }

    #region CVAntecedentesAcademicos
    [WebMethod]
    public CvEstudios GuardarCvAntecedenteAcademico(CvEstudios antecedentesAcademicos_nuevo, Usuario usuario)
    {
        return (CvEstudios)RepoCurriculum().GuardarItemCV(antecedentesAcademicos_nuevo, usuario);
    }

    [WebMethod]
    public CvEstudios ActualizarCvAntecedenteAcademico(CvEstudios antecedentesAcademicos_nuevo, Usuario usuario)
    {
        return (CvEstudios)RepoCurriculum().ActualizarCv(antecedentesAcademicos_nuevo, usuario);
    }

    [WebMethod]
    public bool EliminarCvAntecedenteAcademico(CvEstudios antecedente_a_borrar, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(antecedente_a_borrar, usuario);
    }
    #endregion

    #region CVActividadesCapacitacion
    [WebMethod]
    public CvCertificadoDeCapacitacion GuardarCvActividadCapacitacion(CvCertificadoDeCapacitacion actividad_capacitacion, Usuario usuario)
    {
        return (CvCertificadoDeCapacitacion)RepoCurriculum().GuardarItemCV(actividad_capacitacion, usuario);
    }

    [WebMethod]
    public CvCertificadoDeCapacitacion ActualizarCvActividadCapacitacion(CvCertificadoDeCapacitacion actividad_capacitacion, Usuario usuario)
    {
        return (CvCertificadoDeCapacitacion)RepoCurriculum().ActualizarCv(actividad_capacitacion, usuario);
    }

    [WebMethod]
    public bool EliminarCvActividadCapacitacion(CvCertificadoDeCapacitacion actividad, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(actividad, usuario);
    }
    #endregion

    #region CVActividadesDocentes
    [WebMethod]
    public CvDocencia GuardarCvActividadDocente(CvDocencia docencia_nuevo, Usuario usuario)
    {
        return (CvDocencia)RepoCurriculum().GuardarItemCV(docencia_nuevo, usuario);
    }

    [WebMethod]
    public CvDocencia ActualizarCvActividadDocente(CvDocencia docencia_nuevo, Usuario usuario)
    {
        return (CvDocencia)RepoCurriculum().ActualizarCv(docencia_nuevo, usuario);
    }

    [WebMethod]
    public bool EliminarCvActividadDocente(CvDocencia actividades_docentes_a_borrar, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(actividades_docentes_a_borrar, usuario);
    }

    #endregion

    #region CvEventoAcademico
    [WebMethod]
    public CvEventoAcademico GuardarCvEventoAcademico(CvEventoAcademico eventoAcademico_nuevo, Usuario usuario)
    {
        return (CvEventoAcademico)RepoCurriculum().GuardarItemCV(eventoAcademico_nuevo, usuario);
    }

    [WebMethod]
    public CvEventoAcademico ActualizarCvEventoAcademico(CvEventoAcademico eventoAcademico_nuevo, Usuario usuario)
    {
        return (CvEventoAcademico)RepoCurriculum().ActualizarCv(eventoAcademico_nuevo, usuario);
    }

    [WebMethod]
    public bool EliminarCvEventosAcademicos(CvEventoAcademico evento, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(evento, usuario);
    }


    [WebMethod]
    public CVTiposDeEventoAcademico[] BuscarTiposEventosAcademicos(string criterio)
    {
        return RepositorioDeTiposDeEventoAcademico.Nuevo(Conexion()).Find(criterio).ToArray();
    }


    [WebMethod]
    public CVCaracterDeParticipacionEvento[] BuscarCaracterParticipacionEvento(string criterio, Usuario usuario)
    {
        return RepositorioDeCaracterDeEventoAcademico.Nuevo(Conexion()).Find(criterio).FindAll(i => i.SoloVisiblePara == usuario.Id || i.SoloVisiblePara == -1).ToArray();
    }

    [WebMethod]
    public CVCaracterDeParticipacionEvento AgregarCaracterParticipacionEvento(string descripcion, Usuario usuario)
    {
        var obj = new CVCaracterDeParticipacionEvento();
        obj.Descripcion = descripcion;
        obj.SoloVisiblePara = usuario.Id;
        return RepositorioDeCaracterDeEventoAcademico.Nuevo(Conexion()).Guardar(obj, usuario.Id);
    }

    [WebMethod]
    public CVInstitucionesEventos[] BuscarInstitucionesEvento(string criterio, Usuario usuario)
    {
        return RepositorioDeInstitucionesEventosAcademicos.Nuevo(Conexion()).Find(criterio).FindAll(i => i.SoloVisiblePara == usuario.Id || i.SoloVisiblePara == -1).ToArray();
    }

    [WebMethod]
    public CVInstitucionesEventos AgregarInstitucionesEvento(string descripcion, Usuario usuario)
    {
        var obj = new CVInstitucionesEventos();
        obj.Descripcion = descripcion;
        obj.SoloVisiblePara = usuario.Id;
        return RepositorioDeInstitucionesEventosAcademicos.Nuevo(Conexion()).Guardar(obj, usuario.Id);
    }

    [WebMethod]
    public CVTitulosAntecedentesAcademicos[] BuscarTitulosAntecedentesAcademicos(string criterio, Usuario usuario)
    {
        return RepositorioDeTitulosAntecedentesAcademicos.Nuevo(Conexion()).Find(criterio).FindAll(i => i.SoloVisiblePara == usuario.Id || i.SoloVisiblePara == -1).ToArray();
    }

    [WebMethod]
    public CVTitulosAntecedentesAcademicos AgregarTitulosAntecedentesAcademicos(string descripcion, Usuario usuario)
    {
        var obj = new CVTitulosAntecedentesAcademicos();
        obj.Descripcion = descripcion;
        obj.SoloVisiblePara = usuario.Id;
        return RepositorioDeTitulosAntecedentesAcademicos.Nuevo(Conexion()).Guardar(obj, usuario.Id);
    }

    #endregion

    #region CvPublicaciones

    [WebMethod]
    public CvPublicaciones GuardarCvPublicacionesTrabajos(CvPublicaciones publicaciones_nuevas, Usuario usuario)
    {
        return (CvPublicaciones)RepoCurriculum().GuardarItemCV(publicaciones_nuevas, usuario);
    }

    [WebMethod]
    public CvPublicaciones ActualizarCvPublicaciones(CvPublicaciones publicacion_nueva, Usuario usuario)
    {
        return (CvPublicaciones)RepoCurriculum().ActualizarCv(publicacion_nueva, usuario);
    }

    [WebMethod]
    public bool EliminarCvPublicacionesTrabajos(CvPublicaciones publicaciones_trabajos_a_borrar, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(publicaciones_trabajos_a_borrar, usuario);
    }

    #endregion

    #region CVMatriculas
    [WebMethod]
    public CvMatricula GuardarCvMatricula(CvMatricula matricula, Usuario usuario)
    {
        return (CvMatricula)RepoCurriculum().GuardarItemCV(matricula, usuario);
    }

    [WebMethod]
    public CvMatricula ActualizarCvMatricula(CvMatricula matricula, Usuario usuario)
    {
        return (CvMatricula)RepoCurriculum().ActualizarCv(matricula, usuario);
    }

    [WebMethod]
    public bool EliminarCvMatricula(CvMatricula id_matricula, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(id_matricula, usuario);
    }
    #endregion

    #region CvInstituciones
    [WebMethod]
    public CvInstitucionesAcademicas GuardarCvInstitucionAcademica(CvInstitucionesAcademicas competencia_informatica, Usuario usuario)
    {
        return (CvInstitucionesAcademicas)RepoCurriculum().GuardarItemCV(competencia_informatica, usuario);
    }

    [WebMethod]
    public CvInstitucionesAcademicas ActualizarCvInstitucionAcademica(CvInstitucionesAcademicas competencia_informatica, Usuario usuario)
    {
        return (CvInstitucionesAcademicas)RepoCurriculum().ActualizarCv(competencia_informatica, usuario);
    }

    [WebMethod]
    public bool EliminarCvInstitucionAcademica(CvInstitucionesAcademicas id_competencia, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(id_competencia, usuario);
    }
    #endregion

    #region CvExperiencias
    [WebMethod]
    public CvExperienciaLaboral GuardarCvExperienciaLaboral(CvExperienciaLaboral experiencia, Usuario usuario)
    {
        return (CvExperienciaLaboral)RepoCurriculum().GuardarItemCV(experiencia, usuario);
    }

    [WebMethod]
    public CvExperienciaLaboral ActualizarCvExperienciaLaboral(CvExperienciaLaboral experiencia, Usuario usuario)
    {
        return (CvExperienciaLaboral)RepoCurriculum().ActualizarCv(experiencia, usuario);
    }

    [WebMethod]
    public bool EliminarCvExperienciaLaboral(CvExperienciaLaboral id_experiencia, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(id_experiencia, usuario);
    }

    #endregion

    #region CvIdiomas

    [WebMethod]
    public CvIdiomas GuardarCvIdiomaExtranjero(CvIdiomas idioma_extranjero, Usuario usuario)
    {
        return (CvIdiomas)RepoCurriculum().GuardarItemCV(idioma_extranjero, usuario);
    }

    [WebMethod]
    public CvIdiomas ActualizarCvIdiomaExtranjero(CvIdiomas idioma_extranjero, Usuario usuario)
    {
        return (CvIdiomas)RepoCurriculum().ActualizarCv(idioma_extranjero, usuario);
    }

    [WebMethod]
    public bool EliminarCvIdiomaExtranjero(CvIdiomas id_capacidad, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(id_capacidad, usuario);
    }


    #endregion

    #region CvComptenciasInformaticas
    [WebMethod]
    public CvCompetenciasInformaticas GuardarCvCompetenciaInformatica(CvCompetenciasInformaticas competencia_informatica, Usuario usuario)
    {
        return (CvCompetenciasInformaticas)RepoCurriculum().GuardarItemCV(competencia_informatica, usuario);
    }

    [WebMethod]
    public CvCompetenciasInformaticas ActualizarCvCompetenciaInformatica(CvCompetenciasInformaticas competencia_informatica, Usuario usuario)
    {
        return (CvCompetenciasInformaticas)RepoCurriculum().ActualizarCv(competencia_informatica, usuario);
    }

    [WebMethod]
    public bool EliminarCvCompetenciaInformatica(CvCompetenciasInformaticas id_competencia, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(id_competencia, usuario);
    }

    #endregion

    #region CvOtrasCapacidades

    [WebMethod]
    public CvCapacidadPersonal GuardarCvOtraCapacidad(CvCapacidadPersonal capacidad_personal, Usuario usuario)
    {
        return (CvCapacidadPersonal)RepoCurriculum().GuardarItemCV(capacidad_personal, usuario);
    }

    [WebMethod]
    public CvCapacidadPersonal ActualizarCvOtraCapacidad(CvCapacidadPersonal capacidad_personal, Usuario usuario)
    {
        return (CvCapacidadPersonal)RepoCurriculum().ActualizarCv(capacidad_personal, usuario);
    }

    [WebMethod]
    public bool EliminarCvOtraCapacidad(CvCapacidadPersonal id_capacidad, Usuario usuario)
    {
        return RepoCurriculum().EliminarCV(id_capacidad, usuario);
    }
    #endregion

    //[WebMethod]
    //public Puesto[] GetCvPuestos()
    //{
    //    return RepoPuestos().GetPuestos().ToArray();
    //}

    [WebMethod]
    public General.Perfil[] GetCvPerfiles()
    {
        return RepoPerfiles().GetPerfiles().ToArray();
    }



    [WebMethod]
    public Postulacion GetPostulacionById(int idpersona, int idpostulacion)
    {
        Postulacion postulacion = RepoPostulaciones().GetPostulacionById(idpersona, idpostulacion);
        // postulacion.Perfil.DocumentacionRequerida = RepoPerfiles().GetFoliablesDelPerfil(postulacion.Perfil.Id);
        CurriculumVitae cv = RepoCurriculum().GetCV(idpersona);
        // postulacion.CrearDocumentacionARecibir(postulacion.Perfil.DocumentacionRequerida, cv);

        return postulacion;
    }

    [WebMethod]
    public Postulacion[] BuscarPostulacionesDeInscriptos(int id_comite)
    {

        List<EtapaConcurso> etapas = new List<EtapaConcurso> { ConstantesConcursar.EtapaInscripcionDocumental ,
                                                               ConstantesConcursar.EtapaAdmitidos,
                                                               ConstantesConcursar.EtapaNoAdmitidos
                                                                };

        return RepoPostulaciones().BuscarPostulacionesPorEtapas(id_comite, etapas).ToArray();
    }


    [WebMethod]
    public void GuardarFolios(string nro_inscripcion, int nro_ficha_inscripcion, int nro_foto, int nro_foto_dni, int nro_foto_titulo, int nro_cv, int nro_doc_respaldo, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "etapa_admision")) throw (new Exception("El usuario no tiene permisos pre inscripcion documental"));

        RepoPostulaciones().GuardarFolios(nro_inscripcion, DateTime.Today, nro_ficha_inscripcion, nro_foto, nro_foto_dni, nro_foto_titulo, nro_cv, nro_doc_respaldo, usuario.Id);
    }

    [WebMethod]
    public Folios ObtenerFolios(string nro_inscripcion, string dni_postulante, string fecha_postulacion)
    {

        return RepoPostulaciones().ObtenerFolios(nro_inscripcion, dni_postulante, fecha_postulacion);
    }

    [WebMethod]
    public void GuardarCambiosEnAdmitidos(List<Postulacion> postulaciones, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "etapa_admision")) throw (new Exception("El usuario no tiene permisos para admision"));

        RepoPostulaciones().GuardarCambiosEnAdmitidos(postulaciones, usuario.Id);
    }

    [WebMethod]
    public Postulacion[] BuscarPostulacionesDePreInscriptos(int id_comite)
    {
        List<EtapaConcurso> etapas = new List<EtapaConcurso> { ConstantesConcursar.EtapaPreinscripcionDocumental };
        return RepoPostulaciones().BuscarPostulacionesPorEtapas(id_comite, etapas).ToArray();
    }

    [WebMethod]
    public bool GuardarEtapaAPostulaciones(int[] idpostulaciones, int id_etapa_postulacion, Usuario usuario)
    {
        try
        {
            idpostulaciones.ToList().ForEach(id => RepoPostulaciones().InsEtapaPostulacion(id, id_etapa_postulacion, usuario.Id));
        }
        catch (Exception e)
        {

            throw e;
        }

        return true;

    }

    [WebMethod]
    public ResumenDePostulaciones[] GetTableroDeControlDePostulaciones(int id_usuario)
    {

        return RepoPostulaciones().TableroDeControlPostulaciones().ToArray();

    }


    [WebMethod]
    public PantallaRecepcionDocumentacion GetPantallaRecepcionDocumentacion(Postulacion postulacion)
    {
        CurriculumVitae cv = RepoCurriculum().GetCV(postulacion.Postulante.Id);
        //RepositorioDePerfiles repoPerfiles = new RepositorioDePerfiles(Conexion());
        //repoPerfiles.GetRequisitosDelPerfil(postulacion.Perfil.Id).ForEach(r => postulacion.Perfil.Requiere(r));

        RepositorioDeFoliados repo = new RepositorioDeFoliados(Conexion());
        CreadorDePantallas creador = new CreadorDePantallas();
        List<DocumentacionRecibida> listaDocRecibida = repo.GetDocumentacionRecibidaByPostulacion(postulacion);

        PantallaRecepcionDocumentacion pantalla = creador.CrearPantalla(cv, postulacion.Perfil, postulacion, listaDocRecibida);

        return pantalla;
    }

    [WebMethod]
    public bool GuardarDocumentacionRecibida(int id_postulacion, DocumentacionRecibida[] lista_doc_recibida, Usuario usuario)
    {
        RepositorioDeFoliados repo = new RepositorioDeFoliados(Conexion());

        //List<DocumentacionRecibida> listaDocRecibida = repo.GetDocumentacionRecibidaByPostulacion(postulacion);

        repo.GuardarDocumentacionRecibida(lista_doc_recibida.ToList(), usuario);

        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@idPostulacion", id_postulacion);
        var etapas = RepoPostulaciones().GetPostulaciones(parametros).First().Etapas;

        //VALIDO que hayan documentos para guardar y que la postulacion tenga solo la etapa de preinscripcion
        //Le paso ETAPA 2 que es la de PREINSCRIPCION DOCUMENTAL
        if (etapas.Last().Etapa.Id.Equals(ConstantesConcursar.EtapaPreinscripcionWeb.Id))
        {
            RepoPostulaciones().InsEtapaPostulacion(id_postulacion, 2, usuario.Id);
            return true;
        }
        else
        {
            return false;
        }

    }

    [WebMethod]
    public bool PasarAEtapaInscripto(int id_postulacion, Usuario usuario)
    {

        Dictionary<string, object> parametros = new Dictionary<string, object>();
        parametros.Add("@idPostulacion", id_postulacion);
        var etapas = RepoPostulaciones().GetPostulaciones(parametros).First().Etapas;

        //VALIDO que hayan documentos para guardar y que la postulacion tenga solo la etapa de preinscripcion
        //Le paso ETAPA 2 que es la de PREINSCRIPCION DOCUMENTAL
        if (etapas.Last().Etapa.Id.Equals(ConstantesConcursar.EtapaPreinscripcionWeb.Id))
        {
            RepoPostulaciones().InsEtapaPostulacion(id_postulacion, ConstantesConcursar.EtapaPreinscripcionDocumental.Id, usuario.Id);
            return true;
        }
        else
        {
            return false;
        }

    }


    [WebMethod]
    public bool EliminarPostulacionPorUsuario(Postulacion postulacion, Usuario usuario)
    {
        return RepoPostulaciones().EliminarPostulacionPorUsuario(postulacion, usuario);

    }

    [WebMethod]
    public ModalidadDeInscripcion[] BuscarModalidadDeInscripcion(string criterio)
    {
        var repo = new RepositorioDePostulaciones(Conexion());
        return repo.BuscarModalidadesDeInscripcion().ToArray();
    }

    [WebMethod]
    public Provincia[] BuscarProvincias(string criterio)
    {
        return RepositorioDeProvincias.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public Nacionalidad[] BuscarNacionalidades(string criterio)
    {
        return RepositorioDeNacionalidades.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public NivelDeIdioma[] BuscarNivelesDeIdioma(string criterio)
    {
        return RepositorioDeNivelesDeIdioma.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public CvNivelCompetenciaInformatica[] BuscarNivelCompetenciaInformatica(string criterio)
    {
        return RepositorioDeNivelesCompetenciasInformaticas.Nuevo(Conexion()).Find(criterio).ToArray();
    }


    [WebMethod]
    public CvTipoCompetenciaInformatica[] BuscarTiposCompetenciaInformatica(string criterio)
    {
        return RepositorioDeTiposCompetenciaInformatica.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public CvConocimientoCompetenciaInformatica[] BuscarConocimientoCompetenciaInformatica(string criterio, Usuario usuario)
    {
        return RepositorioDeConocimientosCompetenciasInformaticas.Nuevo(Conexion()).Find(criterio).FindAll(i => i.SoloVisiblePara == usuario.Id || i.SoloVisiblePara == -1).ToArray();
    }

    [WebMethod]
    public CvConocimientoCompetenciaInformatica AgregarConocimientoCompetenciaInformatica(string descripcion, int tipo, Usuario usuario)
    {
        var obj = new CvConocimientoCompetenciaInformatica();
        obj.Descripcion = descripcion;
        obj.SoloVisiblePara = usuario.Id;
        obj.Tipo = tipo;
        return RepositorioDeConocimientosCompetenciasInformaticas.Nuevo(Conexion()).Guardar(obj, usuario.Id);
    }

    [WebMethod]
    public CvModalidadContratacion[] BuscarModalidadContratacion(string criterio)
    {
        return RepositorioDeModalidadContratacion.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public CVInstitucionesEventos[] BuscarInstitucionesEventosAcademicos(string criterio)
    {
        return RepositorioDeInstitucionesEventosAcademicos.Nuevo(Conexion()).Find(criterio).ToArray();
    }


    [WebMethod]
    public Pais[] BuscarPaises(string criterio)
    {
        return RepositorioDePaises.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public UnidadDeTiempo[] BuscarUnidadesTiempo(string criterio)
    {
        return RepositorioDeUnidadesDeTiempo.Nuevo(Conexion()).Find(criterio).ToArray();
    }


    [WebMethod]
    public EstadoCivil[] BuscarEstadosCiviles(string criterio)
    {
        return RepositorioDeEstadosCiviles.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public TipoDeDocumento[] BuscarTiposDeDocumento(string criterio)
    {
        return RepositorioDeTiposdeDocumento.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public Sexo[] BuscarSexos(string criterio)
    {
        return RepositorioDeSexos.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public AmbitoLaboral[] BuscarAmbitosLaborales(string criterio)
    {
        return RepositorioDeAmbitoLaboral.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public NivelDeDocencia[] BuscarNivelesDeDocencia(string criterio)
    {
        return RepositorioDeNivelesDeDocencia.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public NivelDeEstudio[] BuscarNivelesDeEstudio(string criterio)
    {
        return RepositorioDeNivelesDeEstudio.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    [WebMethod]
    public Localidad[] BuscarLocalidades(string criterio)
    {
        return RepositorioDeLocalidades.Nuevo(Conexion()).Find(criterio).ToArray();
    }

    #endregion

    #region Formularios
    [WebMethod]
    public Formulario GetFormulario(string criterio, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "formularios_ingreso")) throw (new Exception("El usuario no tiene permisos para formularios"));
        return new RepositorioDeFormularios(Conexion()).GetFormulario(criterio, usuario);
    }

    [WebMethod]
    public void GuardarCambiosEnFormulario(Formulario form, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "formularios_ingreso")) throw (new Exception("El usuario no tiene permisos para formularios"));
        new RepositorioDeFormularios(Conexion()).GuardarDatos(form, usuario);
    }

    [WebMethod]
    public void GuardarCabeceraFormulario(Formulario form, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "formularios_ingreso")) throw (new Exception("El usuario no tiene permisos para formularios"));
        //el true es para poner en impreso
        new RepositorioDeFormularios(Conexion()).GuardarVersion(form, usuario, true);
    }

    [WebMethod]
    public int GetIdCabeceraFormulario(Formulario form, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "formularios_ingreso")) throw (new Exception("El usuario no tiene permisos para formularios"));
        //el true es para poner en impreso
        return new RepositorioDeFormularios(Conexion()).GetUltimaCabeceraFormulario(form, usuario);
    }
    #endregion

    #region Reportes
    [WebMethod]
    public string GetConsultaRapida(int documento, Usuario usuario)
    {

        return RepositorioDePersonas().GetConsultaRapida(documento);

    }


    [WebMethod]
    public string GetCarreraAdministrativa(int documento, Usuario usuario)
    {

        return RepositorioDePersonas().GetCarreraAdministrativa(documento);

    }

    #endregion

    #region mobi

    [WebMethod]
    public Tarjeton NuevoTarjeton(int id_Bien, string codigo_Holograma, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "0.ingreso_a_bienes")) throw (new Exception("El usuario no tiene permisos para el modulo de bienes"));
        var repo = new RepositorioTarjetones(Conexion());
        return new Tarjeton();//repo.NuevoTarjeton(id_Bien);
    }

    [WebMethod]
    public RespuestaVehiculo ObtenerVehiculoPorCodigoWeb(string id_verificacion)
    {
        var repo = new RepositorioDeVehiculos(Conexion());
        var una_respuesta = new RespuestaVehiculo();
        una_respuesta.Respuesta = 1;
        if (String.IsNullOrEmpty(id_verificacion))
        {
            una_respuesta.Respuesta = 0;
            return una_respuesta;
        }
        una_respuesta.vehiculo = repo.ObtenerVehiculoPorCodigoWeb(id_verificacion);
        if (string.IsNullOrEmpty(una_respuesta.vehiculo.Dominio))
        {
            una_respuesta.Respuesta = 0;
        }
        return una_respuesta;
    }


    [WebMethod]
    public RespuestaVehiculo ObtenerVehiculoPorID(int id_bien)
    {
        var repo = new RepositorioDeVehiculos(Conexion());
        var una_respuesta = new RespuestaVehiculo();
        una_respuesta.Respuesta = 1;
        if (id_bien == null)
        {
            una_respuesta.Respuesta = 0;
            return una_respuesta;
        }
        una_respuesta.vehiculo = repo.ObtenerVehiculoPorID(id_bien);
        if (string.IsNullOrEmpty(una_respuesta.vehiculo.Dominio))
        {
            una_respuesta.Respuesta = 0;
        }
        return una_respuesta;
    }


    [WebMethod]
    public MoBi_Area[] Mobi_GetAreasUsuario(int IdUsuario)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetAreasUsuario(IdUsuario);
    }

    [WebMethod]
    public MoBi_Area[] Mobi_GetAreasUsuarioCBO(int IdUsuario, int IdTipoBien, bool MostrarSoloAreasConBienes)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetAreasUsuarioCBO(IdUsuario, IdTipoBien, MostrarSoloAreasConBienes);
    }

    [WebMethod]
    public MoBi_Area[] Mobi_GetAreasDelUsuarioBienesDisponibles(int IdUsuario, int IdTipoBien, bool Incluir_Dependencias, bool Mostrar_Todas_Areas)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetAreasDelUsuarioBienesDisponibles(IdUsuario, IdTipoBien, Incluir_Dependencias, Mostrar_Todas_Areas);
    }


    [WebMethod]
    public MoBi_TipoBien[] Mobi_GetTipoBien()
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetTipoDeBienes();
    }

    [WebMethod]
    public MoBi_Bien Mobi_GetImagenesBienPorId(int id_bien)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetImagenesBienPorId(id_bien);
    }

    [WebMethod]
    public MoBi_Bien[] Mobi_GetBienesDelArea(int IdArea, int IdTipoBien)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetBienesDelArea(IdArea, IdTipoBien);
    }

    [WebMethod]
    public MoBi_Bien[] Mobi_GetBienesDelAreaRecepcion(int IdArea, int IdTipoBien)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetBienesDelAreaRecepcion(IdArea, IdTipoBien);
    }

    [WebMethod]
    public MoBi_Bien[] Mobi_GetBienesDisponibles(int IdArea, int IdTipoBien, int IdUsuario)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetBienesDisponibles(IdArea, IdTipoBien, IdUsuario);
    }

    [WebMethod]
    public MoBi_Evento[] Mobi_GetEventosBien(int IdBien)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetEventosBien(IdBien);
    }

    [WebMethod]
    public MoBi_Agente[] Mobi_GetAgentesArea(int IdArea)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetAgentes(IdArea);
    }

    [WebMethod]
    public bool Mobi_GuardarEventoBien(MoBi_Evento.enumTipoEvento tipoEvento, int IdBien, int IdArea, int IdPersona, string Observaciones, int IdUser)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GuardarNuevoEventoBien(tipoEvento, IdBien, IdArea, IdPersona, Observaciones, IdUser);
    }

    [WebMethod]
    public bool Mobi_AsignarImagenABien(int id_bien, int id_imagen, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "1.alta_baja_asoc_bien")) throw (new Exception("El usuario no tiene permisos editar bienes"));
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.AsignarImagenABien(id_bien, id_imagen);
    }

    [WebMethod]
    public bool Mobi_DesAsignarImagenABien(int id_bien, int id_imagen, Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "1.alta_baja_asoc_bien")) throw (new Exception("El usuario no tiene permisos editar bienes"));
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.DesAsignarImagenABien(id_bien, id_imagen);
    }


    [WebMethod]
    public AccionesMobi[] Mobi_GetAcciones(int id_bien, int id_estado, int id_area_seleccionada, int id_area_receptora, int id_area_propietaria)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.GetAcciones(id_bien, id_estado, id_area_seleccionada, id_area_receptora, id_area_propietaria);
    }


    [WebMethod]
    public bool Mobi_Alta_Vehiculo_Evento(int id_bien, int id_tipoevento, string observaciones, int id_receptor_area, int id_receptor_persona, Usuario usuario)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.Mobi_Alta_Vehiculo_Evento(id_bien, id_tipoevento, observaciones, usuario.Id, id_receptor_area, id_receptor_persona);
    }

    [WebMethod]
    public bool Mobi_Alta_Vehiculo_Evento_Persona(int id_bien, int id_tipoevento, string observaciones, int id_receptor_persona, Usuario usuario)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.Mobi_Alta_Vehiculo_Evento_Persona(id_bien, id_tipoevento, observaciones, usuario.Id, id_receptor_persona);
    }


    [WebMethod]
    public MoBi_Evento[] Mobi_GetMovimientos(int id_bien)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.Mobi_GetMovimientos(id_bien);
    }


    [WebMethod]
    public string ImportarArchivoExcel(string nombreArchivo, string detalleExcel, Usuario usuario)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        var respuesta = rMoBi.ImportarArchivoExcel(nombreArchivo, detalleExcel, usuario.Id);
        return respuesta;
    }

    [WebMethod]
    public string MOBI_GET_EventosxTipoBienxClaveAtributoBienxValor(int Id_ClaveAtributoBien, string valor, int Id_TipoBien, int tipoConsulta)
    {
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        return rMoBi.MOBI_GET_EventosxTipoBienxClaveAtributoBienxValor(Id_ClaveAtributoBien, valor, Id_TipoBien, tipoConsulta);
    }

    [WebMethod]
    public string AsociarTarjeton(string patente,string observacion,string vigencia, string codHolograma, Usuario usuario)
    {
         
        try
        {
            //"0.ingreso_a_bienes"  es el viejo modulo
            if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "MOBI_Alta_Bien")) throw (new Exception("El usuario no tiene permisos para el modulo de bienes 2"));

            var repo = new RepositorioTarjetones(Conexion());
            var repo2 = new RepositorioDeVehiculos(Conexion());
            byte[] bytes;
            byte[] bytes2;
            String csv;
            String codigoTarjeton;
            int idTarjeton;
            Vehiculo vehiculo;
            CSVUtil csvUtil = new CSVUtil();
            String nombrePDF="";

            //obtengo el idVehiculo
            int idBienVehiculo = repo2.ObtenerIdVehiculoxDominio(patente);

            //csv = csvUtil.generarCodigoCSV(bytes2, CSVUtil.SAF_MDS, id_recibo, CSVUtil.TIPO_RECIBO_DIGITAL);
            codigoTarjeton = csvUtil.GenerarCodigo();

            //Datos a llenar del tarjeton;  vehiculo: dominio,marca,modelo,motor,chasis     tarjeton: vigencia  codigowebtarjeton               
            vehiculo = repo2.ObtenerDatosVehiculoPorID(idBienVehiculo);

            var modelo_para_pdf = new List<object>() { vehiculo, codigoTarjeton, vigencia};
            var converter = new GenTarjetonToPdfConverter();
            var mapa_para_pdf = converter.CrearMapa(modelo_para_pdf);
            var creador_pdf = new CreadorDePdfs();
            var contenidoQR = "";
            /*ubicacion pagina, tamaños y escalas de las imagenes de QR*/
            List<int> listaPaginaImagen = new List<int>() { 1,2,2 };
            List<int> listaTamEscalasImagen = new List<int>() { 60, 136, 244 };/*320los tamaños de los qr el ancho y alto son iguales*/
            /*los valores del eje x van desde la izquierda hacia la derecha y del eje y desde abajo hacia arriba*/
            List<float> listaPosicionesX = new List<float>() { 745, 54, 560 };
            List<float> listaPosicionesY = new List<float>() { 65, 335, 300 };

            //codeQRImage.ScaleAbsolute(75, 75);
            //codeQRImage.SetAbsolutePosition(420, 115);
            //"https://rrhh.desarrollosocial.gob.ar/verificador/csv.aspx?c=" + csv

            contenidoQR = mapa_para_pdf.Values.ElementAt(6); //obtengo el septimo elemento osea el valor del key:texto7
            contenidoQR = contenidoQR+" - Verificar Validez: "+"https://rrhh.desarrollosocial.gob.ar/Vehiculos/DetalleVehiculo.aspx?"+ codigoTarjeton;

            //el nombre del pdf generado va a ser el idRecibo
            nombrePDF = "Tarjeton " + patente;
            bytes = creador_pdf.FillPDF(TemplatePath("tarjeton.pdf"), nombrePDF, mapa_para_pdf);
            bytes2 = creador_pdf.AgregarQRsAPDF(bytes, contenidoQR, listaPaginaImagen, listaTamEscalasImagen, listaPosicionesX, listaPosicionesY);

            //hasta aqui el pdf esta rellenado         

            //genero los registros de asociacion necesarios para el evento
            idTarjeton = repo.AsociarTarjeton(idBienVehiculo, patente, observacion, vigencia, codHolograma, codigoTarjeton, usuario.Id);
            
            //obtengo al pdf y lo lleno

            
            return JsonConvert.SerializeObject(new
            {
                DioError = false,
                Respuesta = Convert.ToBase64String(bytes2),
                nombrePDF = nombrePDF
            });

        }
        catch (Exception e)
        {           //de esta forma al devolver siempre un valor valido NUNCA se va a entrar al .onerror de las llamadas desde el codigo java script de la web     
            return JsonConvert.SerializeObject(new
            {
                DioError = true,
                MensajeDeErrorAmigable = "Se produjo un error al asociar el tarjeton",
                error = e
            });
        }

       

    }

    [WebMethod]
    public string Mobi_AltaVehiculo(int idTipoBien, string dominio, string segmento, string marca, string modelo, string nummotor, string numchasis, string anio, string[] dataForm, Usuario usuario)
    {
        //JObject jObject = JObject.FromObject(dataForm);
        //dynamic data = JsonConvert.DeserializeObject(dataForm);
        //object data2 = JsonConvert.DeserializeObject(dataForm);

        //RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        //return rMoBi.GetTipoDeBienes();

        //
        RepositorioMoBi rMoBi = new RepositorioMoBi(Conexion());
        var repo = new RepositorioDeVehiculos(Conexion());
        int id_Bien;
        try {
            //verifico si ese dominio ya esta dado de alta
            id_Bien = repo.ObtenerIdVehiculoxDominio(dominio);
            if (id_Bien == -1 ){
                id_Bien = repo.AltaVehiculo(dominio, segmento, marca, modelo, nummotor, numchasis, anio, usuario.Id);
                //subo las imagenes y las relaciono al bien
                foreach (string i in dataForm)
                {
                    int id_imagen = this.SubirImagen(i);
                    rMoBi.AsignarImagenABien(id_Bien, id_imagen);
                }

                return JsonConvert.SerializeObject(new
                {
                    DioError = false/*,
               *Respuesta = Convert.ToBase64String(bytes2),
                nombrePDF = nombrePDF*/
                });
            }
            else
            {
                return JsonConvert.SerializeObject(new
                {
                    DioError = true,
                    MensajeDeErrorAmigable = "El dominio ya existe"
                });

            }
            
        }
        catch (Exception e)
        {
            return JsonConvert.SerializeObject(new
            {
                DioError = true,
                MensajeDeErrorAmigable = "Se produjo un error en la incorporacion del vehiculo",
                error = e
            });
        }
        
    }
    #endregion


    #region archivos

    [WebMethod]
    public Imagen GetThumbnail(int id_imagen, int alto, int ancho)
    {
        return new RepositorioDeImagenes(Conexion()).GetThumbnail(id_imagen, alto, ancho);
    }

    [WebMethod]
    public Imagen GetImagen(int id_imagen)
    {
        return new RepositorioDeImagenes(Conexion()).GetImagen(id_imagen);
    }

    [WebMethod]
    public int SubirImagen(string bytes_imagen)
    {
        return new RepositorioDeImagenes(Conexion()).SubirImagen(bytes_imagen);
    }


    #endregion
    #region Portal
    [WebMethod]
    public string getAreaDeLaPersona(Usuario usuario)
    {
        //aaaaaaaaaaaaaaaaaaaaaaaa
        return RepoLegajo().getAreaDeLaPersona(usuario.Owner.Documento);
    }
    [WebMethod]
    public string getAreaDeUnaPersona(int documento, Usuario usuario)
    {
        //aaaaaaaaaaaaaaaaaaaaaaaa
        return RepoLegajo().getAreaDeLaPersona(documento);
    }

    [WebMethod]
    public string GetEstudios(Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.getEstudios(usuario.Owner.Documento);
    }

    [WebMethod]
    public string GetDatosPersonales(Usuario usuario)
    {

        return RepositorioDePersonas().GetConsultaRapida(usuario.Owner.Documento);

    }

    [WebMethod]
    public string GetFamiliares(Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.getFamiliares(usuario.Owner.Documento);

    }

    [WebMethod]
    public string GetLicenciasEnTramite(Usuario usuario)
    {
        var personas = new List<Persona>();
        var persona = new Persona();
        persona = usuario.Owner;
        personas.Add(persona);
        var respuesta = this.GetAusentesEntreFechasPara(personas.ToArray(), DateTime.Today, new DateTime(9999, 12, 31));
        if (respuesta.Count() > 0)
        {
            return JsonConvert.SerializeObject(respuesta.First().Inasistencias);
        }
        return "";

    }
    [WebMethod]
    public string GetLicenciasOrdinariasDisponibles(Usuario usuario)
    {
        var concepto = new ConceptoDeLicencia();
        concepto.Id = 1;
        return JsonConvert.SerializeObject(this.GetSaldoLicencia(usuario.Owner, concepto));
    }

    [WebMethod]
    public string GetPsicofisicos(Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();


        return repo.getPsicofisicos(usuario.Owner.Documento);
    }
    
    [WebMethod]
    public string GetLiquidaciones(int anio, int mes, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();
        string datosPersonales = RepositorioDePersonas().GetConsultaRapida(usuario.Owner.Documento);
        Type type = datosPersonales.GetType();
        string cuil = JObject.Parse(datosPersonales).Property("Cuil").Value.ToString();

        return repo.GetLiquidaciones(anio, mes, cuil);
    }
    [WebMethod]
    public void EnviarNotificacion(string notificacion, List<int> documentos, string titulo, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();
        repo.EnviarNotificacion(notificacion, documentos, titulo, usuario.Owner.Id);
    }

    [WebMethod]
    public string GetDesignaciones(Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.getDesignaciones(usuario.Owner.Documento);

    }

    [WebMethod]
    public string GetConsultasDePortal(Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetConsultasDePortal(usuario.Owner.Id);

    }
    [WebMethod]
    public string GetNotificacionesDePortal(Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetNotificacionesDePortal(usuario.Owner.Documento);

    }

    [WebMethod]
    public string GetConsultasTodasDePortal(int estado)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetConsultasTodasDePortal(estado);

    }

    [WebMethod]
    public General.MAU.Ticket[] getTicketsPorFuncionalidad(Usuario usuario)
    {
        RepositorioDeTickets repo = new RepositorioDeTickets(Conexion());

        return repo.GetTicketsPorFuncionalidad(usuario.Id).ToArray();

    }

    [WebMethod]
    public General.MAU.ResumenTipoTicket[] getResumenTicketsPorFuncionalidad(Usuario usuario)
    {
        RepositorioDeTickets repo = new RepositorioDeTickets(Conexion());

        return repo.GetResumenTicketsPorFuncionalidad(usuario.Id).ToArray();
    }


    [WebMethod]
    public string GetDomicilioPendientePorAlerta(int idAlerta, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();
        return repo.GetDomicilioPendientePorAlerta(idAlerta);
    }

    [WebMethod]
    public string GetNotificacionesTodasDePortal()
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetNotificacionesTodasDePortal();

    }

    [WebMethod]
    public string GetDomicilioPendiente(Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetDomicilioPendientePorPersona(usuario.Owner.Id);

    }

    [WebMethod]
    public bool GuardarDomicilioPendiente(CvDomicilio domicilio, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GuardarDomicilioPendiente(domicilio, usuario);

    }

    [WebMethod]
    public string VerificarDomicilioPendiente(int idAlerta, int documento, string folio, int idUsuarioCreador, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.VerificarCambioDomicilio(idAlerta, documento, folio, idUsuarioCreador, usuario.Id);

    }

    [WebMethod]
    public string MostrarDestinatariosDeLaNotificacion(int id_notificacion, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.MostrarDestinatariosDeLaNotificacion(id_notificacion);

    }

    [WebMethod]
    public string GetConsultasDePortalParaUnUsuario(int idUsuarioAConsultar)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetConsultasDePortal(idUsuarioAConsultar);

    }




    [WebMethod]
    public void ResponderConsulta(int id, string respuesta, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        repo.ResponderConsulta(id, respuesta, usuario);

    }


    [WebMethod]
    public string GetTiposDeConsultaDePortal()
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetTiposDeConsultaDePortal();

    }

    [WebMethod]
    public void MarcarConsultaComoLeida(int id_consulta)
    {
        RepoLegajo().MarcarConsultaComoLeida(id_consulta);
    }
    [WebMethod]
    public void MarcarNotificacionComoLeida(int id, Usuario usuario)
    {
        RepoLegajo().MarcarNotificacionComoLeida(id, usuario.Owner.Documento);
    }

    [WebMethod]
    public string GetDetalleDeConsulta(int id_consulta)
    {
        return RepoLegajo().GetDetalleDeConsulta(id_consulta);
    }
    [WebMethod]
    public Consulta GetConsultaPorIdTicket(int id_ticket)
    {
        return RepoLegajo().GetConsultaPorIdTicket(id_ticket);
    }

    [WebMethod]
    public int NuevaConsultaDePortal(int id_tipo_consulta, string motivo, Usuario usuario)
    {
        return RepoLegajo().NuevaConsultaDePortal(usuario, id_tipo_consulta, motivo);

    }
    [WebMethod]
    public void RepreguntarConsulta(int id_consulta, string motivo, Usuario usuario)
    {
        RepoLegajo().RepreguntarConsulta(id_consulta, motivo, usuario);
    }
    [WebMethod]
    public void CerrarConsulta(int id_consulta, int calificacion, Usuario usuario)
    {
        RepoLegajo().CerrarConsulta(id_consulta, calificacion, usuario);
    }

    [WebMethod]
    public int GetConsultasNoLeidas(Usuario usuario)
    {
        return RepoLegajo().GetConsultasNoLeidas(usuario.Owner.Id);
    }

    [WebMethod]
    public string GetConsultasDePortalNoLeidas(Usuario usuario)
    {
        return RepoLegajo().GetConsultasDePortalNoLeidas(usuario.Owner.Id);
    }


    [WebMethod]
    public string GetDesignacionActual(Usuario usuario)
    {

        return RepositorioDePersonas().GetConsultaRapida(usuario.Owner.Documento);

    }

    [WebMethod]
    public string GetCarreraAdministrativaPortal(Usuario usuario)
    {

        return RepoLegajo().getCarreraAdminstrativa((usuario.Owner.Documento));

    }

    [WebMethod]
    public string GetDocumentosDelLegajo(Usuario usuario)
    {

        return RepoLegajo().getDocumentosLegajo(usuario.Owner.Legajo);

    }

    [WebMethod]
    public Usuario GetUsuarioLogueado(Usuario usuario)
    {
        return usuario;
    }


    #endregion

    #region DatosAbiertos

    [WebMethod]
    public ConsultaOPD[] GetConsultasOPD(Usuario usuario)
    {
        RepositorioDeDatosAbiertos repositorio = new RepositorioDeDatosAbiertos(Conexion());

        return repositorio.getConsultas().FindAll(c => Autorizador().ElUsuarioTienePermisosPara(usuario.Id, c.Funcionalidad)).ToArray();
    }

    [WebMethod]
    public string EjecutarConsultaOPD(int idConsulta, Usuario usuario)
    {
        RepositorioDeDatosAbiertos repositorio = new RepositorioDeDatosAbiertos(Conexion());
        return repositorio.EjecutarConsultaOPD(idConsulta);
    }


    [WebMethod]
    public string ExcelMapaDelEstado(Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "mapa_del_estado")) throw (new Exception("El usuario no tiene permisos para el modulo de datos abiertos-Mapa del estado"));
        try
        {
            RepositorioDeDatosAbiertos repositorio = new RepositorioDeDatosAbiertos(Conexion());

            return repositorio.ExcelGeneradoMapaDelEstado();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    [WebMethod]
    public string ExcelPlanificacionDotaciones(Usuario usuario)
    {
        if (!Autorizador().ElUsuarioTienePermisosPara(usuario.Id, "PC_Planificacion_Dotaciones")) throw (new Exception("El usuario no tiene permisos para el modulo de datos abiertos-Planificación de dotaciones"));
        try
        {
            RepositorioDeDatosAbiertos repositorio = new RepositorioDeDatosAbiertos(Conexion());

            return repositorio.ExcelPlanificacionDotaciones();
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }




    #endregion

    #region EvaluacionesDesempenio

    [WebMethod]
    public List<DetallePreguntas> GetFormularioDeEvaluacion(int idNivel, int idEvaluacion, int idEvaluado, Usuario usuario)
    {
        RepositorioEvaluacionDesempenio repositorio = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        return repositorio.getFormularioDeEvaluacion(idNivel, idEvaluado, idEvaluacion);
    }

    [WebMethod]
    public string InsertarEvaluacion(int idEvaluado, int idFormulario, int periodo, int idEval, string pregYRtas, int estado, string id_doc_electronico, Usuario usuario)
    {
        try
        {
            RepositorioEvaluacionDesempenio repositorio = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
            if (periodo == 0)
            {
                PeriodoEvaluacion periodo_actual = repositorio.GetUltimoPeriodoEvaluacion();
                periodo = periodo_actual.id_periodo;
            }
            //var preguntasYRespuestas = JsonConvert.DeserializeObject(pregYRtas);

            var criterio_deserializado = (JArray)JsonConvert.DeserializeObject(pregYRtas);

            var id_evaluador = repositorio.GetIdEvaluadorDelUsuario(usuario);


            //FC:si viene un idEvaluacion entonces llamo a update, si viene 0 llamo a insert
            if (idEval != 0)
            {
                if (estado == 1 && id_doc_electronico == string.Empty)
                {
                    GeneradorDeEtiquetas repoTicket = new GeneradorDeEtiquetas(Conexion());
                    id_doc_electronico = repoTicket.GenerarTicket("EVAL_DES");
                }
                repositorio.deleteEvaluacionDetalle(idEval);
                repositorio.updateEvaluacion(idEval, idEvaluado, id_evaluador, idFormulario, periodo, estado, id_doc_electronico);
            }
            else
            {
                if (estado == 1)
                {
                    GeneradorDeEtiquetas repoTicket = new GeneradorDeEtiquetas(Conexion());
                    id_doc_electronico = repoTicket.GenerarTicket("EVAL_DES");
                }

                //FC:Inserto la cabecera de la evaluacion
                idEval = repositorio.insertarEvaluacion(idEvaluado, id_evaluador, idFormulario, periodo, estado, id_doc_electronico);
            }

            //var item1 = preguntasYRespuestas;


            foreach (var item in criterio_deserializado)
            {
                int idPregunta = (int)item.First.First;
                int idRespuesta = (int)item.Last.Last;

                repositorio.insertarEvaluacionDetalle(idEval, idPregunta, idRespuesta);
            }

            return "ok";
        }
        catch (Exception e)
        {

            var error = "Server error message='" + e.Message + "' stacktrace='" + e.StackTrace.ToString() + "'";
            if (e.InnerException != null)
            {
                error += "innerException message= '" + e.InnerException.Message + "' innerException stacktrace='" + e.InnerException.StackTrace.ToString() + "'";
            }
            return error;

        }

    }

    #endregion

    private RepositorioLicencias RepoLicencias()
    {
        return new RepositorioLicencias(Conexion());
    }

    private RepositorioDeAlumnos RepoAlumnos()
    {
        return new RepositorioDeAlumnos(Conexion(), RepositorioDeCursos(), RepoModalidades());
    }

    private RepositorioDeModalidades RepoModalidades()
    {
        return new RepositorioDeModalidades(Conexion());
    }

    private RepositorioPersonas RepoPersonas()
    {
        return new RepositorioPersonas();
    }

    private RepositorioDeMaterias RepositorioDeMaterias()
    {
        return new RepositorioDeMaterias(Conexion(), RepositorioDeCursos(), RepoModalidades());
    }

    private RepositorioDeCursos RepositorioDeCursos()
    {
        return new RepositorioDeCursos(Conexion());
    }

    private RepositorioDePersonas RepositorioDePersonas()
    {
        return General.Repositorios.RepositorioDePersonas.NuevoRepositorioDePersonas(Conexion());
    }

    private RepositorioDeAreas RepositorioDeAreas()
    {
        return General.Repositorios.RepositorioDeAreas.NuevoRepositorioDeAreas(Conexion());
    }

    private RepositorioDeEntidades RepositorioDeEntidades()
    {
        return General.Repositorios.RepositorioDeEntidades.NuevoRepositorioDeEntidades(Conexion());
    }

    private RepositorioLegajo RepoLegajo()
    {
        return General.Repositorios.RepositorioLegajo.NuevoRepositorioDeLegajos(Conexion());
    }

    private RepositorioRecibosFirmados RepoReciboFirmado()
    {
        return General.Repositorios.RepositorioRecibosFirmados.NuevoRepositorioRecibosFirmados(Conexion());
    }

    private RepositorioVerificador RepoVerificador()
    {
        return General.Repositorios.RepositorioVerificador.NuevoRepositorioVerificador(Conexion());
    }

    private IRepositorioDeUsuarios RepositorioDeUsuarios()
    {
        return new RepositorioDeUsuarios(Conexion(), RepositorioDePersonas());
    }

    private IRepositorioDeFuncionalidades RepositorioDeFuncionalidades()
    {
        return General.MAU.RepositorioDeFuncionalidades.NuevoRepositorioDeFuncionalidades(Conexion());
    }

    private IRepositorioDeFuncionalidadesDeUsuarios RepositorioDeFuncionalidadesDeUsuarios()
    {
        return General.MAU.RepositorioDeFuncionalidadesDeUsuarios.NuevoRepositorioDeFuncionalidadesDeUsuarios(Conexion(), RepositorioDeFuncionalidades());
    }

    private Autorizador Autorizador()
    {
        var repo_funcionalidades = RepositorioDeFuncionalidades();
        var repo_funcionalidades_de_usuarios = RepositorioDeFuncionalidadesDeUsuarios();
        var repo_accesos = RepositorioDeAccesosAURL.NuevoRepositorioDeAccesosAURL(Conexion(), repo_funcionalidades);

        return new Autorizador(repo_funcionalidades_de_usuarios,
            RepositorioDeMenues.NuevoRepositorioDeMenues(Conexion(), repo_accesos),
            RepositorioDeUsuarios(),
            RepoPermisosSobreAreas(),
            repo_accesos,
            Conexion());
    }

    private RepositorioDePermisosSobreAreas RepoPermisosSobreAreas()
    {
        return RepositorioDePermisosSobreAreas.NuevoRepositorioDePermisosSobreAreas(Conexion(), RepositorioDeAreas());
    }

    private RepositorioDeDocentes RepositorioDeDocentes()
    {
        return new RepositorioDeDocentes(Conexion(), RepositorioDeCursos());
    }

    private RepositorioDeAsistencias RepoAsistencias()
    {
        return new RepositorioDeAsistencias(Conexion());
    }

    private RepositorioDeEspaciosFisicos RepoEspaciosFisicos()
    {
        return new RepositorioDeEspaciosFisicos(Conexion(), RepositorioDeCursos());
    }

    private RepositorioDeEvaluacion RepoEvaluaciones()
    {
        return new RepositorioDeEvaluacion(Conexion(), RepositorioDeCursos(), RepoAlumnos());
    }

    private RepositorioDeCurriculum RepoCurriculum()
    {
        return new RepositorioDeCurriculum(Conexion());
    }

    private RepositorioDePerfiles RepoPerfiles()
    {
        return new RepositorioDePerfiles(Conexion());
    }

    private RepositorioDePostulaciones RepoPostulaciones()
    {
        return new RepositorioDePostulaciones(Conexion());
    }

    private RepositorioDeComites RepoComites()
    {
        return RepositorioDeComites.Nuevo(Conexion());
    }

    private RepositorioDeArchivos RepositorioDeArchivos()
    {
        return new RepositorioDeArchivos(Conexion());
    }

    private RepositorioDeArchivosFirmados RepositorioDeArchivosFirmados()
    {
        return new RepositorioDeArchivosFirmados(Conexion());
    }

    private RepositorioDeArchivosMigrados RepositorioDeArchivosMigrados()
    {
        return new RepositorioDeArchivosMigrados(Conexion());
    }

    private RepositorioDeCovid19 RepositorioDeCovid19()
    {
        return new RepositorioDeCovid19(Conexion());
    }

    /*Excel Consulta Personas DDJJ104*/
    [WebMethod]
    public string ConsultaExcelDDJJ104_Persona(string criterio, Usuario usuario)
    {
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);

        int mesdesde = (int)((JValue)criterio_deserializado["mesdesde"]);
        int aniodesde = (int)((JValue)criterio_deserializado["aniodesde"]);
        int meshasta = (int)((JValue)criterio_deserializado["meshasta"]);
        int aniohasta = (int)((JValue)criterio_deserializado["aniohasta"]);
        int nrodoc_persona = (int)((JValue)criterio_deserializado["nrodoc_persona"]);
        int estado = (int)((JValue)criterio_deserializado["estado"]);
        int orden = (int)((JValue)criterio_deserializado["orden"]);

        DDJJ104_Consulta[] personas = GetConsultaIndividualPorPersona(mesdesde, aniodesde, meshasta, aniohasta, nrodoc_persona, estado, orden, usuario);

        try
        {
            DataTable table_resumen = new DataTable();
            table_resumen.TableName = "Agentes";

            table_resumen.Columns.Add("Mes");
            table_resumen.Columns.Add("Año");
            table_resumen.Columns.Add("Area");
            table_resumen.Columns.Add("Apellido");
            table_resumen.Columns.Add("Nombre");
            table_resumen.Columns.Add("FechaGeneracion");
            table_resumen.Columns.Add("UsuarioGeneracion");
            table_resumen.Columns.Add("FechaRecibido");
            table_resumen.Columns.Add("UsuarioRecibido");
            table_resumen.Columns.Add("Firmante");
            table_resumen.Columns.Add("Categoria");
            table_resumen.Columns.Add("ModContratación");
            table_resumen.Columns.Add("Estado");

            foreach (var item in personas)
            {
                table_resumen.Rows.Add(
                    item.mes.ToString(),
                    item.anio.ToString(),
                    item.area_generacion.Nombre,
                    item.persona.Apellido,
                    item.persona.Nombre,
                    item.fecha_generacion,
                    item.usuario_generacion,
                    item.fecha_recibido,
                    item.usuario_recibido,
                    item.firmante,
                    item.persona.Categoria,
                    item.mod_contratacion,
                    item.estado_descrip
                    );
            }

            var workbook = new XLWorkbook();
            var dataTable_resumen = table_resumen;
            var ws = workbook.Worksheets.Add("Consulta");

            ws.Style.Font.FontSize = 9;
            ws.Style.Font.FontName = "Verdana";

            ws.Cell(1, 1).Value = "Mes";
            ws.Cell(1, 2).Value = "Anio";
            ws.Cell(1, 3).Value = "Area";
            ws.Cell(1, 4).Value = "Apellido";
            ws.Cell(1, 5).Value = "Nombre";
            ws.Cell(1, 6).Value = "Fecha generacion";
            ws.Cell(1, 7).Value = "Usuario generacion";
            ws.Cell(1, 8).Value = "Fecha recibido";
            ws.Cell(1, 9).Value = "Usuario recibido";
            ws.Cell(1, 10).Value = "Firmante";
            ws.Cell(1, 11).Value = "Categoria";
            ws.Cell(1, 12).Value = "Mod Contratacion";
            ws.Cell(1, 13).Value = "Estado";

            ws.Cell(1, 1).Style.Font.Bold = true;
            ws.Cell(1, 2).Style.Font.Bold = true;
            ws.Cell(1, 3).Style.Font.Bold = true;
            ws.Cell(1, 4).Style.Font.Bold = true;
            ws.Cell(1, 5).Style.Font.Bold = true;
            ws.Cell(1, 6).Style.Font.Bold = true;
            ws.Cell(1, 7).Style.Font.Bold = true;
            ws.Cell(1, 8).Style.Font.Bold = true;
            ws.Cell(1, 9).Style.Font.Bold = true;
            ws.Cell(1, 10).Style.Font.Bold = true;
            ws.Cell(1, 11).Style.Font.Bold = true;
            ws.Cell(1, 12).Style.Font.Bold = true;
            ws.Cell(1, 13).Style.Font.Bold = true;

            var rangeWithData = ws.Cell(2, 1).InsertData(dataTable_resumen.AsEnumerable());

            using (var ms = new MemoryStream())
            {
                workbook.SaveAs(ms);
                return Convert.ToBase64String(ms.ToArray());
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }


    /*Excel Consulta Area DDJJ104*/
    [WebMethod]
    public string ConsultaExcelDDJJ104_Area(string criterio, Usuario usuario)
    {
        var criterio_deserializado = (JObject)JsonConvert.DeserializeObject(criterio);

        int mesdesde = (int)((JValue)criterio_deserializado["mesdesde"]);
        int aniodesde = (int)((JValue)criterio_deserializado["aniodesde"]);
        int meshasta = (int)((JValue)criterio_deserializado["meshasta"]);
        int aniohasta = (int)((JValue)criterio_deserializado["aniohasta"]);
        int area = (int)((JValue)criterio_deserializado["area"]);
        int estado = (int)((JValue)criterio_deserializado["estado"]);
        int orden = (int)((JValue)criterio_deserializado["orden"]);

        DDJJ104_Consulta[] consulta_area = GetConsultaPorArea(mesdesde, aniodesde, meshasta, aniohasta, area, estado, orden, usuario);

        try
        {
            DataTable table_resumen = new DataTable();
            table_resumen.TableName = "Areas";

            table_resumen.Columns.Add("Mes");
            table_resumen.Columns.Add("Año");
            table_resumen.Columns.Add("Area");
            table_resumen.Columns.Add("FechaGeneracion");
            table_resumen.Columns.Add("UsuarioGeneracion");
            table_resumen.Columns.Add("FechaRecibido");
            table_resumen.Columns.Add("UsuarioRecibido");
            table_resumen.Columns.Add("Firmante");
            table_resumen.Columns.Add("Estado");

            foreach (var item in consulta_area)
            {
                table_resumen.Rows.Add(
                    item.mes.ToString(),
                    item.anio.ToString(),
                    item.area_generacion.Nombre,
                    item.fecha_generacion,
                    item.usuario_generacion,
                    item.fecha_recibido,
                    item.usuario_recibido,
                    item.firmante,
                    item.estado_descrip
                    );
            }

            var workbook = new XLWorkbook();
            var dataTable_resumen = table_resumen;
            var ws = workbook.Worksheets.Add("Consulta");

            ws.Style.Font.FontSize = 9;
            ws.Style.Font.FontName = "Verdana";

            ws.Cell(1, 1).Value = "Mes";
            ws.Cell(1, 2).Value = "Anio";
            ws.Cell(1, 3).Value = "Area";
            ws.Cell(1, 4).Value = "Fecha generacion";
            ws.Cell(1, 5).Value = "Usuario generacion";
            ws.Cell(1, 6).Value = "Fecha recibido";
            ws.Cell(1, 7).Value = "Usuario recibido";
            ws.Cell(1, 8).Value = "Firmante";
            ws.Cell(1, 9).Value = "Estado";

            ws.Cell(1, 1).Style.Font.Bold = true;
            ws.Cell(1, 2).Style.Font.Bold = true;
            ws.Cell(1, 3).Style.Font.Bold = true;
            ws.Cell(1, 4).Style.Font.Bold = true;
            ws.Cell(1, 5).Style.Font.Bold = true;
            ws.Cell(1, 6).Style.Font.Bold = true;
            ws.Cell(1, 7).Style.Font.Bold = true;
            ws.Cell(1, 8).Style.Font.Bold = true;
            ws.Cell(1, 9).Style.Font.Bold = true;

            var rangeWithData = ws.Cell(2, 1).InsertData(dataTable_resumen.AsEnumerable());

            using (var ms = new MemoryStream())
            {
                workbook.SaveAs(ms);
                return Convert.ToBase64String(ms.ToArray());
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    [WebMethod]
    public string EvalVerificarCodigoGDE(int id_evaluacion, string codigo_gde, Usuario usuario)
    {
        //var repo = RepositorioEvaluacionDesempenio.NuevoReposi
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        repo.VerificarCodigoGDE(id_evaluacion, usuario);

        return codigo_gde;
    }

    [WebMethod]
    public string EvalGuardarCodigoGDE(int id, string codigo_gde)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        repo.EvalGuardarCodigoGDE(id, codigo_gde);
        return codigo_gde;
    }

    [WebMethod]
    public string EvalCorregirCodigoGDE(int id, string codigo_gde, Usuario usuario)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        repo.EvalGuardarCodigoGDE(id, codigo_gde);
        repo.VerificarCodigoGDE(id, usuario);
        return codigo_gde;
    }

    [WebMethod]
    public string PrintPdfEvaluacionDesempenioConFetch(AsignacionEvaluadoAEvaluador asignacion, Usuario usuario)
    {
        var repo = RepositorioEvaluacionDesempenio.NuevoRepositorioEvaluacion(Conexion());
        var asigs = repo.GetAgentesEvaluablesParaImprimir(usuario).asignaciones;
        var fetch_asignacion = asigs.Find(a => a.id_evaluacion == asignacion.id_evaluacion);
        
        return PrintPdfEvaluacionDesempenio(fetch_asignacion, usuario);
    }

    [WebMethod]
    public string PrintPdfEvaluacionDesempenio(AsignacionEvaluadoAEvaluador asignacion, Usuario usuario)
    {
        var modelo_para_pdf = new List<object>() { asignacion, usuario };
        var converter = new EvaluacionDeDesempenioToPdfConverter();
        var mapa_para_pdf = converter.CrearMapa(modelo_para_pdf);

        var creador_pdf = new CreadorDePdfs();

        byte[] bytes = creador_pdf.FillPDF(TemplatePath("Formulario Evaluacion.pdf"), "Evaluacion de Desempeño", mapa_para_pdf);
        return Convert.ToBase64String(bytes);
    }

    protected string TemplatePath(string fileName)
    {
        return Server.MapPath("~") + "\\PdfTemplates\\" + fileName;
    }

   

    #region " Control de Acceso "

    [WebMethod]
    public string CTL_ACC_Grabar_Lote(string json)
    {
        var ctlAcc = new General.CtrlAcc.RepositorioCtlAcc();
        return ctlAcc.Grabar_Lote_Control_Acceso(json);
    }

    [WebMethod]
    public string CTL_ACC_Get_Dotacion()
    {
        var ctlAcc = new General.CtrlAcc.RepositorioCtlAcc();
        return ctlAcc.Get_Dotacion_Control_Acceso();
    }

    [WebMethod]
    public string CTL_ACC_Login(string user, string pass)
    {
        return "";
    }

    [WebMethod]
    public string CTL_ACC_Get_Personas_Buscador(string param_busqueda)
    {
        var ctlAcc = new General.CtrlAcc.RepositorioCtlAcc();
        return ctlAcc.Get_Personas_Buscador(param_busqueda);
    }

    #endregion


    [WebMethod]
    public void GenerarMotivoEnPersonasNoCertificadas(int mes, int anio, DDJJ104_Consulta[] lista_DDJJ104, Usuario usuario)
    {
        RepositorioDDJJ104 ddjj = new RepositorioDDJJ104();

        DDJJ104_2001 cabe = new DDJJ104_2001();
        ddjj.GenerarMotivoEnPersonasNoCertificadas(mes, anio, lista_DDJJ104, usuario);

    }


    [WebMethod]
    public void AsignaAreaAPersonasNoCertificadas(int mes, int anio, DDJJ104_Consulta[] lista_DDJJ104, int id_area, Usuario usuario)
    {
        RepositorioDDJJ104 ddjj = new RepositorioDDJJ104();

        DDJJ104_2001 cabe = new DDJJ104_2001();
        ddjj.AsignaAreaAPersonasNoCertificadas(mes, anio, lista_DDJJ104, id_area, usuario);

    }

    #region " Recibo digital "

    [WebMethod]
    //transaccional de a partes
    public string ImportarRecibos2(int mes,int anio,string descripcionImportacion,int tipoLiquidacion,String contenidoArchivo, String nombreArchivo,Usuario usuario)
    {
        /*NOTA: importante se asume que nadie cobra mas de 999.9999,99; caso contrario se debe adecuar la conversion
         de numeros desde un string a float,pj removiendo mas de un . en la funcion Utils de conversion*/
        int idLiquidacion;
        idLiquidacion = RepositorioDeArchivosMigrados().GET_Recibos_Migrados_MaxLiq();
        //string temp;
        Utils utils = new Utils();
        Recibo r = new Recibo();
        r.cabecera = new Cabecera();
        r.detalles = new List<Detalle>();
        Boolean leoConceptos = false;
        ConexionBDSQL cn = Conexion();

        string[] lineas = contenidoArchivo.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
        //foreach (string linea in lineas)
        int longitud = lineas.Length;
        int i = 0;
        string linea;
        int Cant_Reg = 0; //indica la cantidad de recibos migrados
        var parametros = new Dictionary<string, object>();

        //codificacion para la ñ, no se porque en esta consulta el objeto dictionary no acepta a a ñ como key??????
        Encoding ascii = Encoding.UTF32;
        byte[] t = ascii.GetBytes("\u00F1");//codigo para la ñ
        string g = ascii.GetString(t);

        try
        {
            while (i < longitud)
            {
                linea = lineas[i];
                //el primer caracter sirve para delinear que parte del recibo se procesa
                //nota: en este nivel no se hace nada con las lineas que no empiezan con alguna de las opciones del case
                //a menos que se esten leyendo conceptos
                switch (linea.ElementAt(0))
                {
                    //como en cada linea se repide la informacion del recibo solo se va  a tomar los valores izquierdos
                    case '1':
                        //no hace nada solo indica el nombre de la institucion de donde vienen los recibos
                        break;
                    case '2':
                        //leo la cabecera del recibo
                        r.cabecera.reset();
                        r.cabecera.Legajo = utils.SubstringAEntero(linea.Substring(13, 7)); //Replace(Mid(Registro, 107, 7), ".", "")
                        r.cabecera.CUIL = linea.Substring(53, 13);//Mid(Registro, 147, 13)
                        r.cabecera.Oficina = int.Parse(linea.Substring(68, 3));//Mid(Registro, 162, 3)                   
                        r.cabecera.Orden = utils.SubstringAEntero(linea.Substring(76, 5)); //Replace(Mid(Registro, 170, 5), ".", "")
                        break;
                    case '3':
                        //indico que se van a empezar a leer los conceptos
                        leoConceptos = true;
                        //limpio la lista de detalles
                        r.detalles.Clear();
                        break;
                    case '4':
                        //termino de leer los conceptos,
                        leoConceptos = false;
                        //agrego mas campos al encabezado
                        r.cabecera.Bruto = utils.SubstringAFormatoFloat(linea.Substring(54, 10));//Replace(Mid(Registro, 148, 10), ",", ".")
                        r.cabecera.Descuentos = utils.SubstringAFormatoFloat(linea.Substring(71, 10)); //Replace(Mid(Registro, 165, 10), ",", ".")
                        r.cabecera.Nivel = linea.Substring(9, 1); //Mid(Registro, 103, 1)
                        r.cabecera.Grado = linea.Substring(11, 2); //Mid(Registro, 105, 2)
                        r.cabecera.OpcionJubilatoria = linea.Substring(22, 2); //Mid(Registro, 116, 2)
                        r.cabecera.Afjp = linea.Substring(32, 10).Trim(); //Mid(Registro, 126, 10)

                        break;
                    case '0':
                        //termino de leer un recibo, primera parte
                        //agrego mas campos al encabezado
                        //linea.Substring(63, 10).Replace("*"," ").Replace(",",".");
                        r.cabecera.Neto = utils.SubstringAFormatoFloat(linea.Substring(63, 10).Trim('*'));// Replace(Replace(Mid(Registro, 157, 10), ",", "."), "*", "")
                        r.cabecera.mes = int.Parse(linea.Substring(13, 2));//Mid(Registro, 107, 2)
                        r.cabecera.anio = int.Parse(linea.Substring(16, 4));//Mid(Registro, 110, 4)
                        r.cabecera.TipoLiquidacion = int.Parse(linea.Substring(29, 2));// Mid(Registro, 123, 2)

                        i++;
                        linea = lineas[i]; //leo otra linea  para obtener la fecha de ingreso
                        if (linea.Substring(117, 10) == "00/00/0000")
                        {
                            r.cabecera.FechaIngreso = new DateTime(1900, 1, 1);// Mid(Registro, 118, 10)
                        }
                        else
                        {
                            r.cabecera.FechaIngreso = new DateTime(int.Parse(linea.Substring(123, 4)), int.Parse(linea.Substring(120, 2)), int.Parse(linea.Substring(117, 2)));// Mid(Registro, 118, 10)

                        }
                        i++;
                        linea = lineas[i]; //leo otra linea  para obtener datos de la cuenta bancaria
                        r.cabecera.Banco = linea.Substring(159, 20); //Mid(Registro, 160, 20)
                        r.cabecera.CuentaBancaria = linea.Substring(149, 10);//Mid(Registro, 150, 10)
                        break;
                    case '6':
                        //termino de leer un recibo y guardo al recibo con sus conceptos

                        //agrego mas campos al encabezado
                        r.cabecera.Fecha_deposito = new DateTime(int.Parse(linea.Substring(54, 4)), int.Parse(linea.Substring(51, 2)), int.Parse(linea.Substring(48, 2)));// Mid(Trim(Registro), Len(Trim(Registro)) - 9, 10)

                        /*guardo al recibo*/
                        parametros.Clear();

                        parametros.Add("@Id_Interna", r.cabecera.Legajo);
                        parametros.Add("@mes", r.cabecera.mes);
                        parametros.Add("@a" + g + "o", r.cabecera.anio);
                        parametros.Add("@Cuil", r.cabecera.CUIL);
                        parametros.Add("@Id_Oficina", r.cabecera.Oficina);
                        parametros.Add("@Nro_Orden", r.cabecera.Orden);
                        parametros.Add("@Nivel", r.cabecera.Nivel);
                        parametros.Add("@grado", r.cabecera.Grado);
                        parametros.Add("@F_Ingreso", r.cabecera.FechaIngreso);
                        parametros.Add("@SBruto", r.cabecera.Bruto);
                        parametros.Add("@SDescuento", r.cabecera.Descuentos);
                        parametros.Add("@SNeto", r.cabecera.Neto);
                        parametros.Add("@NroCta", r.cabecera.CuentaBancaria);
                        parametros.Add("@Banco", r.cabecera.Banco);
                        parametros.Add("@F_Deposito", r.cabecera.Fecha_deposito);
                        parametros.Add("@confirmado", 0);//seteo default
                        parametros.Add("@Usuario", usuario.Id);
                        parametros.Add("@TipoLiquidacion", r.cabecera.TipoLiquidacion);
                        parametros.Add("@opcionJubilatoria", r.cabecera.OpcionJubilatoria);
                        parametros.Add("@afjp", r.cabecera.Afjp);
                        parametros.Add("@liquidacion", idLiquidacion);

                        int resultado = int.Parse(cn.EjecutarEscalar("dbo.[PLA_ADD_Recibos]", parametros).ToString());

                        /*actualizo la cantidad de recibos procesados*/
                        Cant_Reg = Cant_Reg + 1;
                        /*guardo los detalles*/
                        foreach (Detalle detalle in r.detalles)
                        {
                            parametros.Clear();
                            //datos propios del recibo
                            parametros.Add("@Id_recibo", resultado);
                            parametros.Add("@Id_interna", r.cabecera.Legajo);
                            parametros.Add("@Mes", r.cabecera.mes);
                            parametros.Add("@A" + g + "o", r.cabecera.anio);
                            //datos propios del detalle
                            parametros.Add("@Concepto", detalle.Concepto);
                            parametros.Add("@Aporte", detalle.Aporte);
                            parametros.Add("@Descuento", detalle.Descuento);
                            parametros.Add("@TipoConcepto", detalle.TipoConcepto);
                            parametros.Add("@Concepto_Descrip", detalle.Descripcion);

                            cn.EjecutarSinResultado("dbo.[PLA_ADD_Recibos_Detalles]", parametros);
                        }
                        break;
                    default:
                        //Console.WriteLine("Default case");
                        break;
                }
                if (leoConceptos == true)
                {
                    Detalle detalle = new Detalle();

                    detalle.Concepto = linea.Substring(9, 6).Trim();//Trim(Mid(Registro, 103, 6))
                    detalle.TipoConcepto = linea.Substring(15, 2).Trim();//Trim(Mid(Registro, 109, 2))
                    detalle.Descripcion = linea.Substring(17, 37).Trim();//Trim(Mid(Registro, 111, 37))
                    detalle.Aporte = utils.SubstringAFormatoFloatToDecimal(linea.Substring(54, 10));//Trim(Replace(Replace(Mid(Registro, 148, 10), ".", ""), ",", "."))
                    detalle.Descuento = utils.SubstringAFormatoFloatToDecimal(linea.Substring(71, 10));//Trim(Replace(Replace(Mid(Registro, 165, 10), ".", ""), ",", "."))

                    r.detalles.Add(detalle);


                }

                i++;
            }

            /*guardo la liquidacion migrada*/
            parametros.Clear();
            parametros.Add("@Archivo", nombreArchivo);
            parametros.Add("@Cant_Registros", Cant_Reg);
            parametros.Add("@Usuario", usuario.Id);
            parametros.Add("@liquidacion", idLiquidacion);
            parametros.Add("@mes", mes);
            parametros.Add("@a" + g + "o", anio);
            parametros.Add("@descripcion", descripcionImportacion);
            parametros.Add("@tipo_liquidacion", tipoLiquidacion);

            cn.EjecutarSinResultado("dbo.[PLA_ADD_Recibos_Migrados]", parametros);

            //si todo salio bien hasta aca retorno exito
            return JsonConvert.SerializeObject(new
            {
                result = "archivoImportado.ok",
                cantRegistros = Cant_Reg
            });
        }
        catch (Exception ex)
        {
            if (ex is SqlException)
            {
                // Handle more specific SqlException exception here.
                return JsonConvert.SerializeObject(new
                {
                    result = "archivoImportado.nok",
                    error = "Hubo un problema en la importacion. Registro "+ (Cant_Reg+1) + ". Intente mas tarde."//ex.Message
                });
            }
            else
            {
                return JsonConvert.SerializeObject(new
                {
                    result = "archivoImportado.nok",
                    error = "Error en linea " + i//ex.Message
                });
            }
        }

    }

    [WebMethod]//modo 1- transaccional completo o nada
    public string ImportarRecibos(int mes, int anio, string descripcionImportacion, int tipoLiquidacion, String contenidoArchivo, String nombreArchivo, Usuario usuario)
    {
        /*NOTA: importante se asume que nadie cobra mas de 999.9999,99; caso contrario se debe adecuar la conversion
         de numeros desde un string a float,pj removiendo mas de un . en la funcion Utils de conversion*/
        int idLiquidacion;
        idLiquidacion = RepositorioDeArchivosMigrados().GET_Recibos_Migrados_MaxLiq();        
        Utils utils = new Utils();
        Recibo r = new Recibo();
        r.cabecera = new Cabecera();
        r.detalles = new List<Detalle>();
        Boolean leoConceptos = false;
        string[] lineas = contenidoArchivo.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
        int longitud = lineas.Length;
        int i = 0;
        string linea;
        int Cant_Reg = 0; //indica la cantidad de recibos migrados
        var parametros = new Dictionary<string, object>();
        
        //codificacion para la ñ, no se porque en esta consulta el objeto dictionary no acepta a a ñ como key??????
        Encoding ascii = Encoding.UTF32;
        byte[] t = ascii.GetBytes("\u00F1");//codigo para la ñ
        string g = ascii.GetString(t);

        using (TransactionScope scope = new TransactionScope())
        {
            ConexionBDSQL cn = Conexion();
            SqlTransaction sqlTran = cn.BeginTransaction2();
            try
            {   // realizar todas las operaciones de SP
                while (i < longitud)
                {
                    linea = lineas[i];
                    //el primer caracter sirve para delinear que parte del recibo se procesa
                    //nota: en este nivel no se hace nada con las lineas que no empiezan con alguna de las opciones del case
                    //a menos que se esten leyendo conceptos
                    switch (linea.ElementAt(0))
                    {
                        //como en cada linea se repide la informacion del recibo solo se va  a tomar los valores izquierdos
                        case '1':
                            //no hace nada solo indica el nombre de la institucion de donde vienen los recibos
                            break;
                        case '2':
                            //leo la cabecera del recibo
                            r.cabecera.reset();
                            r.cabecera.Legajo = utils.SubstringAEntero(linea.Substring(13, 7)); //Replace(Mid(Registro, 107, 7), ".", "")
                            r.cabecera.CUIL = linea.Substring(53, 13);//Mid(Registro, 147, 13)
                            r.cabecera.Oficina = int.Parse(linea.Substring(68, 3));//Mid(Registro, 162, 3)                   
                            r.cabecera.Orden = utils.SubstringAEntero(linea.Substring(76, 5)); //Replace(Mid(Registro, 170, 5), ".", "")
                            break;
                        case '3':
                            //indico que se van a empezar a leer los conceptos
                            leoConceptos = true;
                            //limpio la lista de detalles
                            r.detalles.Clear();
                            break;
                        case '4':
                            //termino de leer los conceptos,
                            leoConceptos = false;
                            //agrego mas campos al encabezado
                            r.cabecera.Bruto = utils.SubstringAFormatoFloat(linea.Substring(54, 10));//Replace(Mid(Registro, 148, 10), ",", ".")
                            r.cabecera.Descuentos = utils.SubstringAFormatoFloat(linea.Substring(71, 10)); //Replace(Mid(Registro, 165, 10), ",", ".")
                            r.cabecera.Nivel = linea.Substring(9, 1); //Mid(Registro, 103, 1)
                            r.cabecera.Grado = linea.Substring(11, 2); //Mid(Registro, 105, 2)
                            r.cabecera.OpcionJubilatoria = linea.Substring(22, 2); //Mid(Registro, 116, 2)
                            r.cabecera.Afjp = linea.Substring(32, 10).Trim(); //Mid(Registro, 126, 10)

                            break;
                        case '0':
                            //termino de leer un recibo, primera parte
                            //agrego mas campos al encabezado
                            //linea.Substring(63, 10).Replace("*"," ").Replace(",",".");
                            r.cabecera.Neto = utils.SubstringAFormatoFloat(linea.Substring(63, 10).Trim('*'));// Replace(Replace(Mid(Registro, 157, 10), ",", "."), "*", "")
                            r.cabecera.mes = int.Parse(linea.Substring(13, 2));//Mid(Registro, 107, 2)
                            r.cabecera.anio = int.Parse(linea.Substring(16, 4));//Mid(Registro, 110, 4)
                            r.cabecera.TipoLiquidacion = int.Parse(linea.Substring(29, 2));// Mid(Registro, 123, 2)

                            i++;
                            linea = lineas[i]; //leo otra linea  para obtener la fecha de ingreso
                            if (linea.Substring(117, 10) == "00/00/0000")
                            {
                                r.cabecera.FechaIngreso = new DateTime(1900, 1, 1);// Mid(Registro, 118, 10)
                            }
                            else
                            {
                                r.cabecera.FechaIngreso = new DateTime(int.Parse(linea.Substring(123, 4)), int.Parse(linea.Substring(120, 2)), int.Parse(linea.Substring(117, 2)));// Mid(Registro, 118, 10)

                            }
                            i++;
                            linea = lineas[i]; //leo otra linea  para obtener datos de la cuenta bancaria
                            r.cabecera.Banco = linea.Substring(159, 20); //Mid(Registro, 160, 20)
                            r.cabecera.CuentaBancaria = linea.Substring(149, 10);//Mid(Registro, 150, 10)
                            break;
                        case '6':
                            //termino de leer un recibo y guardo al recibo con sus conceptos

                            //agrego mas campos al encabezado
                            r.cabecera.Fecha_deposito = new DateTime(int.Parse(linea.Substring(54, 4)), int.Parse(linea.Substring(51, 2)), int.Parse(linea.Substring(48, 2)));// Mid(Trim(Registro), Len(Trim(Registro)) - 9, 10)

                            /*guardo al recibo*/
                            parametros.Clear();

                            parametros.Add("@Id_Interna", r.cabecera.Legajo);
                            parametros.Add("@mes", r.cabecera.mes);
                            parametros.Add("@a" + g + "o", r.cabecera.anio);
                            parametros.Add("@Cuil", r.cabecera.CUIL);
                            parametros.Add("@Id_Oficina", r.cabecera.Oficina);
                            parametros.Add("@Nro_Orden", r.cabecera.Orden);
                            parametros.Add("@Nivel", r.cabecera.Nivel);
                            parametros.Add("@grado", r.cabecera.Grado);
                            parametros.Add("@F_Ingreso", r.cabecera.FechaIngreso);
                            parametros.Add("@SBruto", r.cabecera.Bruto);
                            parametros.Add("@SDescuento", r.cabecera.Descuentos);
                            parametros.Add("@SNeto", r.cabecera.Neto);
                            parametros.Add("@NroCta", r.cabecera.CuentaBancaria);
                            parametros.Add("@Banco", r.cabecera.Banco);
                            parametros.Add("@F_Deposito", r.cabecera.Fecha_deposito);
                            parametros.Add("@confirmado", 0);//seteo default
                            parametros.Add("@Usuario", usuario.Id);
                            parametros.Add("@TipoLiquidacion", r.cabecera.TipoLiquidacion);
                            parametros.Add("@opcionJubilatoria", r.cabecera.OpcionJubilatoria);
                            parametros.Add("@afjp", r.cabecera.Afjp);
                            parametros.Add("@liquidacion", idLiquidacion);

                            int resultado = int.Parse(cn.EjecutarEscalarEnContextoTransaccional("dbo.[PLA_ADD_Recibos]", parametros, ref sqlTran).ToString());
                            
                            /*actualizo la cantidad de recibos procesados*/
                            Cant_Reg = Cant_Reg + 1;
                            /*guardo los detalles*/
                            foreach (Detalle detalle in r.detalles)
                            {
                                parametros.Clear();
                                //datos propios del recibo
                                parametros.Add("@Id_recibo", resultado);
                                parametros.Add("@Id_interna", r.cabecera.Legajo);
                                parametros.Add("@Mes", r.cabecera.mes);
                                parametros.Add("@A" + g + "o", r.cabecera.anio);
                                //datos propios del detalle
                                parametros.Add("@Concepto", detalle.Concepto);
                                parametros.Add("@Aporte", detalle.Aporte);
                                parametros.Add("@Descuento", detalle.Descuento);
                                parametros.Add("@TipoConcepto", detalle.TipoConcepto);
                                parametros.Add("@Concepto_Descrip", detalle.Descripcion);

                                cn.EjecutarSinResultadoEnContextoTransaccional("dbo.[PLA_ADD_Recibos_Detalles]", parametros, ref sqlTran);
                                
                            }
                            break;
                        default:
                            //Console.WriteLine("Default case");
                            break;
                    }
                    if (leoConceptos == true)
                    {
                        Detalle detalle = new Detalle();

                        detalle.Concepto = linea.Substring(9, 6).Trim();//Trim(Mid(Registro, 103, 6))
                        detalle.TipoConcepto = linea.Substring(15, 2).Trim();//Trim(Mid(Registro, 109, 2))
                        detalle.Descripcion = linea.Substring(17, 37).Trim();//Trim(Mid(Registro, 111, 37))
                        detalle.Aporte = utils.SubstringAFormatoFloatToDecimal(linea.Substring(54, 10));//Trim(Replace(Replace(Mid(Registro, 148, 10), ".", ""), ",", "."))
                        detalle.Descuento = utils.SubstringAFormatoFloatToDecimal(linea.Substring(71, 10));//Trim(Replace(Replace(Mid(Registro, 165, 10), ".", ""), ",", "."))

                        r.detalles.Add(detalle);


                    }

                    i++;
                }

                /*guardo la liquidacion migrada*/
                parametros.Clear();
                parametros.Add("@Archivo", nombreArchivo);
                parametros.Add("@Cant_Registros", Cant_Reg);
                parametros.Add("@Usuario", usuario.Id);
                parametros.Add("@liquidacion", idLiquidacion);
                parametros.Add("@mes", mes);
                parametros.Add("@a" + g + "o", anio);
                parametros.Add("@descripcion", descripcionImportacion);
                parametros.Add("@tipo_liquidacion", tipoLiquidacion);

                cn.EjecutarSinResultadoEnContextoTransaccional("dbo.[PLA_ADD_Recibos_Migrados]", parametros, ref sqlTran);

                sqlTran.Commit();

                //si todo salio bien hasta aca retorno exito
                return JsonConvert.SerializeObject(new
                {
                    result = "archivoImportado.ok",
                    cantRegistros = Cant_Reg
                });

            }
            catch (Exception ex)
            {
                cn.RollbackTransaction(ref sqlTran);
                if (ex is SqlException)
                {
                    // Handle more specific SqlException exception here.
                    return JsonConvert.SerializeObject(new
                    {
                        result = "archivoImportado.nok",
                        error = "Hubo un problema en la importacion. Intente mas tarde."//ex.Message
                    });
                }
                else
                {
                    return JsonConvert.SerializeObject(new
                    {
                        result = "archivoImportado.nok",
                        error = "Error en linea " + i//ex.Message
                    });
                }
            }
            finally
            {   //siempre se ejecuta por mas que este el return anterior en el catch
                cn.CerrarBD();
            }            
        }
    }

    [WebMethod]//modo bulk- transaccional completo o nada ,NO funciona creo que pierdo la transaccion
    //en el bulk
    public string ImportarRecibos3(int mes, int anio, string descripcionImportacion, int tipoLiquidacion, String contenidoArchivo, String nombreArchivo, Usuario usuario)
    {
        /*NOTA: importante se asume que nadie cobra mas de 999.9999,99; caso contrario se debe adecuar la conversion
         de numeros desde un string a float,pj removiendo mas de un . en la funcion Utils de conversion*/
        int idLiquidacion;
        idLiquidacion = RepositorioDeArchivosMigrados().GET_Recibos_Migrados_MaxLiq();
        //obtengo un id de recibo disponible para insertar los siguientes recibos
        //int idReciboSiguiente = RepoLegajo().GET_Recibos_MaxIdRecibo();

        Utils utils = new Utils();
        Recibo r = new Recibo();
        r.cabecera = new Cabecera();
        r.detalles = new List<Detalle>();
        Boolean leoConceptos = false;
        string[] lineas = contenidoArchivo.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
        int longitud = lineas.Length;
        int i = 0;
        string linea;
        int Cant_Reg = 0; //indica la cantidad de recibos migrados
        var parametros = new Dictionary<string, object>();

        //codificacion para la ñ, no se porque en esta consulta el objeto dictionary no acepta a a ñ como key??????
        Encoding ascii = Encoding.UTF32;
        byte[] t = ascii.GetBytes("\u00F1");//codigo para la ñ
        string g = ascii.GetString(t);

        //creo la tabla de recibos
        /*var tablaRecibos = new DataTable();
        tablaRecibos.Columns.Add("Id_interna", typeof(int));
        tablaRecibos.Columns.Add("mes", typeof(Int16));
        tablaRecibos.Columns.Add("a" + g + "o", typeof(Int16));
        tablaRecibos.Columns.Add("Cuil", typeof(string));
        tablaRecibos.Columns.Add("Id_Oficina", typeof(Int16));
        tablaRecibos.Columns.Add("Nro_Orden", typeof(Int16));
        tablaRecibos.Columns.Add("Nivel", typeof(string));
        tablaRecibos.Columns.Add("grado", typeof(string));
        tablaRecibos.Columns.Add("F_Ingreso", typeof(DateTime));
        tablaRecibos.Columns.Add("SBruto", typeof(float));        
        tablaRecibos.Columns.Add("SNeto", typeof(float));
        tablaRecibos.Columns.Add("NroCta", typeof(string));
        tablaRecibos.Columns.Add("Banco", typeof(string));
        tablaRecibos.Columns.Add("F_Deposito", typeof(DateTime));
        tablaRecibos.Columns.Add("confirmado", typeof(int));
        tablaRecibos.Columns.Add("Usuario", typeof(Int16));
        tablaRecibos.Columns.Add("SDescuento", typeof(float));
        tablaRecibos.Columns.Add("TipoLiquidacion", typeof(string));
        tablaRecibos.Columns.Add("OpcionJubilatoria", typeof(string));
        tablaRecibos.Columns.Add("AFJP", typeof(string));
        tablaRecibos.Columns.Add("liquidacion", typeof(int));*/

        //creo la tabla de detalles
        var tablaDetalles = new DataTable();
        tablaDetalles.Columns.Add("Id_recibo", typeof(int));
        tablaDetalles.Columns.Add("Id_interna", typeof(int));
        tablaDetalles.Columns.Add("Mes", typeof(Int16));
        tablaDetalles.Columns.Add("A" + g + "o", typeof(Int16));
        tablaDetalles.Columns.Add("Concepto", typeof(string));
        tablaDetalles.Columns.Add("Aporte", typeof(float));
        tablaDetalles.Columns.Add("Descuento", typeof(float));
        tablaDetalles.Columns.Add("TipoConcepto", typeof(string));
        tablaDetalles.Columns.Add("Concepto_Descrip", typeof(string));

        using (TransactionScope scope = new TransactionScope())
        {
            ConexionBDSQL cn = Conexion();
            SqlTransaction sqlTran = cn.BeginTransaction2();
            try
            {   // realizar todas las operaciones de SP
                while (i < longitud)
                {
                    linea = lineas[i];
                    //el primer caracter sirve para delinear que parte del recibo se procesa
                    //nota: en este nivel no se hace nada con las lineas que no empiezan con alguna de las opciones del case
                    //a menos que se esten leyendo conceptos
                    switch (linea.ElementAt(0))
                    {
                        //como en cada linea se repide la informacion del recibo solo se va  a tomar los valores izquierdos
                        case '1':
                            //no hace nada solo indica el nombre de la institucion de donde vienen los recibos
                            break;
                        case '2':
                            //leo la cabecera del recibo
                            r.cabecera.reset();
                            r.cabecera.Legajo = utils.SubstringAEntero(linea.Substring(13, 7)); //Replace(Mid(Registro, 107, 7), ".", "")
                            r.cabecera.CUIL = linea.Substring(53, 13);//Mid(Registro, 147, 13)
                            r.cabecera.Oficina = int.Parse(linea.Substring(68, 3));//Mid(Registro, 162, 3)                   
                            r.cabecera.Orden = utils.SubstringAEntero(linea.Substring(76, 5)); //Replace(Mid(Registro, 170, 5), ".", "")
                            break;
                        case '3':
                            //indico que se van a empezar a leer los conceptos
                            leoConceptos = true;
                            //limpio la lista de detalles
                            r.detalles.Clear();
                            break;
                        case '4':
                            //termino de leer los conceptos,
                            leoConceptos = false;
                            //agrego mas campos al encabezado
                            r.cabecera.Bruto = utils.SubstringAFormatoFloat(linea.Substring(54, 10));//Replace(Mid(Registro, 148, 10), ",", ".")
                            r.cabecera.Descuentos = utils.SubstringAFormatoFloat(linea.Substring(71, 10)); //Replace(Mid(Registro, 165, 10), ",", ".")
                            r.cabecera.Nivel = linea.Substring(9, 1); //Mid(Registro, 103, 1)
                            r.cabecera.Grado = linea.Substring(11, 2); //Mid(Registro, 105, 2)
                            r.cabecera.OpcionJubilatoria = linea.Substring(22, 2); //Mid(Registro, 116, 2)
                            r.cabecera.Afjp = linea.Substring(32, 10).Trim(); //Mid(Registro, 126, 10)

                            break;
                        case '0':
                            //termino de leer un recibo, primera parte
                            //agrego mas campos al encabezado
                            //linea.Substring(63, 10).Replace("*"," ").Replace(",",".");
                            r.cabecera.Neto = utils.SubstringAFormatoFloat(linea.Substring(63, 10).Trim('*'));// Replace(Replace(Mid(Registro, 157, 10), ",", "."), "*", "")
                            r.cabecera.mes = int.Parse(linea.Substring(13, 2));//Mid(Registro, 107, 2)
                            r.cabecera.anio = int.Parse(linea.Substring(16, 4));//Mid(Registro, 110, 4)
                            r.cabecera.TipoLiquidacion = int.Parse(linea.Substring(29, 2));// Mid(Registro, 123, 2)

                            i++;
                            linea = lineas[i]; //leo otra linea  para obtener la fecha de ingreso
                            if (linea.Substring(117, 10) == "00/00/0000")
                            {
                                r.cabecera.FechaIngreso = new DateTime(1900, 1, 1);// Mid(Registro, 118, 10)
                            }
                            else
                            {
                                r.cabecera.FechaIngreso = new DateTime(int.Parse(linea.Substring(123, 4)), int.Parse(linea.Substring(120, 2)), int.Parse(linea.Substring(117, 2)));// Mid(Registro, 118, 10)

                            }
                            i++;
                            linea = lineas[i]; //leo otra linea  para obtener datos de la cuenta bancaria
                            r.cabecera.Banco = linea.Substring(159, 20); //Mid(Registro, 160, 20)
                            r.cabecera.CuentaBancaria = linea.Substring(149, 10);//Mid(Registro, 150, 10)
                            break;
                        case '6':
                            //termino de leer un recibo y guardo al recibo con sus conceptos


                            //agrego mas campos al encabezado
                            r.cabecera.Fecha_deposito = new DateTime(int.Parse(linea.Substring(54, 4)), int.Parse(linea.Substring(51, 2)), int.Parse(linea.Substring(48, 2)));// Mid(Trim(Registro), Len(Trim(Registro)) - 9, 10)

                            /*guardo al recibo*/
                            parametros.Clear();

                            parametros.Add("@Id_Interna", r.cabecera.Legajo);
                            parametros.Add("@mes", r.cabecera.mes);
                            parametros.Add("@a" + g + "o", r.cabecera.anio);
                            parametros.Add("@Cuil", r.cabecera.CUIL);
                            parametros.Add("@Id_Oficina", r.cabecera.Oficina);
                            parametros.Add("@Nro_Orden", r.cabecera.Orden);
                            parametros.Add("@Nivel", r.cabecera.Nivel);
                            parametros.Add("@grado", r.cabecera.Grado);
                            parametros.Add("@F_Ingreso", r.cabecera.FechaIngreso);
                            parametros.Add("@SBruto", r.cabecera.Bruto);
                            parametros.Add("@SDescuento", r.cabecera.Descuentos);
                            parametros.Add("@SNeto", r.cabecera.Neto);
                            parametros.Add("@NroCta", r.cabecera.CuentaBancaria);
                            parametros.Add("@Banco", r.cabecera.Banco);
                            parametros.Add("@F_Deposito", r.cabecera.Fecha_deposito);
                            parametros.Add("@confirmado", 0);//seteo default
                            parametros.Add("@Usuario", usuario.Id);
                            parametros.Add("@TipoLiquidacion", r.cabecera.TipoLiquidacion);
                            parametros.Add("@opcionJubilatoria", r.cabecera.OpcionJubilatoria);
                            parametros.Add("@afjp", r.cabecera.Afjp);
                            parametros.Add("@liquidacion", idLiquidacion);

                            int resultado = int.Parse(cn.EjecutarEscalarEnContextoTransaccional("dbo.[PLA_ADD_Recibos]", parametros, ref sqlTran).ToString());

                            //Convert.ToInt16(r.cabecera.anio);
                            /*guardo al recibo en la tabla temporal*/
                            /*tablaRecibos.Rows.Add(new object[]
                            {
                                r.cabecera.Legajo,
                                r.cabecera.mes,
                                r.cabecera.anio,
                                r.cabecera.CUIL,
                                r.cabecera.Oficina,
                                r.cabecera.Orden,
                                r.cabecera.Nivel,
                                r.cabecera.Grado,
                                r.cabecera.FechaIngreso,
                                r.cabecera.Bruto,
                                r.cabecera.Descuentos,
                                r.cabecera.Neto,
                                r.cabecera.CuentaBancaria,
                                r.cabecera.Banco,
                                r.cabecera.Fecha_deposito,
                                0,
                                usuario.Id,
                                r.cabecera.TipoLiquidacion,
                                r.cabecera.OpcionJubilatoria,
                                r.cabecera.Afjp,
                                idLiquidacion
                            });*/

                            /*actualizo la cantidad de recibos procesados*/
                            Cant_Reg = Cant_Reg + 1;
                            
                            /*guardo los detalles*/
                            foreach (Detalle detalle in r.detalles)
                            {                                
                                /*guardo los detalles en la tabla temporal*/
                                /*tablaDetalles.Rows.Add(new object[]
                                {
                                    resultado,
                                    r.cabecera.Legajo,
                                    r.cabecera.mes,
                                    r.cabecera.anio,
                                    detalle.Concepto,
                                    detalle.Aporte,
                                    detalle.Descuento,
                                    detalle.TipoConcepto,
                                    detalle.Descripcion
                                });*/
                                var row = tablaDetalles.NewRow();
                                row["Id_Recibo"] = resultado;
                                row["Id_interna"] = r.cabecera.Legajo;
                                row["Mes"] = r.cabecera.mes;
                                row["A"+g+"o"] = r.cabecera.anio;
                                row["Concepto"] = detalle.Concepto;
                                row["Aporte"] = detalle.Aporte;
                                row["Descuento"] = detalle.Descuento;
                                row["TipoConcepto"] = detalle.TipoConcepto;
                                row["Concepto_Descrip"] = detalle.Descripcion;
                                tablaDetalles.Rows.Add((DataRow)row);
                            }

                            /*actualizo el idRecibo para el siguiente recibo*/
                            //idReciboSiguiente++;

                            break;
                        default:
                            //Console.WriteLine("Default case");
                            break;
                    }
                    if (leoConceptos == true)
                    {
                        Detalle detalle = new Detalle();

                        detalle.Concepto = linea.Substring(9, 6).Trim();//Trim(Mid(Registro, 103, 6))
                        detalle.TipoConcepto = linea.Substring(15, 2).Trim();//Trim(Mid(Registro, 109, 2))
                        detalle.Descripcion = linea.Substring(17, 37).Trim();//Trim(Mid(Registro, 111, 37))
                        detalle.Aporte = utils.SubstringAFormatoFloatToDecimal(linea.Substring(54, 10));//Trim(Replace(Replace(Mid(Registro, 148, 10), ".", ""), ",", "."))
                        detalle.Descuento = utils.SubstringAFormatoFloatToDecimal(linea.Substring(71, 10));//Trim(Replace(Replace(Mid(Registro, 165, 10), ".", ""), ",", "."))

                        r.detalles.Add(detalle);


                    }

                    i++;
                }

                /*ahora si guardo los recibos y los detalles en forma masiva*/
                /*como el insert de los recibos controla una condicion y actualiza idArea, NO es solo
                 un insert por lo que no puedo hacer el insert de forma bulk*/
                //cn.BulkEnContextoTransaccional(tablaRecibos,"PLA_Recibos",ref sqlTran);
                cn.BulkEnContextoTransaccional(tablaDetalles, "PLA_Recibos_Detalle", ref sqlTran);


                /*guardo la liquidacion migrada*/
                parametros.Clear();
                parametros.Add("@Archivo", nombreArchivo);
                parametros.Add("@Cant_Registros", Cant_Reg);
                parametros.Add("@Usuario", usuario.Id);
                parametros.Add("@liquidacion", idLiquidacion);
                parametros.Add("@mes", mes);
                parametros.Add("@a" + g + "o", anio);
                parametros.Add("@descripcion", descripcionImportacion);
                parametros.Add("@tipo_liquidacion", tipoLiquidacion);

                cn.EjecutarSinResultadoEnContextoTransaccional("dbo.[PLA_ADD_Recibos_Migrados]", parametros, ref sqlTran);

                sqlTran.Commit();

                //si todo salio bien hasta aca retorno exito
                return JsonConvert.SerializeObject(new
                {
                    result = "archivoImportado.ok",
                    cantRegistros = Cant_Reg
                });

            }
            catch (Exception ex)
            {
                cn.RollbackTransaction(ref sqlTran);
                if (ex is SqlException)
                {
                    // Handle more specific SqlException exception here.
                    return JsonConvert.SerializeObject(new
                    {
                        result = "archivoImportado.nok",
                        error = "Hubo un problema en la importacion. Intente mas tarde."//ex.Message
                    });
                }
                else
                {
                    return JsonConvert.SerializeObject(new
                    {
                        result = "archivoImportado.nok",
                        error = "Error en linea " + i//ex.Message
                    });
                }
            }
            finally
            {   //siempre se ejecuta por mas que este el return anterior en el catch
                cn.CerrarBD();
            }
        }
    }

    [WebMethod]
    public string GetArchivoImportado(string nombreArchivo, Usuario usuario)
    {
        if (RepositorioDeArchivosMigrados().GetArchivoMigrado(nombreArchivo))
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "archivoImportado.ok"/*,
                idArchivo = recibo.idArchivo*/
            });
        }
        else
        {
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "archivoImportado.nok"
                //error = e.Message
            });
        }
    }

    [WebMethod]
    public string GetRecibo(int liquidacion, Usuario usuario)
    {
        RepositorioLegajo repo = RepoLegajo();

        return repo.GetReciboDeSueldo(usuario.Owner.Documento, liquidacion);
    }

    /*[WebMethod]
   public List<TipoLiquidacion> GetTiposLiquidacion()
   {
       List<TipoLiquidacion> areas = new List<TipoLiquidacion>();
       var repositorio = RepositorioDeTipoDeLiquidacion.Nuevo(Conexion());
       return repositorio.All();
   }*/

    [WebMethod]
    public String GetTiposLiquidacion()
    {
        List<TipoLiquidacion> areas = new List<TipoLiquidacion>();
        var repositorio = RepositorioDeTipoDeLiquidacion.Nuevo(Conexion());
        return JsonConvert.SerializeObject(repositorio.All());
    }

    /*cuando se prueba con soap ui es mejor quitar el objeto usuario asi, es mas directo realizar pruebas*/
    [WebMethod]
    public string GetRecibosResumen(int tipoLiquidacion, int anio, int mes, Usuario usuario)
    {
        //tira error porque puede ser null el tipo liquidacion y los demas, poner un '' o 0 y verificar aca
        RepositorioLegajo repo = RepoLegajo();
        //TODO VER:     obtengo los recibos NO firmados
        return repo.GetRecibosResumen(tipoLiquidacion, anio, mes);
    }

    [WebMethod]
    //este metodo es independiente de si el recibo es historico o no
    //el id puede ser el idLiquidacion o (tipoLiquidacion+anio+mes),////NOOOOOOOO falta agregar el idLiquidacion,porque pueden haber varias liquidacion con esos datos
    public string GetIdRecibosSinFirmar(int idLiquidacion, int tipoLiquidacion, int anio, int mes, Usuario usuario)
    {


        RepositorioLegajo repo = RepoLegajo();

        var respuesta = new { idLiquidacion = idLiquidacion, anio = anio, mes = mes, tipoLiquidacion = tipoLiquidacion, recibosSinFirmar = repo.GetIdRecibosSinFirmar(idLiquidacion, tipoLiquidacion, anio, mes) };

        return JsonConvert.SerializeObject(respuesta);
    }

    /*[WebMethod] */
    /*NOTA:SE puede borrar*/
    /*public StringRespuestaWS GetIdRecibosSinFirmarAnterior(int tipoLiquidacion, int anio, int mes, Usuario usuario)
    {

        //tira error porque puede ser null el tipo liquidacion y los demas, poner un '' o 0 y verificar aca
        var respuesta = new StringRespuestaWS();
        try
        {

            RepositorioLegajo repo = RepoLegajo();
            string lista = repo.GetIdRecibosSinFirmar(tipoLiquidacion, anio, mes);
            respuesta.Respuesta = lista;
        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al obtener la lista de ids recibos";
            respuesta.setException(e);

        }
        return respuesta;
    }*/
       
    [WebMethod]
    //este metodo es independiente de si el recibo es historico o no
    //el id puede ser el idLiquidacion o (tipoLiquidacion+anio+mes)
    public string GetIdRecibosFirmados(int idLiquidacion, int tipoLiquidacion, int anio, int mes, Usuario usuario)
    {


        RepositorioLegajo repo = RepoLegajo();

        var respuesta = new { idLiquidacion = idLiquidacion, anio = anio, mes = mes, tipoLiquidacion = tipoLiquidacion, recibosFirmados = repo.GetIdRecibosFirmados(idLiquidacion, tipoLiquidacion, anio, mes) };

        return JsonConvert.SerializeObject(respuesta);
    }

    [WebMethod]
    //este metodo es independiente de si el recibo es historico o no
    //el id puede ser el idLiquidacion o (tipoLiquidacion+anio+mes),////NOOOOOOOO falta agregar el idLiquidacion,porque pueden haber varias liquidacion con esos datos
    public string GetIdRecibosSinFirmarYFirmados(int idLiquidacion, int tipoLiquidacion, int anio, int mes, Usuario usuario)
    {


        RepositorioLegajo repo = RepoLegajo();

        var respuesta = new { idLiquidacion = idLiquidacion, anio = anio, mes = mes, tipoLiquidacion = tipoLiquidacion, recibosSinFirmar = repo.GetIdRecibosSinFirmar(idLiquidacion, tipoLiquidacion, anio, mes), recibosFirmados = repo.GetIdRecibosFirmados(idLiquidacion, tipoLiquidacion, anio, mes) };
 
        return JsonConvert.SerializeObject(respuesta);


    }


    //se retorna los datos del recibo separado por un patron determinado
    //FALTA depurar en caso de usar, eso es porque se debe limpiar el SP dbo.RPT_PLA_Recibos_Haberes_Detalle para que no rellene con filas vacias
    [WebMethod]
    public StringRespuestaWS GetReciboParseado(int id_recibo, int modo)
    {

        var respuesta = new StringRespuestaWS();

        try
        {
            RepositorioLegajo repo = RepoLegajo();
            Recibo recibo;

            //para trabajarlo como objeto es mejor definir un objeto que traiga el recibo, asi se puede acceder a
            //sus propiedades desde el back(desde el front con js se puede acceder), porque no se puede acceder a campos 
            //especificos del objecto recibo cuando el casteo es a object.


            //datos del recibo a rellenar    
            recibo = repo.GetReciboDeSueldoPorIDSinRelleno(id_recibo,modo);

            string reciboPlanText = recibo.getReciboParseado(recibo);

            var reciboPlanTextBytes = System.Text.Encoding.UTF8.GetBytes(reciboPlanText);
            respuesta.Respuesta = System.Convert.ToBase64String(reciboPlanTextBytes);

        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al obtener el PDF del recibo del empleador";
            respuesta.setException(e);

        }


        return respuesta;

    }

    //recibo digital unico tanto para el empleado como para el empleador
    [WebMethod]
    public string GetReciboPDFDigital(int id_recibo,int modo)
    {
        object res;

        try
        {
            RepositorioLegajo repo = RepoLegajo();
            Recibo recibo;

            //para trabajarlo como objeto es mejor definir un objeto que traiga el recibo, asi se puede acceder a
            //sus propiedades desde el back(desde el front con js se puede acceder), porque no se puede acceder a campos 
            //especificos del objecto recibo cuando el casteo es a object.
            

            //datos del recibo a rellenar    
            recibo = repo.GetReciboDeSueldoPorID(id_recibo,modo);

            //
            var modelo_para_pdf = new List<object>() { recibo };
            var converter = new GenReciboEmpleadoToPdfConverter();
            var mapa_para_pdf = converter.CrearMapa(modelo_para_pdf);
            var creador_pdf = new CreadorDePdfs();
            byte[] bytes;
            byte[] bytes2;
            byte[] bytes3;
            String csv;
            CSVUtil csvUtil = new CSVUtil();

            if (mapa_para_pdf["paginasPDF"] == "una")
            {
                //el nombre del pdf generado va a ser el idRecibo
                bytes = creador_pdf.FillPDF(TemplatePath("Recibodigital_v1a.pdf"), Convert.ToString(id_recibo), mapa_para_pdf);
                bytes2 = creador_pdf.AgregarImagenAPDF(bytes, "FRH0502," + Convert.ToString(id_recibo));

                //hasta aqui el pdf esta rellenado solo falta agregar el csv                
                csv = csvUtil.generarCodigoCSV(bytes2, CSVUtil.SAF_MDS, id_recibo, CSVUtil.TIPO_RECIBO_DIGITAL);
                bytes3 = creador_pdf.AgregarCSVyQRAPDF(bytes2, csv,1);

            }
            else
            {
                if (mapa_para_pdf["paginasPDF"] == "dos")
                {
                    //el nombre del pdf generado va a ser el idRecibo
                    bytes = creador_pdf.FillPDF(TemplatePath("ReciboDigital_v1b.pdf"), Convert.ToString(id_recibo), mapa_para_pdf);
                    bytes2 = creador_pdf.AgregarImagenAPDF(bytes, "FRH0502," + Convert.ToString(id_recibo));

                    //hasta aqui el pdf esta rellenado solo falta agregar el csv                
                    csv = csvUtil.generarCodigoCSV(bytes2, CSVUtil.SAF_MDS, id_recibo, CSVUtil.TIPO_RECIBO_DIGITAL);
                    bytes3 = creador_pdf.AgregarCSVyQRAPDF(bytes2, csv,2);
                }
                else
                {
                    //el nombre del pdf generado va a ser el idRecibo
                    bytes = creador_pdf.FillPDF(TemplatePath("ReciboDigital_v1c.pdf"), Convert.ToString(id_recibo), mapa_para_pdf);
                    bytes2 = creador_pdf.AgregarImagenAPDF(bytes, "FRH0502," + Convert.ToString(id_recibo));

                    //hasta aqui el pdf esta rellenado solo falta agregar el csv                
                    csv = csvUtil.generarCodigoCSV(bytes2, CSVUtil.SAF_MDS, id_recibo, CSVUtil.TIPO_RECIBO_DIGITAL);
                    bytes3 = creador_pdf.AgregarCSVyQRAPDF(bytes2, csv,3);
                }
            }

            //            //agregar el csv a la tabla respectiva
            //            //CSVUtil.formatCSV(s, 4, CSV_SEPARATOR)   //agrega los "-" cada 4 caracteres al csv
            //            bool resultado = repoVeri.agregarCsv(csv, CSVUtil.ID_TIPO_RECIBO_DIGITAL, id_recibo);

            //return Convert.ToBase64String(bytes2);
            //return Convert.ToBase64String(bytes2);
            res = new
            {
                DioError = false,
                Respuesta = Convert.ToBase64String(bytes3),
                csv = csv
            };

        }
        catch (Exception e)
        {
            res = new
            {
                DioError = true,
                MensajeDeErrorAmigable = "Se produjo un error al obtener el PDF del recibo del empleador",
                error = e
            };


        }


        return JsonConvert.SerializeObject(res);

    }

    //NOTA: YA NO SE USA, la forma de visualizacion del recibo es UNICA.....!
    //es la visualizacion del recibo desde el punto de vista del empleado
    [WebMethod]
    public string GetReciboPDFEmpleado(int id_recibo,int modo)
    {
        RepositorioLegajo repo = RepoLegajo();
        Recibo recibo;

        //para trabajarlo como objeto es mejor definir un objeto que traiga el recibo, asi se puede acceder a
        //sus propiedades desde el back(desde el front con js se puede acceder), porque no se puede acceder a campos 
        //especificos del objecto recibo cuando el casteo es a object.

        //datos del recibo a rellenar    
        recibo = repo.GetReciboDeSueldoPorID(id_recibo,modo);

        //
        var modelo_para_pdf = new List<object>() { recibo };
        var converter = new GenReciboEmpleadoToPdfConverter();
        var mapa_para_pdf = converter.CrearMapa(modelo_para_pdf);
        var creador_pdf = new CreadorDePdfs();

        byte[] bytes;
        byte[] bytes2;

        if (mapa_para_pdf["paginasPDF"] == "una")
        {
            //el nombre del pdf generado va a ser el idRecibo
            bytes = creador_pdf.FillPDF(TemplatePath("ReciboEmpleado_v2.pdf"), Convert.ToString(id_recibo), mapa_para_pdf);
            bytes2 = creador_pdf.AgregarImagenAPDF(bytes, "FRH0502," + Convert.ToString(id_recibo));
        }

        else
        {
            if (mapa_para_pdf["paginasPDF"] == "dos")
            {   //el nombre del pdf generado va a ser el idRecibo
                bytes = creador_pdf.FillPDF(TemplatePath("ReciboEmpleado_v2b.pdf"), Convert.ToString(id_recibo), mapa_para_pdf);
                bytes2 = creador_pdf.AgregarImagenAPDF(bytes, "FRH0502," + Convert.ToString(id_recibo));
            }
            else
            {// hay tres paginas
                //el nombre del pdf generado va a ser el idRecibo
                bytes = creador_pdf.FillPDF(TemplatePath("ReciboEmpleado_v2c.pdf"), Convert.ToString(id_recibo), mapa_para_pdf);
                bytes2 = creador_pdf.AgregarImagenAPDF(bytes, "FRH0502," + Convert.ToString(id_recibo));

            }

        }
        return Convert.ToBase64String(bytes2);

        //////////////////////////////////
        ///      Object x = JsonConvert.DeserializeObject<Object>(datos);
        ///      //JsonConvert.SerializeObject(x);


        ///      return x.Cabecera ;
    }

    [WebMethod]
    //IMPORTANTE antes de guardar el pdf se debe obtenerCsv asi cierra el archivo..y lo deja ineditable antes de guardarlo!!!!!!
    //Se guarda el pdf firmado y el csv en otra tabla
    public int GuardarReciboPDFFirmado(string bytes_pdf,int idLiquidacion, int id_recibo, int anio, int mes, int tipoLiquidacion, string csv, Usuario usuario)
    {
        RepositorioVerificador repoVeri = RepoVerificador();

        var creador_pdf = new CreadorDePdfs();

        int id_archivo = 0;

        //los bytes vienen en base64, convierto de base64 a string y luego a bytes.
 //       byte[] data = System.Convert.FromBase64String(bytes_pdf);
        //string csv = creador_pdf.ObtenerCsv(System.Text.Encoding.UTF8.GetBytes(bytes_pdf));

        //Obtener el csv del pdf
        //string r = creador_pdf.ObtenerCsvYcerrarPDF(data);
 //       string csv = "";
 //       creador_pdf.ObtenerCsvYcerrarPDF(ref csv, ref data);
        //        try
        //        {//COMO el proceso de guardado desde la tabla de la BD al disco es externo, no genero una subclase de archivo
        //que tendria el path de disco donde guardar el archivo. Se puede agregar una clase con propieda la clase archivo 
        //subo el archivo firmado y actualiza la tabla que indica que el idRecibo fue firmado
        id_archivo = RepositorioDeArchivosFirmados().GuardarArchivo(bytes_pdf, /*usuario.Owner.Id*/0);/*por default a 0 luego este se actualizara al idPersona del usuario cuando conforma el recibo*/
//                   id_archivo = 20;//RepositorioDeArchivos().GuardarArchivo(bytes_pdf);// id_recibo;//simulo el guardado del archivo
        //var r = RepositorioDeArchivos().GetArchivo(id_archivo); //19444 es un pdf firmado          
        //actualizo el recibo firmado por el empleado, 

        //la hora de conformacion de firma es la del reloj del servidor de la app, pero se puede dejar que sea la del reloj del server db
        /*borrado            DateTime hoy = DateTime.Now;
                    string CadenaOriginal = Convert.ToString(id_recibo) + Convert.ToString(id_archivo) + Convert.ToString(anio) + Convert.ToString(mes) + Convert.ToString(tipoLiquidacion) + Convert.ToString(usuario.Owner.Id) + hoy;
                    //uso el encriptador del password 
                    System.Security.Cryptography.HashAlgorithm hashValue = new System.Security.Cryptography.SHA1CryptoServiceProvider();
                    byte[] bytes = System.Text.Encoding.UTF8.GetBytes(CadenaOriginal); 
                    byte[] byteHash = hashValue.ComputeHash(bytes);
                    hashValue.Clear();

                    RepoReciboFirmado().agregarReciboFirmado(id_recibo, id_archivo, anio, mes, tipoLiquidacion, usuario.Owner.Id, hoy, Convert.ToBase64String(byteHash));
         */
                
        RepoReciboFirmado().agregarReciboFirmado(idLiquidacion, id_recibo, id_archivo, anio, mes, tipoLiquidacion);

        //agregar el csv a la tabla respectiva
        //CSVUtil.formatCSV(s, 4, CSV_SEPARATOR)   //agrega los "-" cada 4 caracteres al csv
        bool resultado = repoVeri.agregarCsv(csv, CSVUtil.ID_TIPO_RECIBO_DIGITAL, id_recibo);

        //        var s=  Convert.FromBase64String(r);

        //TODOOOOOO
        return id_archivo;
        //        }
        //        catch (Exception ex)
        //        {   //si se puedo subir el archivo a disco actualizo la tabla de recibo firmado
        //           return -1;
        //  throw ex; si relanzo la exception, en el cliente se lo toma como exception javascript?
        //        }

    }

    /*NOTA: la funcion de abajo vuelve a verificar si el usuario tiene permiso de descarga de cualqueir recibo o no,
     * deberia hacerse lo mismo par la visualizacion de recibos................*/
    [WebMethod]
    public StringRespuestaWS GetReciboPDFDigitalArchivado(int idArchivo, Usuario usuario)
    {

        var respuesta = new StringRespuestaWS();
        try
        {
            Funcionalidad[] f = GetFuncionalidadesActuales(usuario.Id, usuario);
            bool tienePermiso = false;
            foreach (Funcionalidad i in f)
            {
                if (i.Nombre.Equals("imprimir_recibos")){ tienePermiso = true; }
            }
            if (tienePermiso) {
                respuesta.Respuesta = RepositorioDeArchivosFirmados().GetArchivoAsync(idArchivo);
            } else {
                respuesta.Respuesta = RepositorioDeArchivosFirmados().GetArchivoAsync(idArchivo, usuario.Owner.Id);
            }
            //        try
            //        {//COMO el proceso de guardado desde la tabla de la BD al disco es externo, no genero una subclase de archivo
            //que tendria el path de disco donde guardar el archivo. Se puede agregar una clase con propieda la clase archivo 
            //subo el archivo firmado y actualiza la tabla que indica que el idRecibo fue firmado
            //respuesta.Respuesta = RepositorioDeArchivosFirmados().GetArchivoAsync(idArchivo, usuario.Owner.Id);
            //respuesta.Respuesta = RepositorioDeArchivosFirmados().GetArchivoAsync(idArchivo);
            //           id_archivo = 20;//RepositorioDeArchivos().GuardarArchivo(bytes_pdf);// id_recibo;//simulo el guardado del archivo
            //var r = RepositorioDeArchivos().GetArchivo(id_archivo); //19444 es un pdf firmado          
            //actualizo el recibo firmado por el empleado, 

            //la hora de conformacion de firma es la del reloj del servidor de la app, pero se puede dejar que sea la del reloj del server db
        }
        catch (Exception e)
        { 
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al obtener el PDF del recibo del empleador";
            respuesta.setException(e);

        }


        return respuesta;

    }

    [WebMethod]
    public string ConformarRecibo(int idRecibo, int recibo_aceptado, string observacion,Usuario usuario)
    {
        //la observacion la seteo a este valor por default, sin importar que observacion venga desde el html
        if (recibo_aceptado == 0)
        {
            observacion = "Declaro que el monto del recibo no ha sido acreditado en mi cuenta sueldo";
        }
        else {
            observacion = "";
        }
        
        //obtengo el recibo
        List<ReciboFirmado> recibos = RepoReciboFirmado().ObtenerDesdeLaBase(idRecibo);
        ReciboFirmado recibo = recibos[0];
        //Cuando conforma el recibo el empleado, recien ahi se produce el hash de toda la fila 
        DateTime hoy = DateTime.Now;
        //como voy a adelantarme para generar el hash, asumo conformidad con valor 1, con este valor se va a setear despues
        string CadenaOriginal = Convert.ToString(recibo.idRecibo) + Convert.ToString(recibo.idArchivo) + Convert.ToString(recibo.anio) + Convert.ToString(recibo.mes) + Convert.ToString(recibo.tipoLiquidacion) + Convert.ToString(1) + Convert.ToString(usuario.Owner.Id) + hoy + Convert.ToString(recibo_aceptado) + observacion;
        //uso el encriptador del password 
        System.Security.Cryptography.HashAlgorithm hashValue = new System.Security.Cryptography.SHA1CryptoServiceProvider();
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(CadenaOriginal);
        byte[] byteHash = hashValue.ComputeHash(bytes);
        hashValue.Clear();

        //TODO: La siguiente seccion seria mejor poner a las dos transacciones en una sola transaccion
        //ya sea en un bloque transaccioal o las dos en un mismo sp en la bd
        bool a = RepoReciboFirmado().conformarRecibo(idRecibo, usuario.Owner.Id, hoy, recibo_aceptado, observacion, Convert.ToBase64String(byteHash));
        bool b = RepositorioDeArchivosFirmados().ActualizarArchivoFirmado(recibo.idArchivo, usuario.Owner.Id);
        //actualizo el conformado de la persona  y el idPersona
        if (a && b)
        {            
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "conformarRecibo.ok", idArchivo = recibo.idArchivo
            });
        } else{
            return JsonConvert.SerializeObject(new
            {
                tipoDeRespuesta = "conformarRecibo.error"
                //error = e.Message
            });
        }
    }

    /*obtener las liquidaciones es independiente de si los recibos son historicos o no*/
    [WebMethod]
    public string GetLiquidacionesAFirmar(Usuario usuario)
    {
        
        RepositorioLegajo repo = RepoLegajo();
        /*para obtener desde que fecha se realiza la firma de recibos*/
        ConfiguracionReciboDigital crd = RepoReciboFirmado().GetConfiguracionReciboDigital();

        return repo.GetLiquidacionesAFirmar(crd.fecha_anioInicio_ReciboDigital,crd.fecha_mesInicio_ReciboDigital);
    }


    /*recibos de sueldos de un dado usuario segun el modo 0: recientes, 1 historico*/
    [WebMethod]
    public string GetRecibos(int idPersona,int modo,Usuario usuario)
    {
        return RepoReciboFirmado().GetRecibos(idPersona,modo);
    }

    [WebMethod]
    public string GetReciboPorId(int id_recibo, int modo)
    {
        RepositorioLegajo repo = RepoLegajo();
        Recibo recibo;
  
        recibo = repo.GetReciboDeSueldoPorID(id_recibo,modo);

        return JsonConvert.SerializeObject(recibo);

    }

    #endregion

    #region " Verificacion Electronica"

    [WebMethod] /*********TO DO*****/
    public string VerificarCSV(string codigoCSV, int modo)
    {
        RepositorioLegajo repoL = RepoLegajo();
        Recibo recibo;

        //el codigo csv puede venir sin guiones
        //string csv = codigoCSV.Replace("-", ""); 
        int indiceGuion = codigoCSV.IndexOf("-");
        if (indiceGuion < 0) { 
            //entonces no tiene guiones, se los agregamos
            codigoCSV = CSVUtil.formatCSV(codigoCSV,4,"-");
        }

        //obtengo el id del documento a
        //return JsonConvert.SerializeObject(new { tipoDeRespuesta = "nok", cuil = "", periodo = "", neto = "" });
//        recibo = repoL.GetReciboDeSueldoPorID(788022); //788022 recibo de prueba
//        return JsonConvert.SerializeObject(new { tipoDeRespuesta = "ok", cuil = recibo.cabecera.CUIL, periodo = recibo.cabecera.FechaLiquidacion, neto = recibo.cabecera.Neto });

        /************/
        RepositorioVerificador repo = RepoVerificador();
        List<CSV> listaCSV = repo.ObtenerDesdeLaBase(codigoCSV);
        //verifico que existe el numero de csv
        if (listaCSV.Count > 0)
        {
            int tipo_doc = listaCSV[0].tipo_doc_electronico;
            int id_doc = listaCSV[0].id_doc;
            //Obtengo los datos del documento 
            //FABI quiere hacer un SP que automaticamente obtenga el documento PERO aca por el momento lo dejo harcodeado
            //nota: aca se obtiene a todo el recibo, lo ideal seria solo obtener los datos que se mostraran...
            recibo = repoL.GetReciboDeSueldoPorID((int)id_doc,modo); //788022 recibo de prueba
            
            //string montoFormato = recibo.cabecera.Neto.ToString("c2", CultureInfo.CreateSpecificCulture("es-ES"));            

            /* Codigo que le da mormato monetario al valor devuelto por la consulta al sqlserver (ej 46582,83)*/
            CultureInfo culture = new CultureInfo("es-AR");
            NumberFormatInfo nfi = new CultureInfo("es-AR", true).NumberFormat;
            int indice = recibo.cabecera.Neto.IndexOf(".");
            string montoSinDecimales = recibo.cabecera.Neto.Substring(indice+1, 2);
            string montoDecimales = recibo.cabecera.Neto.Substring(0, indice);

            decimal attempt1 = decimal.Parse(montoDecimales, culture);
            string monto = attempt1.ToString("c", nfi);
            int indice2 = monto.IndexOf(",");
            string monto2 = monto.Substring(0, indice2);
            string montoFormato = monto2 + "," + montoSinDecimales;            
 
            return JsonConvert.SerializeObject(new { tipoDeRespuesta = "ok", cuil = recibo.cabecera.CUIL, periodo = recibo.cabecera.FechaLiquidacion, neto = montoFormato });

        }
        else {
            return JsonConvert.SerializeObject(new { tipoDeRespuesta = "nok", cuil = "", periodo = "", neto = "" });
        }
        // y obtengo el tipo_doc_electrico, id_doc

        //recibosFirmados = repo.GetIdRecibosFirmados(tipoLiquidacion, anio, mes);

    }


    #endregion

   
    [WebMethod]
    public Serv_Adm_Publica_Privada[] GetExperienciaLaboral_Principal(int nroDocumento, Usuario usuario)
    {
        var RepositorioServAdm = new RepositorioServicios();
        return RepositorioServAdm.GetExperienciaLaboral_Principal(nroDocumento, usuario).ToArray();
    }


    [WebMethod]
    public GeneralCombos[] GetAmbitos()
    {
        var RepositorioServAdm = new RepositorioServicios();

        var Lista = RepositorioServAdm.GetAmbitos();

        List<GeneralCombos> ambitos = new List<GeneralCombos>();

        foreach (var item in Lista)
        {
            ambitos.Add(new GeneralCombos() { id = item.id, descripcion = item.descripcion });
        }

        return ambitos.ToArray();
    }


    [WebMethod]
    public GeneralCombos[] GetCargos()
    {
        var RepositorioServAdm = new RepositorioServicios();

        var Lista = RepositorioServAdm.GetCargos();

        List<GeneralCombos> cargo = new List<GeneralCombos>();

        foreach (var item in Lista)
        {
            cargo.Add(new GeneralCombos() { id = item.id, descripcion = item.descripcion });
        }

        return cargo.ToArray();
    }


    [WebMethod]
    public bool Alta_Servicios_Administracion(Serv_Adm_Publica_Privada[] ListaAdmPublicoPrivado, Serv_Adm_Publica_Privada AdmPublicoPrivado, string servicio, Usuario usuario)
    {
        var RepositorioServAdm = new RepositorioServicios();

        if (servicio == "PUBLICO")
        {
            return RepositorioServAdm.Alta_Servicios_Adm_Publica(ListaAdmPublicoPrivado, AdmPublicoPrivado, usuario);
        }

        if (servicio == "PRIVADO")
        {
            return RepositorioServAdm.Alta_Servicios_Adm_Privada(ListaAdmPublicoPrivado, AdmPublicoPrivado, usuario);
        }

        return false;
    }


    [WebMethod]
    public Serv_Adm_Publica_Privada[] GET_Servicios_Adm_Detalles(int legajo, string folio, string servicio, Usuario usuario)
    {
        var RepositorioServAdm = new RepositorioServicios();

        if (servicio == "PUBLICO")
        {
            return RepositorioServAdm.GET_Servicios_Adm_Publica_Detalles(legajo, folio, usuario).ToArray();
        }

        if (servicio == "PRIVADO")
        {
            return RepositorioServAdm.GET_Servicios_Adm_Privada_Detalles(legajo, folio, usuario).ToArray();
        }

        return null;
    }


    #region  Potenciar Trabajo
    /// -------------------- Potenciar Trabajo -------------------------------------------------

    [WebMethod]
    public List<PT_Resumen_Inicial> PT_Get_Estado_Carga_Participacion_Por_Periodo (int anio, int mes, Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        return RepositorioPT.PT_Get_Estado_Carga_Participacion_Por_Periodo(anio, mes, usuario);
    }


    [WebMethod]
    public GeneralCombos[] PT_Get_Cargar_Combo(string nombre_combo, Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        var Lista = RepositorioPT.PT_Get_Cargar_Combo(nombre_combo, usuario);

        List<GeneralCombos> combo = new List<GeneralCombos>();

        foreach (var item in Lista)
        {
            combo.Add(new GeneralCombos() { id = item.id, descripcion = item.descripcion });
        }

        return combo.ToArray();
    }


    [WebMethod]
    public List<PT_Periodo> PT_Get_Periodos()
    {   
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        return RepositorioPT.PT_Get_Periodos();
    }

    
    [WebMethod]
    public PT_Participacion_Dato[] PT_Get_Participaciones_Dato()
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        var Lista = RepositorioPT.PT_Get_Participaciones_Dato();

        List<PT_Participacion_Dato> combo = new List<PT_Participacion_Dato>();

        foreach (var item in Lista)
        {
            combo.Add(new PT_Participacion_Dato() { Id = item.Id, Dato_Participacion = item.Dato_Participacion, Permite_Observaciones = item.Permite_Observaciones });
        }

        return combo.ToArray();
    }


    [WebMethod]
    public List<PT_Participacion> PT_Get_Add_Participacion_por_Entidad_Periodo(int id_entidad, int mes, int anio, Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        return RepositorioPT.PT_Get_Add_Participacion_por_Entidad_Periodo(id_entidad, mes, anio, usuario);
    }


    [WebMethod]
    public void PT_Upd_Participacion_por_Entidad_Periodo (int id_entidad, int mes, int anio, int semana, int id_persona_rol, int id_dato_participacion, Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        RepositorioPT.PT_Upd_Participacion_por_Entidad_Periodo(id_entidad, mes, anio, semana, id_persona_rol, id_dato_participacion, usuario);
    }


    [WebMethod]
    public void PT_UPD_Participacion_Observacion (int id_entidad, int mes, int anio, int id_persona_rol, string observacion, Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        RepositorioPT.PT_UPD_Participacion_Observacion(id_entidad, mes, anio, id_persona_rol, observacion, usuario);
    }

    [WebMethod]
    public List<PT_Justificacion> PT_Get_Justificacion(int id_registro)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        return RepositorioPT.PT_Get_Justificacion(id_registro);
    }


    [WebMethod]
    public void PT_Add_Justificacion(int id_persona_rol, int id_motivo, int anio_desde, int mes_desde, int semana_desde, int anio_hasta, int mes_hasta, int semana_hasta, string justificacion, int id_entidad, Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        RepositorioPT.PT_Add_Justificacion(id_persona_rol, id_motivo, anio_desde, mes_desde, semana_desde, anio_hasta, mes_hasta, semana_hasta, justificacion, id_entidad, usuario);
    }


    [WebMethod]
    public void PT_Upd_Justificacion(int id_registro_justif, int anio_hasta, int mes_hasta, int semana_hasta, string justificacion, int id_entidad, Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        RepositorioPT.PT_Upd_Justificacion(id_registro_justif, anio_hasta, mes_hasta, semana_hasta, justificacion, id_entidad, usuario);
    }

    [WebMethod]
    public List<PT_Informe> PT_Get_Estado_Informes_Participacion_Por_Periodo(Usuario usuario)
    {
        var RepositorioPT = new RepositorioPotenciarTrabajo();

        return RepositorioPT.PT_Get_Estado_Informes_Participacion_Por_Periodo(usuario);
    }
    


    /// -------------------- Potenciar Trabajo -------------------------------------------------
    #endregion



    #region " Coronavirus "

    [WebMethod]
    public StringRespuestaWS GuardarDDJJCOVID19(string v1, string v2, string v3, string v4, string v5, string v6, string v7, string v8, string fi1, string fh1, string n1, string fi2, string fh2, string n2, string fi3, string fh3, string n3, string fi4, string fh4, string n4, string fi5, string fh5, string n5, string nyap, string nyap2, string idUsuario)
    {
        var respuesta = new StringRespuestaWS();

        int id_ddjj = RepositorioDeCovid19().GetMaxIdCovid();

        try
        {
            //RepositorioLegajo repo = RepoLegajo();
            //Recibo recibo;

            //datos del recibo a rellenar    
            //recibo = repo.GetReciboDeSueldoPorID(id_recibo, modo);

            //
            //var modelo_para_pdf = new List<object>() {v1,v2,v3,v4,v5,v6,v7,v8, usr.Owner.Apellido + ", " + usr.Owner.Nombre + " (" + usr.Owner.Documento.ToString() + ")", fi1, fh1, n1, fi2, fh2, n2, fi3, fh3, n3, fi4, fh4, n4, fi5, fh5, n5 };
            var modelo_para_pdf = new List<object>() { v1, v2, v3, v4, v5, v6, v7, v8, nyap, fi1, fh1, n1, fi2, fh2, n2, fi3, fh3, n3, fi4, fh4, n4, fi5, fh5, n5, "Id_DDJJ: "+Convert.ToString(id_ddjj) };

            var converter = new GenDDJJCOVID19Converter();
            var mapa_para_pdf = converter.CrearMapa(modelo_para_pdf);
            var creador_pdf = new CreadorDePdfs();
            byte[] bytes;

            //el nombre del pdf generado va a ser el idRecibo
            //bytes = creador_pdf.FillPDF(TemplatePath("DDJJ_v4.pdf"), Convert.ToString("DDJJCOVID19_"+ usr.Owner.Apellido + usr.Owner.Nombre), mapa_para_pdf);
            bytes = creador_pdf.FillPDF(TemplatePath("DDJJ_v5.pdf"), Convert.ToString("DDJJCOVID19_" + nyap2), mapa_para_pdf);


            respuesta.Respuesta = Convert.ToBase64String(bytes);

            RepositorioDeCovid19().GuardarCovid19(v1, v2, v3, v4, v5, v6, v7, v8, Int32.Parse(idUsuario), fi1, fh1, n1, fi2, fh2, n2, fi3, fh3, n3, fi4, fh4, n4, fi5, fh5, n5, id_ddjj, respuesta.Respuesta,mapa_para_pdf["Fecha"]);


        }
        catch (Exception e)
        {
            respuesta.MensajeDeErrorAmigable = "Se produjo un error al obtener el PDF del recibo del empleador";
            respuesta.setException(e);

        }


        return respuesta;

    }


    #endregion



}
